Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/array", "array/array/Array", "array/array/Variable", "array/array_methods", "array/array_methods/abs", "array/array_methods/acos", "array/array_methods/acosh", "array/array_methods/adam_step", "array/array_methods/adam_update", "array/array_methods/add", "array/array_methods/add_ivy_array_instance_methods", "array/array_methods/all", "array/array_methods/all_equal", "array/array_methods/any", "array/array_methods/argmax", "array/array_methods/argmin", "array/array_methods/argsort", "array/array_methods/asarray", "array/array_methods/asin", "array/array_methods/asinh", "array/array_methods/astype", "array/array_methods/atan", "array/array_methods/atan2", "array/array_methods/atanh", "array/array_methods/binary_cross_entropy", "array/array_methods/bitwise_and", "array/array_methods/bitwise_invert", "array/array_methods/bitwise_left_shift", "array/array_methods/bitwise_or", "array/array_methods/bitwise_right_shift", "array/array_methods/bitwise_xor", "array/array_methods/broadcast_arrays", "array/array_methods/broadcast_to", "array/array_methods/can_cast", "array/array_methods/ceil", "array/array_methods/cholesky", "array/array_methods/clip", "array/array_methods/clip_matrix_norm", "array/array_methods/clip_vector_norm", "array/array_methods/concat", "array/array_methods/constant_pad", "array/array_methods/conv1d", "array/array_methods/cos", "array/array_methods/cosh", "array/array_methods/cross", "array/array_methods/cross_entropy", "array/array_methods/cumprod", "array/array_methods/depthwise_conv2d", "array/array_methods/det", "array/array_methods/dev", "array/array_methods/diagonal", "array/array_methods/divide", "array/array_methods/dtype", "array/array_methods/eigh", "array/array_methods/eigvalsh", "array/array_methods/einops_rearrange", "array/array_methods/einops_reduce", "array/array_methods/einops_repeat", "array/array_methods/einsum", "array/array_methods/empty_like", "array/array_methods/equal", "array/array_methods/erf", "array/array_methods/exp", "array/array_methods/expand_dims", "array/array_methods/expm1", "array/array_methods/finfo", "array/array_methods/flip", "array/array_methods/floor", "array/array_methods/floor_divide", "array/array_methods/from_dlpack", "array/array_methods/full_like", "array/array_methods/gather", "array/array_methods/gather_nd", "array/array_methods/gelu", "array/array_methods/gradient_descent_update", "array/array_methods/greater", "array/array_methods/greater_equal", "array/array_methods/has_nans", "array/array_methods/iinfo", "array/array_methods/inplace_decrement", "array/array_methods/inv", "array/array_methods/is_bool_dtype", "array/array_methods/is_float_dtype", "array/array_methods/is_int_dtype", "array/array_methods/is_uint_dtype", "array/array_methods/is_variable", "array/array_methods/isfinite", "array/array_methods/isinf", "array/array_methods/isnan", "array/array_methods/lamb_update", "array/array_methods/lars_update", "array/array_methods/layer_norm", "array/array_methods/leaky_relu", "array/array_methods/less", "array/array_methods/less_equal", "array/array_methods/log", "array/array_methods/log10", "array/array_methods/log1p", "array/array_methods/log2", "array/array_methods/logaddexp", "array/array_methods/logical_and", "array/array_methods/logical_not", "array/array_methods/logical_or", "array/array_methods/logical_xor", "array/array_methods/matmul", "array/array_methods/matrix_norm", "array/array_methods/matrix_rank", "array/array_methods/matrix_transpose", "array/array_methods/max", "array/array_methods/mean", "array/array_methods/meshgrid", "array/array_methods/min", "array/array_methods/multinomial", "array/array_methods/multiply", "array/array_methods/native_array", "array/array_methods/negative", "array/array_methods/nonzero", "array/array_methods/not_equal", "array/array_methods/ones_like", "array/array_methods/optimizer_update", "array/array_methods/outer", "array/array_methods/permute_dims", "array/array_methods/pinv", "array/array_methods/positive", "array/array_methods/pow", "array/array_methods/prod", "array/array_methods/qr", "array/array_methods/randint", "array/array_methods/random_normal", "array/array_methods/random_uniform", "array/array_methods/relu", "array/array_methods/remainder", "array/array_methods/repeat", "array/array_methods/reshape", "array/array_methods/result_type", "array/array_methods/roll", "array/array_methods/round", "array/array_methods/searchsorted", "array/array_methods/shuffle", "array/array_methods/sigmoid", "array/array_methods/sign", "array/array_methods/sin", "array/array_methods/sinh", "array/array_methods/softmax", "array/array_methods/softplus", "array/array_methods/solve", "array/array_methods/sort", "array/array_methods/sparse_cross_entropy", "array/array_methods/split", "array/array_methods/sqrt", "array/array_methods/square", "array/array_methods/squeeze", "array/array_methods/stable_divide", "array/array_methods/stack", "array/array_methods/std", "array/array_methods/stop_gradient", "array/array_methods/subtract", "array/array_methods/sum", "array/array_methods/svd", "array/array_methods/svdvals", "array/array_methods/swapaxes", "array/array_methods/tan", "array/array_methods/tanh", "array/array_methods/tensordot", "array/array_methods/tile", "array/array_methods/to_device", "array/array_methods/to_list", "array/array_methods/to_numpy", "array/array_methods/trace", "array/array_methods/tril", "array/array_methods/triu", "array/array_methods/trunc", "array/array_methods/unique_all", "array/array_methods/unique_counts", "array/array_methods/unique_inverse", "array/array_methods/unique_values", "array/array_methods/unstack", "array/array_methods/var", "array/array_methods/variable", "array/array_methods/variable_data", "array/array_methods/vecdot", "array/array_methods/vector_norm", "array/array_methods/vector_to_skew_symmetric_matrix", "array/array_methods/where", "array/array_methods/zero_pad", "array/array_methods/zeros_like", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_type", "array/data_type/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utilities", "array/utilities/ArrayWithutilities", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container_methods", "container/container_methods/abs", "container/container_methods/acos", "container/container_methods/acosh", "container/container_methods/adam_step", "container/container_methods/adam_update", "container/container_methods/add", "container/container_methods/add_ivy_container_instance_methods", "container/container_methods/all", "container/container_methods/all_equal", "container/container_methods/any", "container/container_methods/argmax", "container/container_methods/argmin", "container/container_methods/argsort", "container/container_methods/asin", "container/container_methods/asinh", "container/container_methods/astype", "container/container_methods/atan", "container/container_methods/atan2", "container/container_methods/atanh", "container/container_methods/binary_cross_entropy", "container/container_methods/bitwise_and", "container/container_methods/bitwise_invert", "container/container_methods/bitwise_left_shift", "container/container_methods/bitwise_or", "container/container_methods/bitwise_right_shift", "container/container_methods/bitwise_xor", "container/container_methods/broadcast_arrays", "container/container_methods/broadcast_to", "container/container_methods/can_cast", "container/container_methods/ceil", "container/container_methods/cholesky", "container/container_methods/clip", "container/container_methods/clip_matrix_norm", "container/container_methods/clip_vector_norm", "container/container_methods/concat", "container/container_methods/constant_pad", "container/container_methods/conv1d", "container/container_methods/cos", "container/container_methods/cosh", "container/container_methods/cross", "container/container_methods/cross_entropy", "container/container_methods/cumprod", "container/container_methods/depthwise_conv2d", "container/container_methods/det", "container/container_methods/dev", "container/container_methods/diagonal", "container/container_methods/divide", "container/container_methods/dtype", "container/container_methods/eigh", "container/container_methods/einops_rearrange", "container/container_methods/einops_reduce", "container/container_methods/einops_repeat", "container/container_methods/einsum", "container/container_methods/empty_like", "container/container_methods/equal", "container/container_methods/erf", "container/container_methods/exp", "container/container_methods/expand_dims", "container/container_methods/expm1", "container/container_methods/finfo", "container/container_methods/flip", "container/container_methods/floor", "container/container_methods/floor_divide", "container/container_methods/from_dlpack", "container/container_methods/full_like", "container/container_methods/gather", "container/container_methods/gather_nd", "container/container_methods/gelu", "container/container_methods/gradient_descent_update", "container/container_methods/greater", "container/container_methods/greater_equal", "container/container_methods/has_nans", "container/container_methods/iinfo", "container/container_methods/inplace_decrement", "container/container_methods/inv", "container/container_methods/is_bool_dtype", "container/container_methods/is_float_dtype", "container/container_methods/is_int_dtype", "container/container_methods/is_uint_dtype", "container/container_methods/is_variable", "container/container_methods/isfinite", "container/container_methods/isinf", "container/container_methods/isnan", "container/container_methods/lamb_update", "container/container_methods/lars_update", "container/container_methods/layer_norm", "container/container_methods/leaky_relu", "container/container_methods/less", "container/container_methods/less_equal", "container/container_methods/log", "container/container_methods/log10", "container/container_methods/log1p", "container/container_methods/log2", "container/container_methods/logaddexp", "container/container_methods/logical_and", "container/container_methods/logical_not", "container/container_methods/logical_or", "container/container_methods/logical_xor", "container/container_methods/matmul", "container/container_methods/matrix_norm", "container/container_methods/matrix_power", "container/container_methods/matrix_rank", "container/container_methods/matrix_transpose", "container/container_methods/max", "container/container_methods/maximum", "container/container_methods/mean", "container/container_methods/meshgrid", "container/container_methods/min", "container/container_methods/minimum", "container/container_methods/multinomial", "container/container_methods/multiply", "container/container_methods/native_array", "container/container_methods/negative", "container/container_methods/nonzero", "container/container_methods/not_equal", "container/container_methods/ones_like", "container/container_methods/optimizer_update", "container/container_methods/outer", "container/container_methods/permute_dims", "container/container_methods/positive", "container/container_methods/pow", "container/container_methods/prod", "container/container_methods/qr", "container/container_methods/randint", "container/container_methods/random_normal", "container/container_methods/random_uniform", "container/container_methods/relu", "container/container_methods/remainder", "container/container_methods/repeat", "container/container_methods/reshape", "container/container_methods/result_type", "container/container_methods/roll", "container/container_methods/round", "container/container_methods/searchsorted", "container/container_methods/shuffle", "container/container_methods/sigmoid", "container/container_methods/sign", "container/container_methods/sin", "container/container_methods/sinh", "container/container_methods/slogdet", "container/container_methods/softmax", "container/container_methods/softplus", "container/container_methods/solve", "container/container_methods/sort", "container/container_methods/sparse_cross_entropy", "container/container_methods/split", "container/container_methods/sqrt", "container/container_methods/square", "container/container_methods/squeeze", "container/container_methods/stable_divide", "container/container_methods/stack", "container/container_methods/static_abs", "container/container_methods/static_acos", "container/container_methods/static_acosh", "container/container_methods/static_add", "container/container_methods/static_all", "container/container_methods/static_all_equal", "container/container_methods/static_any", "container/container_methods/static_arange", "container/container_methods/static_argmax", "container/container_methods/static_argmin", "container/container_methods/static_argsort", "container/container_methods/static_asarray", "container/container_methods/static_asin", "container/container_methods/static_asinh", "container/container_methods/static_astype", "container/container_methods/static_atan", "container/container_methods/static_atan2", "container/container_methods/static_atanh", "container/container_methods/static_binary_cross_entropy", "container/container_methods/static_bitwise_and", "container/container_methods/static_bitwise_invert", "container/container_methods/static_bitwise_left_shift", "container/container_methods/static_bitwise_or", "container/container_methods/static_bitwise_right_shift", "container/container_methods/static_bitwise_xor", "container/container_methods/static_broadcast_arrays", "container/container_methods/static_broadcast_to", "container/container_methods/static_can_cast", "container/container_methods/static_ceil", "container/container_methods/static_cholesky", "container/container_methods/static_clip", "container/container_methods/static_clip_matrix_norm", "container/container_methods/static_clip_vector_norm", "container/container_methods/static_concat", "container/container_methods/static_conv1d", "container/container_methods/static_cos", "container/container_methods/static_cosh", "container/container_methods/static_cross", "container/container_methods/static_cross_entropy", "container/container_methods/static_cumprod", "container/container_methods/static_default_float_dtype", "container/container_methods/static_depthwise_conv2d", "container/container_methods/static_det", "container/container_methods/static_dev", "container/container_methods/static_diagonal", "container/container_methods/static_divide", "container/container_methods/static_dtype", "container/container_methods/static_einops_rearrange", "container/container_methods/static_einops_reduce", "container/container_methods/static_einops_repeat", "container/container_methods/static_empty_like", "container/container_methods/static_equal", "container/container_methods/static_erf", "container/container_methods/static_exp", "container/container_methods/static_expand_dims", "container/container_methods/static_expm1", "container/container_methods/static_eye", "container/container_methods/static_finfo", "container/container_methods/static_floor", "container/container_methods/static_floor_divide", "container/container_methods/static_from_dlpack", "container/container_methods/static_full_like", "container/container_methods/static_function_supported_dtypes", "container/container_methods/static_function_unsupported_dtypes", "container/container_methods/static_gather", "container/container_methods/static_gather_nd", "container/container_methods/static_gelu", "container/container_methods/static_greater", "container/container_methods/static_greater_equal", "container/container_methods/static_has_nans", "container/container_methods/static_iinfo", "container/container_methods/static_inplace_decrement", "container/container_methods/static_inv", "container/container_methods/static_is_bool_dtype", "container/container_methods/static_is_float_dtype", "container/container_methods/static_is_int_dtype", "container/container_methods/static_is_uint_dtype", "container/container_methods/static_is_variable", "container/container_methods/static_isfinite", "container/container_methods/static_isinf", "container/container_methods/static_isnan", "container/container_methods/static_leaky_relu", "container/container_methods/static_less", "container/container_methods/static_less_equal", "container/container_methods/static_linspace", "container/container_methods/static_log", "container/container_methods/static_log10", "container/container_methods/static_log1p", "container/container_methods/static_log2", "container/container_methods/static_logaddexp", "container/container_methods/static_logical_and", "container/container_methods/static_logical_not", "container/container_methods/static_logical_or", "container/container_methods/static_logical_xor", "container/container_methods/static_logspace", "container/container_methods/static_matrix_norm", "container/container_methods/static_matrix_power", "container/container_methods/static_matrix_rank", "container/container_methods/static_matrix_transpose", "container/container_methods/static_maximum", "container/container_methods/static_meshgrid", "container/container_methods/static_minimum", "container/container_methods/static_multinomial", "container/container_methods/static_multiply", "container/container_methods/static_native_array", "container/container_methods/static_negative", "container/container_methods/static_nonzero", "container/container_methods/static_not_equal", "container/container_methods/static_ones", "container/container_methods/static_ones_like", "container/container_methods/static_outer", "container/container_methods/static_positive", "container/container_methods/static_pow", "container/container_methods/static_qr", "container/container_methods/static_randint", "container/container_methods/static_random_normal", "container/container_methods/static_random_uniform", "container/container_methods/static_relu", "container/container_methods/static_remainder", "container/container_methods/static_repeat", "container/container_methods/static_reshape", "container/container_methods/static_result_type", "container/container_methods/static_roll", "container/container_methods/static_round", "container/container_methods/static_searchsorted", "container/container_methods/static_shuffle", "container/container_methods/static_sigmoid", "container/container_methods/static_sign", "container/container_methods/static_sin", "container/container_methods/static_sinh", "container/container_methods/static_slogdet", "container/container_methods/static_softmax", "container/container_methods/static_softplus", "container/container_methods/static_solve", "container/container_methods/static_sort", "container/container_methods/static_sparse_cross_entropy", "container/container_methods/static_split", "container/container_methods/static_sqrt", "container/container_methods/static_square", "container/container_methods/static_stable_divide", "container/container_methods/static_stop_gradient", "container/container_methods/static_subtract", "container/container_methods/static_svd", "container/container_methods/static_svdvals", "container/container_methods/static_tan", "container/container_methods/static_tanh", "container/container_methods/static_tensordot", "container/container_methods/static_to_device", "container/container_methods/static_to_list", "container/container_methods/static_to_numpy", "container/container_methods/static_trace", "container/container_methods/static_tril", "container/container_methods/static_triu", "container/container_methods/static_trunc", "container/container_methods/static_unique_all", "container/container_methods/static_unique_counts", "container/container_methods/static_unique_inverse", "container/container_methods/static_unique_values", "container/container_methods/static_unstack", "container/container_methods/static_var", "container/container_methods/static_variable", "container/container_methods/static_variable_data", "container/container_methods/static_vecdot", "container/container_methods/static_vector_norm", "container/container_methods/static_vector_to_skew_symmetric_matrix", "container/container_methods/static_where", "container/container_methods/static_zeros", "container/container_methods/static_zeros_like", "container/container_methods/std", "container/container_methods/stop_gradient", "container/container_methods/subtract", "container/container_methods/sum", "container/container_methods/svd", "container/container_methods/svdvals", "container/container_methods/swapaxes", "container/container_methods/tan", "container/container_methods/tanh", "container/container_methods/tensordot", "container/container_methods/tile", "container/container_methods/to_device", "container/container_methods/to_list", "container/container_methods/to_numpy", "container/container_methods/trace", "container/container_methods/tril", "container/container_methods/triu", "container/container_methods/trunc", "container/container_methods/unique_all", "container/container_methods/unique_counts", "container/container_methods/unique_inverse", "container/container_methods/unique_values", "container/container_methods/unstack", "container/container_methods/var", "container/container_methods/variable", "container/container_methods/variable_data", "container/container_methods/vecdot", "container/container_methods/vector_norm", "container/container_methods/vector_to_skew_symmetric_matrix", "container/container_methods/where", "container/container_methods/zero_pad", "container/container_methods/zeros_like", "container/conversions", "container/conversions/static_to_ivy", "container/conversions/static_to_native", "container/conversions/to_ivy", "container/conversions/to_native", "container/creation", "container/creation/ContainerWithCreation", "container/data_type", "container/data_type/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_function_arguments", "deep_dive/11_submodule_helpers", "deep_dive/12_docstrings", "deep_dive/13_docstring_examples", "deep_dive/14_array_api_tests", "deep_dive/15_ivy_tests", "deep_dive/16_ivy_frontends", "deep_dive/17_ivy_frontends_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_formatting", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/from_zero_dim_arrays_to_float", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/integer_array_to_float", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/gelu/gelu_container", "functional/ivy/activations/gelu/gelu_functional", "functional/ivy/activations/gelu/static_gelu_container", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/leaky_relu/leaky_relu_container", "functional/ivy/activations/leaky_relu/leaky_relu_functional", "functional/ivy/activations/leaky_relu/static_leaky_relu_container", "functional/ivy/activations/relu", "functional/ivy/activations/relu/relu_container", "functional/ivy/activations/relu/relu_functional", "functional/ivy/activations/relu/static_relu_container", "functional/ivy/activations/sigmoid", "functional/ivy/activations/sigmoid/sigmoid_container", "functional/ivy/activations/sigmoid/sigmoid_functional", "functional/ivy/activations/sigmoid/static_sigmoid_container", "functional/ivy/activations/softmax", "functional/ivy/activations/softmax/softmax_container", "functional/ivy/activations/softmax/softmax_functional", "functional/ivy/activations/softmax/static_softmax_container", "functional/ivy/activations/softplus", "functional/ivy/activations/softplus/softplus_container", "functional/ivy/activations/softplus/softplus_functional", "functional/ivy/activations/softplus/static_softplus_container", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/arange/arange_functional", "functional/ivy/creation/arange/static_arange_container", "functional/ivy/creation/asarray", "functional/ivy/creation/asarray/asarray_functional", "functional/ivy/creation/asarray/static_asarray_container", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/empty_like/empty_like_container", "functional/ivy/creation/empty_like/empty_like_functional", "functional/ivy/creation/empty_like/static_empty_like_container", "functional/ivy/creation/eye", "functional/ivy/creation/eye/eye_functional", "functional/ivy/creation/eye/static_eye_container", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/from_dlpack/from_dlpack_container", "functional/ivy/creation/from_dlpack/from_dlpack_functional", "functional/ivy/creation/from_dlpack/static_from_dlpack_container", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/full_like/full_like_container", "functional/ivy/creation/full_like/full_like_functional", "functional/ivy/creation/full_like/static_full_like_container", "functional/ivy/creation/linspace", "functional/ivy/creation/linspace/linspace_functional", "functional/ivy/creation/linspace/static_linspace_container", "functional/ivy/creation/logspace", "functional/ivy/creation/logspace/logspace_functional", "functional/ivy/creation/logspace/static_logspace_container", "functional/ivy/creation/meshgrid", "functional/ivy/creation/meshgrid/meshgrid_container", "functional/ivy/creation/meshgrid/meshgrid_functional", "functional/ivy/creation/meshgrid/static_meshgrid_container", "functional/ivy/creation/native_array", "functional/ivy/creation/native_array/native_array_container", "functional/ivy/creation/native_array/native_array_functional", "functional/ivy/creation/native_array/static_native_array_container", "functional/ivy/creation/ones", "functional/ivy/creation/ones/ones_functional", "functional/ivy/creation/ones/static_ones_container", "functional/ivy/creation/ones_like", "functional/ivy/creation/ones_like/ones_like_container", "functional/ivy/creation/ones_like/ones_like_functional", "functional/ivy/creation/ones_like/static_ones_like_container", "functional/ivy/creation/tril", "functional/ivy/creation/tril/static_tril_container", "functional/ivy/creation/tril/tril_container", "functional/ivy/creation/tril/tril_functional", "functional/ivy/creation/triu", "functional/ivy/creation/triu/static_triu_container", "functional/ivy/creation/triu/triu_container", "functional/ivy/creation/triu/triu_functional", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros/static_zeros_container", "functional/ivy/creation/zeros/zeros_functional", "functional/ivy/creation/zeros_like", "functional/ivy/creation/zeros_like/static_zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_functional", "functional/ivy/data_type", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/astype/astype_container", "functional/ivy/data_type/astype/astype_functional", "functional/ivy/data_type/astype/static_astype_container", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_container", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_functional", "functional/ivy/data_type/broadcast_arrays/static_broadcast_arrays_container", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/broadcast_to/broadcast_to_container", "functional/ivy/data_type/broadcast_to/broadcast_to_functional", "functional/ivy/data_type/broadcast_to/static_broadcast_to_container", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/check_float", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_float_dtype/default_float_dtype_functional", "functional/ivy/data_type/default_float_dtype/static_default_float_dtype_container", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/default_uint_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype/dtype_container", "functional/ivy/data_type/dtype/dtype_functional", "functional/ivy/data_type/dtype/static_dtype_container", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/finfo/finfo_container", "functional/ivy/data_type/finfo/finfo_functional", "functional/ivy/data_type/finfo/static_finfo_container", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_supported_dtypes/function_supported_dtypes_functional", "functional/ivy/data_type/function_supported_dtypes/static_function_supported_dtypes_container", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes/function_unsupported_dtypes_functional", "functional/ivy/data_type/function_unsupported_dtypes/static_function_unsupported_dtypes_container", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/iinfo/iinfo_container", "functional/ivy/data_type/iinfo/iinfo_functional", "functional/ivy/data_type/iinfo/static_iinfo_container", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_bool_dtype", "functional/ivy/data_type/is_bool_dtype/is_bool_dtype_container", "functional/ivy/data_type/is_bool_dtype/is_bool_dtype_functional", "functional/ivy/data_type/is_bool_dtype/static_is_bool_dtype_container", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_float_dtype/is_float_dtype_container", "functional/ivy/data_type/is_float_dtype/is_float_dtype_functional", "functional/ivy/data_type/is_float_dtype/static_is_float_dtype_container", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/is_int_dtype/is_int_dtype_container", "functional/ivy/data_type/is_int_dtype/is_int_dtype_functional", "functional/ivy/data_type/is_int_dtype/static_is_int_dtype_container", "functional/ivy/data_type/is_uint_dtype", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_array", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_container", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_functional", "functional/ivy/data_type/is_uint_dtype/static_is_uint_dtype_container", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/promote_types_of_inputs", "functional/ivy/data_type/result_type", "functional/ivy/data_type/result_type/result_type_container", "functional/ivy/data_type/result_type/result_type_functional", "functional/ivy/data_type/result_type/static_result_type_container", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/set_default_uint_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/unset_default_uint_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev/dev_container", "functional/ivy/device/dev/dev_functional", "functional/ivy/device/dev/static_dev_container", "functional/ivy/device/dev_util", "functional/ivy/device/function_supported_devices", "functional/ivy/device/function_unsupported_devices", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/to_device/static_to_device_container", "functional/ivy/device/to_device/to_device_array", "functional/ivy/device/to_device/to_device_container", "functional/ivy/device/to_device/to_device_functional", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acos/static_acos_container", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/acosh/static_acosh_container", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asin/static_asin_container", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/asinh/static_asinh_container", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan/static_atan_container", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atan2/static_atan2_container", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/atanh/static_atanh_container", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_and/static_bitwise_and_container", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_invert/static_bitwise_invert_container", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_left_shift/static_bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_or/static_bitwise_or_container", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_right_shift/static_bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/bitwise_xor/static_bitwise_xor_container", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/ceil/static_ceil_container", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cos/static_cos_container", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/cosh/static_cosh_container", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/equal/static_equal_container", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/erf/static_erf_container", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/exp/static_exp_container", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/expm1/static_expm1_container", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor/static_floor_container", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/floor_divide/static_floor_divide_container", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater/static_greater_container", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/greater_equal/static_greater_equal_container", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isfinite/static_isfinite_container", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isinf/static_isinf_container", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/isnan/static_isnan_container", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less/static_less_container", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/less_equal/static_less_equal_container", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log/static_log_container", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log10/static_log10_container", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log1p/static_log1p_container", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/log2/static_log2_container", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logaddexp/static_logaddexp_container", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_and/static_logical_and_container", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_not/static_logical_not_container", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_or/static_logical_or_container", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/logical_xor/static_logical_xor_container", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/maximum/maximum_container", "functional/ivy/elementwise/maximum/maximum_functional", "functional/ivy/elementwise/maximum/static_maximum_container", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/minimum/minimum_container", "functional/ivy/elementwise/minimum/minimum_functional", "functional/ivy/elementwise/minimum/static_minimum_container", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/negative/static_negative_container", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/not_equal/static_not_equal_container", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/positive/static_positive_container", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/pow/static_pow_container", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/remainder/static_remainder_container", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/round/static_round_container", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sign/static_sign_container", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sin/static_sin_container", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sinh/static_sinh_container", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/sqrt/static_sqrt_container", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/square/static_square_container", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/static_trunc_container", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_matrix_norm/clip_matrix_norm_container", "functional/ivy/general/clip_matrix_norm/clip_matrix_norm_functional", "functional/ivy/general/clip_matrix_norm/static_clip_matrix_norm_container", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/clip_vector_norm/static_clip_vector_norm_container", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumprod/cumprod_container", "functional/ivy/general/cumprod/cumprod_functional", "functional/ivy/general/cumprod/static_cumprod_container", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_rearrange/einops_rearrange_container", "functional/ivy/general/einops_rearrange/einops_rearrange_functional", "functional/ivy/general/einops_rearrange/static_einops_rearrange_container", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_reduce/einops_reduce_container", "functional/ivy/general/einops_reduce/einops_reduce_functional", "functional/ivy/general/einops_reduce/static_einops_reduce_container", "functional/ivy/general/einops_repeat", "functional/ivy/general/einops_repeat/einops_repeat_container", "functional/ivy/general/einops_repeat/einops_repeat_functional", "functional/ivy/general/einops_repeat/static_einops_repeat_container", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/function_supported_devices_and_dtypes", "functional/ivy/general/function_unsupported_devices_and_dtypes", "functional/ivy/general/gather", "functional/ivy/general/gather/gather_container", "functional/ivy/general/gather/gather_functional", "functional/ivy/general/gather/static_gather_container", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_array_mode", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_nestable_mode", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/has_nans/has_nans_container", "functional/ivy/general/has_nans/has_nans_functional", "functional/ivy/general/has_nans/static_has_nans_container", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_decrement/inplace_decrement_container", "functional/ivy/general/inplace_decrement/inplace_decrement_functional", "functional/ivy/general/inplace_decrement/static_inplace_decrement_container", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_array_mode", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_nestable_mode", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_shape_array_mode", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_array_mode", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_divide/stable_divide_container", "functional/ivy/general/stable_divide/stable_divide_functional", "functional/ivy/general/stable_divide/static_stable_divide_container", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_ivy_shape", "functional/ivy/general/to_list", "functional/ivy/general/to_list/static_to_list_container", "functional/ivy/general/to_list/to_list_container", "functional/ivy/general/to_list/to_list_functional", "functional/ivy/general/to_native_shape", "functional/ivy/general/to_numpy", "functional/ivy/general/to_numpy/static_to_numpy_container", "functional/ivy/general/to_numpy/to_numpy_container", "functional/ivy/general/to_numpy/to_numpy_functional", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unset_array_mode", "functional/ivy/general/unset_nestable_mode", "functional/ivy/general/unset_shape_array_mode", "functional/ivy/general/unstack", "functional/ivy/general/unstack/static_unstack_container", "functional/ivy/general/unstack/unstack_container", "functional/ivy/general/unstack/unstack_functional", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/grad", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/jac", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/stop_gradient/static_stop_gradient_container", "functional/ivy/gradients/stop_gradient/stop_gradient_container", "functional/ivy/gradients/stop_gradient/stop_gradient_functional", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/value_and_grad", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable/static_variable_container", "functional/ivy/gradients/variable/variable_container", "functional/ivy/gradients/variable/variable_functional", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/variable_data/static_variable_data_container", "functional/ivy/gradients/variable_data/variable_data_container", "functional/ivy/gradients/variable_data/variable_data_functional", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d/conv1d_container", "functional/ivy/layers/conv1d/conv1d_functional", "functional/ivy/layers/conv1d/static_conv1d_container", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/deconv_length", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_container", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_functional", "functional/ivy/layers/depthwise_conv2d/static_depthwise_conv2d_container", "functional/ivy/layers/dropout", "functional/ivy/layers/handle_padding", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_container", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cholesky/static_cholesky_container", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_container", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/cross/static_cross_container", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_container", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/det/static_det_container", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_container", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/diagonal/static_diagonal_container", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_container", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_container", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/inv/static_inv_container", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_container", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_norm/static_matrix_norm_container", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_power/matrix_power_container", "functional/ivy/linear_algebra/matrix_power/matrix_power_functional", "functional/ivy/linear_algebra/matrix_power/static_matrix_power_container", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_container", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_rank/static_matrix_rank_container", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_container", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/matrix_transpose/static_matrix_transpose_container", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_container", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/outer/static_outer_container", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_container", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/qr/static_qr_container", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/slogdet/slogdet_container", "functional/ivy/linear_algebra/slogdet/slogdet_functional", "functional/ivy/linear_algebra/slogdet/static_slogdet_container", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_container", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/solve/static_solve_container", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/static_svd_container", "functional/ivy/linear_algebra/svd/svd_container", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/static_svdvals_container", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_container", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/static_tensordot_container", "functional/ivy/linear_algebra/tensordot/tensordot_container", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/static_trace_container", "functional/ivy/linear_algebra/trace/trace_container", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/static_vecdot_container", "functional/ivy/linear_algebra/vecdot/vecdot_container", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/static_vector_norm_container", "functional/ivy/linear_algebra/vector_norm/vector_norm_container", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/static_vector_to_skew_symmetric_matrix_container", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_container", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/concat/static_concat_container", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/expand_dims/static_expand_dims_container", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/repeat/static_repeat_container", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/reshape/static_reshape_container", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/split/split_container", "functional/ivy/manipulation/split/split_functional", "functional/ivy/manipulation/split/static_split_container", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/multinomial/multinomial_container", "functional/ivy/random/multinomial/multinomial_functional", "functional/ivy/random/multinomial/static_multinomial_container", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_container", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_normal/random_normal_container", "functional/ivy/random/random_normal/random_normal_functional", "functional/ivy/random/random_normal/static_random_normal_container", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/random/shuffle/shuffle_container", "functional/ivy/random/shuffle/shuffle_functional", "functional/ivy/random/shuffle/static_shuffle_container", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmax/argmax_container", "functional/ivy/searching/argmax/argmax_functional", "functional/ivy/searching/argmax/static_argmax_container", "functional/ivy/searching/argmin", "functional/ivy/searching/argmin/argmin_container", "functional/ivy/searching/argmin/argmin_functional", "functional/ivy/searching/argmin/static_argmin_container", "functional/ivy/searching/nonzero", "functional/ivy/searching/nonzero/nonzero_array", "functional/ivy/searching/nonzero/nonzero_container", "functional/ivy/searching/nonzero/nonzero_functional", "functional/ivy/searching/nonzero/static_nonzero_container", "functional/ivy/searching/where", "functional/ivy/searching/where/static_where_container", "functional/ivy/searching/where/where_container", "functional/ivy/searching/where/where_functional", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_all/static_unique_all_container", "functional/ivy/set/unique_all/unique_all_container", "functional/ivy/set/unique_all/unique_all_functional", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_counts/static_unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_functional", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_inverse/static_unique_inverse_container", "functional/ivy/set/unique_inverse/unique_inverse_container", "functional/ivy/set/unique_inverse/unique_inverse_functional", "functional/ivy/set/unique_values", "functional/ivy/set/unique_values/static_unique_values_container", "functional/ivy/set/unique_values/unique_values_container", "functional/ivy/set/unique_values/unique_values_functional", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/searchsorted", "functional/ivy/sorting/searchsorted/searchsorted_array", "functional/ivy/sorting/searchsorted/searchsorted_container", "functional/ivy/sorting/searchsorted/searchsorted_functional", "functional/ivy/sorting/searchsorted/static_searchsorted_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/static_var_container", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/all/static_all_container", "functional/ivy/utility/any", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "functional/ivy/utility/any/static_any_container", "glossary", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/array.rst", "array/array/Array.rst", "array/array/Variable.rst", "array/array_methods.rst", "array/array_methods/abs.rst", "array/array_methods/acos.rst", "array/array_methods/acosh.rst", "array/array_methods/adam_step.rst", "array/array_methods/adam_update.rst", "array/array_methods/add.rst", "array/array_methods/add_ivy_array_instance_methods.rst", "array/array_methods/all.rst", "array/array_methods/all_equal.rst", "array/array_methods/any.rst", "array/array_methods/argmax.rst", "array/array_methods/argmin.rst", "array/array_methods/argsort.rst", "array/array_methods/asarray.rst", "array/array_methods/asin.rst", "array/array_methods/asinh.rst", "array/array_methods/astype.rst", "array/array_methods/atan.rst", "array/array_methods/atan2.rst", "array/array_methods/atanh.rst", "array/array_methods/binary_cross_entropy.rst", "array/array_methods/bitwise_and.rst", "array/array_methods/bitwise_invert.rst", "array/array_methods/bitwise_left_shift.rst", "array/array_methods/bitwise_or.rst", "array/array_methods/bitwise_right_shift.rst", "array/array_methods/bitwise_xor.rst", "array/array_methods/broadcast_arrays.rst", "array/array_methods/broadcast_to.rst", "array/array_methods/can_cast.rst", "array/array_methods/ceil.rst", "array/array_methods/cholesky.rst", "array/array_methods/clip.rst", "array/array_methods/clip_matrix_norm.rst", "array/array_methods/clip_vector_norm.rst", "array/array_methods/concat.rst", "array/array_methods/constant_pad.rst", "array/array_methods/conv1d.rst", "array/array_methods/cos.rst", "array/array_methods/cosh.rst", "array/array_methods/cross.rst", "array/array_methods/cross_entropy.rst", "array/array_methods/cumprod.rst", "array/array_methods/depthwise_conv2d.rst", "array/array_methods/det.rst", "array/array_methods/dev.rst", "array/array_methods/diagonal.rst", "array/array_methods/divide.rst", "array/array_methods/dtype.rst", "array/array_methods/eigh.rst", "array/array_methods/eigvalsh.rst", "array/array_methods/einops_rearrange.rst", "array/array_methods/einops_reduce.rst", "array/array_methods/einops_repeat.rst", "array/array_methods/einsum.rst", "array/array_methods/empty_like.rst", "array/array_methods/equal.rst", "array/array_methods/erf.rst", "array/array_methods/exp.rst", "array/array_methods/expand_dims.rst", "array/array_methods/expm1.rst", "array/array_methods/finfo.rst", "array/array_methods/flip.rst", "array/array_methods/floor.rst", "array/array_methods/floor_divide.rst", "array/array_methods/from_dlpack.rst", "array/array_methods/full_like.rst", "array/array_methods/gather.rst", "array/array_methods/gather_nd.rst", "array/array_methods/gelu.rst", "array/array_methods/gradient_descent_update.rst", "array/array_methods/greater.rst", "array/array_methods/greater_equal.rst", "array/array_methods/has_nans.rst", "array/array_methods/iinfo.rst", "array/array_methods/inplace_decrement.rst", "array/array_methods/inv.rst", "array/array_methods/is_bool_dtype.rst", "array/array_methods/is_float_dtype.rst", "array/array_methods/is_int_dtype.rst", "array/array_methods/is_uint_dtype.rst", "array/array_methods/is_variable.rst", "array/array_methods/isfinite.rst", "array/array_methods/isinf.rst", "array/array_methods/isnan.rst", "array/array_methods/lamb_update.rst", "array/array_methods/lars_update.rst", "array/array_methods/layer_norm.rst", "array/array_methods/leaky_relu.rst", "array/array_methods/less.rst", "array/array_methods/less_equal.rst", "array/array_methods/log.rst", "array/array_methods/log10.rst", "array/array_methods/log1p.rst", "array/array_methods/log2.rst", "array/array_methods/logaddexp.rst", "array/array_methods/logical_and.rst", "array/array_methods/logical_not.rst", "array/array_methods/logical_or.rst", "array/array_methods/logical_xor.rst", "array/array_methods/matmul.rst", "array/array_methods/matrix_norm.rst", "array/array_methods/matrix_rank.rst", "array/array_methods/matrix_transpose.rst", "array/array_methods/max.rst", "array/array_methods/mean.rst", "array/array_methods/meshgrid.rst", "array/array_methods/min.rst", "array/array_methods/multinomial.rst", "array/array_methods/multiply.rst", "array/array_methods/native_array.rst", "array/array_methods/negative.rst", "array/array_methods/nonzero.rst", "array/array_methods/not_equal.rst", "array/array_methods/ones_like.rst", "array/array_methods/optimizer_update.rst", "array/array_methods/outer.rst", "array/array_methods/permute_dims.rst", "array/array_methods/pinv.rst", "array/array_methods/positive.rst", "array/array_methods/pow.rst", "array/array_methods/prod.rst", "array/array_methods/qr.rst", "array/array_methods/randint.rst", "array/array_methods/random_normal.rst", "array/array_methods/random_uniform.rst", "array/array_methods/relu.rst", "array/array_methods/remainder.rst", "array/array_methods/repeat.rst", "array/array_methods/reshape.rst", "array/array_methods/result_type.rst", "array/array_methods/roll.rst", "array/array_methods/round.rst", "array/array_methods/searchsorted.rst", "array/array_methods/shuffle.rst", "array/array_methods/sigmoid.rst", "array/array_methods/sign.rst", "array/array_methods/sin.rst", "array/array_methods/sinh.rst", "array/array_methods/softmax.rst", "array/array_methods/softplus.rst", "array/array_methods/solve.rst", "array/array_methods/sort.rst", "array/array_methods/sparse_cross_entropy.rst", "array/array_methods/split.rst", "array/array_methods/sqrt.rst", "array/array_methods/square.rst", "array/array_methods/squeeze.rst", "array/array_methods/stable_divide.rst", "array/array_methods/stack.rst", "array/array_methods/std.rst", "array/array_methods/stop_gradient.rst", "array/array_methods/subtract.rst", "array/array_methods/sum.rst", "array/array_methods/svd.rst", "array/array_methods/svdvals.rst", "array/array_methods/swapaxes.rst", "array/array_methods/tan.rst", "array/array_methods/tanh.rst", "array/array_methods/tensordot.rst", "array/array_methods/tile.rst", "array/array_methods/to_device.rst", "array/array_methods/to_list.rst", "array/array_methods/to_numpy.rst", "array/array_methods/trace.rst", "array/array_methods/tril.rst", "array/array_methods/triu.rst", "array/array_methods/trunc.rst", "array/array_methods/unique_all.rst", "array/array_methods/unique_counts.rst", "array/array_methods/unique_inverse.rst", "array/array_methods/unique_values.rst", "array/array_methods/unstack.rst", "array/array_methods/var.rst", "array/array_methods/variable.rst", "array/array_methods/variable_data.rst", "array/array_methods/vecdot.rst", "array/array_methods/vector_norm.rst", "array/array_methods/vector_to_skew_symmetric_matrix.rst", "array/array_methods/where.rst", "array/array_methods/zero_pad.rst", "array/array_methods/zeros_like.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_type.rst", "array/data_type/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utilities.rst", "array/utilities/ArrayWithutilities.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container_methods.rst", "container/container_methods/abs.rst", "container/container_methods/acos.rst", "container/container_methods/acosh.rst", "container/container_methods/adam_step.rst", "container/container_methods/adam_update.rst", "container/container_methods/add.rst", "container/container_methods/add_ivy_container_instance_methods.rst", "container/container_methods/all.rst", "container/container_methods/all_equal.rst", "container/container_methods/any.rst", "container/container_methods/argmax.rst", "container/container_methods/argmin.rst", "container/container_methods/argsort.rst", "container/container_methods/asin.rst", "container/container_methods/asinh.rst", "container/container_methods/astype.rst", "container/container_methods/atan.rst", "container/container_methods/atan2.rst", "container/container_methods/atanh.rst", "container/container_methods/binary_cross_entropy.rst", "container/container_methods/bitwise_and.rst", "container/container_methods/bitwise_invert.rst", "container/container_methods/bitwise_left_shift.rst", "container/container_methods/bitwise_or.rst", "container/container_methods/bitwise_right_shift.rst", "container/container_methods/bitwise_xor.rst", "container/container_methods/broadcast_arrays.rst", "container/container_methods/broadcast_to.rst", "container/container_methods/can_cast.rst", "container/container_methods/ceil.rst", "container/container_methods/cholesky.rst", "container/container_methods/clip.rst", "container/container_methods/clip_matrix_norm.rst", "container/container_methods/clip_vector_norm.rst", "container/container_methods/concat.rst", "container/container_methods/constant_pad.rst", "container/container_methods/conv1d.rst", "container/container_methods/cos.rst", "container/container_methods/cosh.rst", "container/container_methods/cross.rst", "container/container_methods/cross_entropy.rst", "container/container_methods/cumprod.rst", "container/container_methods/depthwise_conv2d.rst", "container/container_methods/det.rst", "container/container_methods/dev.rst", "container/container_methods/diagonal.rst", "container/container_methods/divide.rst", "container/container_methods/dtype.rst", "container/container_methods/eigh.rst", "container/container_methods/einops_rearrange.rst", "container/container_methods/einops_reduce.rst", "container/container_methods/einops_repeat.rst", "container/container_methods/einsum.rst", "container/container_methods/empty_like.rst", "container/container_methods/equal.rst", "container/container_methods/erf.rst", "container/container_methods/exp.rst", "container/container_methods/expand_dims.rst", "container/container_methods/expm1.rst", "container/container_methods/finfo.rst", "container/container_methods/flip.rst", "container/container_methods/floor.rst", "container/container_methods/floor_divide.rst", "container/container_methods/from_dlpack.rst", "container/container_methods/full_like.rst", "container/container_methods/gather.rst", "container/container_methods/gather_nd.rst", "container/container_methods/gelu.rst", "container/container_methods/gradient_descent_update.rst", "container/container_methods/greater.rst", "container/container_methods/greater_equal.rst", "container/container_methods/has_nans.rst", "container/container_methods/iinfo.rst", "container/container_methods/inplace_decrement.rst", "container/container_methods/inv.rst", "container/container_methods/is_bool_dtype.rst", "container/container_methods/is_float_dtype.rst", "container/container_methods/is_int_dtype.rst", "container/container_methods/is_uint_dtype.rst", "container/container_methods/is_variable.rst", "container/container_methods/isfinite.rst", "container/container_methods/isinf.rst", "container/container_methods/isnan.rst", "container/container_methods/lamb_update.rst", "container/container_methods/lars_update.rst", "container/container_methods/layer_norm.rst", "container/container_methods/leaky_relu.rst", "container/container_methods/less.rst", "container/container_methods/less_equal.rst", "container/container_methods/log.rst", "container/container_methods/log10.rst", "container/container_methods/log1p.rst", "container/container_methods/log2.rst", "container/container_methods/logaddexp.rst", "container/container_methods/logical_and.rst", "container/container_methods/logical_not.rst", "container/container_methods/logical_or.rst", "container/container_methods/logical_xor.rst", "container/container_methods/matmul.rst", "container/container_methods/matrix_norm.rst", "container/container_methods/matrix_power.rst", "container/container_methods/matrix_rank.rst", "container/container_methods/matrix_transpose.rst", "container/container_methods/max.rst", "container/container_methods/maximum.rst", "container/container_methods/mean.rst", "container/container_methods/meshgrid.rst", "container/container_methods/min.rst", "container/container_methods/minimum.rst", "container/container_methods/multinomial.rst", "container/container_methods/multiply.rst", "container/container_methods/native_array.rst", "container/container_methods/negative.rst", "container/container_methods/nonzero.rst", "container/container_methods/not_equal.rst", "container/container_methods/ones_like.rst", "container/container_methods/optimizer_update.rst", "container/container_methods/outer.rst", "container/container_methods/permute_dims.rst", "container/container_methods/positive.rst", "container/container_methods/pow.rst", "container/container_methods/prod.rst", "container/container_methods/qr.rst", "container/container_methods/randint.rst", "container/container_methods/random_normal.rst", "container/container_methods/random_uniform.rst", "container/container_methods/relu.rst", "container/container_methods/remainder.rst", "container/container_methods/repeat.rst", "container/container_methods/reshape.rst", "container/container_methods/result_type.rst", "container/container_methods/roll.rst", "container/container_methods/round.rst", "container/container_methods/searchsorted.rst", "container/container_methods/shuffle.rst", "container/container_methods/sigmoid.rst", "container/container_methods/sign.rst", "container/container_methods/sin.rst", "container/container_methods/sinh.rst", "container/container_methods/slogdet.rst", "container/container_methods/softmax.rst", "container/container_methods/softplus.rst", "container/container_methods/solve.rst", "container/container_methods/sort.rst", "container/container_methods/sparse_cross_entropy.rst", "container/container_methods/split.rst", "container/container_methods/sqrt.rst", "container/container_methods/square.rst", "container/container_methods/squeeze.rst", "container/container_methods/stable_divide.rst", "container/container_methods/stack.rst", "container/container_methods/static_abs.rst", "container/container_methods/static_acos.rst", "container/container_methods/static_acosh.rst", "container/container_methods/static_add.rst", "container/container_methods/static_all.rst", "container/container_methods/static_all_equal.rst", "container/container_methods/static_any.rst", "container/container_methods/static_arange.rst", "container/container_methods/static_argmax.rst", "container/container_methods/static_argmin.rst", "container/container_methods/static_argsort.rst", "container/container_methods/static_asarray.rst", "container/container_methods/static_asin.rst", "container/container_methods/static_asinh.rst", "container/container_methods/static_astype.rst", "container/container_methods/static_atan.rst", "container/container_methods/static_atan2.rst", "container/container_methods/static_atanh.rst", "container/container_methods/static_binary_cross_entropy.rst", "container/container_methods/static_bitwise_and.rst", "container/container_methods/static_bitwise_invert.rst", "container/container_methods/static_bitwise_left_shift.rst", "container/container_methods/static_bitwise_or.rst", "container/container_methods/static_bitwise_right_shift.rst", "container/container_methods/static_bitwise_xor.rst", "container/container_methods/static_broadcast_arrays.rst", "container/container_methods/static_broadcast_to.rst", "container/container_methods/static_can_cast.rst", "container/container_methods/static_ceil.rst", "container/container_methods/static_cholesky.rst", "container/container_methods/static_clip.rst", "container/container_methods/static_clip_matrix_norm.rst", "container/container_methods/static_clip_vector_norm.rst", "container/container_methods/static_concat.rst", "container/container_methods/static_conv1d.rst", "container/container_methods/static_cos.rst", "container/container_methods/static_cosh.rst", "container/container_methods/static_cross.rst", "container/container_methods/static_cross_entropy.rst", "container/container_methods/static_cumprod.rst", "container/container_methods/static_default_float_dtype.rst", "container/container_methods/static_depthwise_conv2d.rst", "container/container_methods/static_det.rst", "container/container_methods/static_dev.rst", "container/container_methods/static_diagonal.rst", "container/container_methods/static_divide.rst", "container/container_methods/static_dtype.rst", "container/container_methods/static_einops_rearrange.rst", "container/container_methods/static_einops_reduce.rst", "container/container_methods/static_einops_repeat.rst", "container/container_methods/static_empty_like.rst", "container/container_methods/static_equal.rst", "container/container_methods/static_erf.rst", "container/container_methods/static_exp.rst", "container/container_methods/static_expand_dims.rst", "container/container_methods/static_expm1.rst", "container/container_methods/static_eye.rst", "container/container_methods/static_finfo.rst", "container/container_methods/static_floor.rst", "container/container_methods/static_floor_divide.rst", "container/container_methods/static_from_dlpack.rst", "container/container_methods/static_full_like.rst", "container/container_methods/static_function_supported_dtypes.rst", "container/container_methods/static_function_unsupported_dtypes.rst", "container/container_methods/static_gather.rst", "container/container_methods/static_gather_nd.rst", "container/container_methods/static_gelu.rst", "container/container_methods/static_greater.rst", "container/container_methods/static_greater_equal.rst", "container/container_methods/static_has_nans.rst", "container/container_methods/static_iinfo.rst", "container/container_methods/static_inplace_decrement.rst", "container/container_methods/static_inv.rst", "container/container_methods/static_is_bool_dtype.rst", "container/container_methods/static_is_float_dtype.rst", "container/container_methods/static_is_int_dtype.rst", "container/container_methods/static_is_uint_dtype.rst", "container/container_methods/static_is_variable.rst", "container/container_methods/static_isfinite.rst", "container/container_methods/static_isinf.rst", "container/container_methods/static_isnan.rst", "container/container_methods/static_leaky_relu.rst", "container/container_methods/static_less.rst", "container/container_methods/static_less_equal.rst", "container/container_methods/static_linspace.rst", "container/container_methods/static_log.rst", "container/container_methods/static_log10.rst", "container/container_methods/static_log1p.rst", "container/container_methods/static_log2.rst", "container/container_methods/static_logaddexp.rst", "container/container_methods/static_logical_and.rst", "container/container_methods/static_logical_not.rst", "container/container_methods/static_logical_or.rst", "container/container_methods/static_logical_xor.rst", "container/container_methods/static_logspace.rst", "container/container_methods/static_matrix_norm.rst", "container/container_methods/static_matrix_power.rst", "container/container_methods/static_matrix_rank.rst", "container/container_methods/static_matrix_transpose.rst", "container/container_methods/static_maximum.rst", "container/container_methods/static_meshgrid.rst", "container/container_methods/static_minimum.rst", "container/container_methods/static_multinomial.rst", "container/container_methods/static_multiply.rst", "container/container_methods/static_native_array.rst", "container/container_methods/static_negative.rst", "container/container_methods/static_nonzero.rst", "container/container_methods/static_not_equal.rst", "container/container_methods/static_ones.rst", "container/container_methods/static_ones_like.rst", "container/container_methods/static_outer.rst", "container/container_methods/static_positive.rst", "container/container_methods/static_pow.rst", "container/container_methods/static_qr.rst", "container/container_methods/static_randint.rst", "container/container_methods/static_random_normal.rst", "container/container_methods/static_random_uniform.rst", "container/container_methods/static_relu.rst", "container/container_methods/static_remainder.rst", "container/container_methods/static_repeat.rst", "container/container_methods/static_reshape.rst", "container/container_methods/static_result_type.rst", "container/container_methods/static_roll.rst", "container/container_methods/static_round.rst", "container/container_methods/static_searchsorted.rst", "container/container_methods/static_shuffle.rst", "container/container_methods/static_sigmoid.rst", "container/container_methods/static_sign.rst", "container/container_methods/static_sin.rst", "container/container_methods/static_sinh.rst", "container/container_methods/static_slogdet.rst", "container/container_methods/static_softmax.rst", "container/container_methods/static_softplus.rst", "container/container_methods/static_solve.rst", "container/container_methods/static_sort.rst", "container/container_methods/static_sparse_cross_entropy.rst", "container/container_methods/static_split.rst", "container/container_methods/static_sqrt.rst", "container/container_methods/static_square.rst", "container/container_methods/static_stable_divide.rst", "container/container_methods/static_stop_gradient.rst", "container/container_methods/static_subtract.rst", "container/container_methods/static_svd.rst", "container/container_methods/static_svdvals.rst", "container/container_methods/static_tan.rst", "container/container_methods/static_tanh.rst", "container/container_methods/static_tensordot.rst", "container/container_methods/static_to_device.rst", "container/container_methods/static_to_list.rst", "container/container_methods/static_to_numpy.rst", "container/container_methods/static_trace.rst", "container/container_methods/static_tril.rst", "container/container_methods/static_triu.rst", "container/container_methods/static_trunc.rst", "container/container_methods/static_unique_all.rst", "container/container_methods/static_unique_counts.rst", "container/container_methods/static_unique_inverse.rst", "container/container_methods/static_unique_values.rst", "container/container_methods/static_unstack.rst", "container/container_methods/static_var.rst", "container/container_methods/static_variable.rst", "container/container_methods/static_variable_data.rst", "container/container_methods/static_vecdot.rst", "container/container_methods/static_vector_norm.rst", "container/container_methods/static_vector_to_skew_symmetric_matrix.rst", "container/container_methods/static_where.rst", "container/container_methods/static_zeros.rst", "container/container_methods/static_zeros_like.rst", "container/container_methods/std.rst", "container/container_methods/stop_gradient.rst", "container/container_methods/subtract.rst", "container/container_methods/sum.rst", "container/container_methods/svd.rst", "container/container_methods/svdvals.rst", "container/container_methods/swapaxes.rst", "container/container_methods/tan.rst", "container/container_methods/tanh.rst", "container/container_methods/tensordot.rst", "container/container_methods/tile.rst", "container/container_methods/to_device.rst", "container/container_methods/to_list.rst", "container/container_methods/to_numpy.rst", "container/container_methods/trace.rst", "container/container_methods/tril.rst", "container/container_methods/triu.rst", "container/container_methods/trunc.rst", "container/container_methods/unique_all.rst", "container/container_methods/unique_counts.rst", "container/container_methods/unique_inverse.rst", "container/container_methods/unique_values.rst", "container/container_methods/unstack.rst", "container/container_methods/var.rst", "container/container_methods/variable.rst", "container/container_methods/variable_data.rst", "container/container_methods/vecdot.rst", "container/container_methods/vector_norm.rst", "container/container_methods/vector_to_skew_symmetric_matrix.rst", "container/container_methods/where.rst", "container/container_methods/zero_pad.rst", "container/container_methods/zeros_like.rst", "container/conversions.rst", "container/conversions/static_to_ivy.rst", "container/conversions/static_to_native.rst", "container/conversions/to_ivy.rst", "container/conversions/to_native.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_type.rst", "container/data_type/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_function_arguments.rst", "deep_dive/11_submodule_helpers.rst", "deep_dive/12_docstrings.rst", "deep_dive/13_docstring_examples.rst", "deep_dive/14_array_api_tests.rst", "deep_dive/15_ivy_tests.rst", "deep_dive/16_ivy_frontends.rst", "deep_dive/17_ivy_frontends_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_formatting.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/from_zero_dim_arrays_to_float.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/integer_array_to_float.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/gelu/gelu_container.rst", "functional/ivy/activations/gelu/gelu_functional.rst", "functional/ivy/activations/gelu/static_gelu_container.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/leaky_relu/leaky_relu_container.rst", "functional/ivy/activations/leaky_relu/leaky_relu_functional.rst", "functional/ivy/activations/leaky_relu/static_leaky_relu_container.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/relu/relu_container.rst", "functional/ivy/activations/relu/relu_functional.rst", "functional/ivy/activations/relu/static_relu_container.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/sigmoid/sigmoid_container.rst", "functional/ivy/activations/sigmoid/sigmoid_functional.rst", "functional/ivy/activations/sigmoid/static_sigmoid_container.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softmax/softmax_container.rst", "functional/ivy/activations/softmax/softmax_functional.rst", "functional/ivy/activations/softmax/static_softmax_container.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/softplus/softplus_container.rst", "functional/ivy/activations/softplus/softplus_functional.rst", "functional/ivy/activations/softplus/static_softplus_container.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/arange/arange_functional.rst", "functional/ivy/creation/arange/static_arange_container.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/asarray/asarray_functional.rst", "functional/ivy/creation/asarray/static_asarray_container.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/empty_like/empty_like_container.rst", "functional/ivy/creation/empty_like/empty_like_functional.rst", "functional/ivy/creation/empty_like/static_empty_like_container.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/eye/eye_functional.rst", "functional/ivy/creation/eye/static_eye_container.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/from_dlpack/from_dlpack_container.rst", "functional/ivy/creation/from_dlpack/from_dlpack_functional.rst", "functional/ivy/creation/from_dlpack/static_from_dlpack_container.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/full_like/full_like_container.rst", "functional/ivy/creation/full_like/full_like_functional.rst", "functional/ivy/creation/full_like/static_full_like_container.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/linspace/linspace_functional.rst", "functional/ivy/creation/linspace/static_linspace_container.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/logspace/logspace_functional.rst", "functional/ivy/creation/logspace/static_logspace_container.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/meshgrid/meshgrid_container.rst", "functional/ivy/creation/meshgrid/meshgrid_functional.rst", "functional/ivy/creation/meshgrid/static_meshgrid_container.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/native_array/native_array_container.rst", "functional/ivy/creation/native_array/native_array_functional.rst", "functional/ivy/creation/native_array/static_native_array_container.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones/ones_functional.rst", "functional/ivy/creation/ones/static_ones_container.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/ones_like/ones_like_container.rst", "functional/ivy/creation/ones_like/ones_like_functional.rst", "functional/ivy/creation/ones_like/static_ones_like_container.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/tril/static_tril_container.rst", "functional/ivy/creation/tril/tril_container.rst", "functional/ivy/creation/tril/tril_functional.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/triu/static_triu_container.rst", "functional/ivy/creation/triu/triu_container.rst", "functional/ivy/creation/triu/triu_functional.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros/static_zeros_container.rst", "functional/ivy/creation/zeros/zeros_functional.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/creation/zeros_like/static_zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_functional.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/astype/astype_container.rst", "functional/ivy/data_type/astype/astype_functional.rst", "functional/ivy/data_type/astype/static_astype_container.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_container.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_functional.rst", "functional/ivy/data_type/broadcast_arrays/static_broadcast_arrays_container.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_container.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_functional.rst", "functional/ivy/data_type/broadcast_to/static_broadcast_to_container.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/check_float.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_float_dtype/default_float_dtype_functional.rst", "functional/ivy/data_type/default_float_dtype/static_default_float_dtype_container.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/default_uint_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype/dtype_container.rst", "functional/ivy/data_type/dtype/dtype_functional.rst", "functional/ivy/data_type/dtype/static_dtype_container.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/finfo/finfo_container.rst", "functional/ivy/data_type/finfo/finfo_functional.rst", "functional/ivy/data_type/finfo/static_finfo_container.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_supported_dtypes/function_supported_dtypes_functional.rst", "functional/ivy/data_type/function_supported_dtypes/static_function_supported_dtypes_container.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes/function_unsupported_dtypes_functional.rst", "functional/ivy/data_type/function_unsupported_dtypes/static_function_unsupported_dtypes_container.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/iinfo/iinfo_container.rst", "functional/ivy/data_type/iinfo/iinfo_functional.rst", "functional/ivy/data_type/iinfo/static_iinfo_container.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_bool_dtype.rst", "functional/ivy/data_type/is_bool_dtype/is_bool_dtype_container.rst", "functional/ivy/data_type/is_bool_dtype/is_bool_dtype_functional.rst", "functional/ivy/data_type/is_bool_dtype/static_is_bool_dtype_container.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_container.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_functional.rst", "functional/ivy/data_type/is_float_dtype/static_is_float_dtype_container.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_container.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_functional.rst", "functional/ivy/data_type/is_int_dtype/static_is_int_dtype_container.rst", "functional/ivy/data_type/is_uint_dtype.rst", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_array.rst", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_container.rst", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_functional.rst", "functional/ivy/data_type/is_uint_dtype/static_is_uint_dtype_container.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/promote_types_of_inputs.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/result_type/result_type_container.rst", "functional/ivy/data_type/result_type/result_type_functional.rst", "functional/ivy/data_type/result_type/static_result_type_container.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/set_default_uint_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/unset_default_uint_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev/dev_container.rst", "functional/ivy/device/dev/dev_functional.rst", "functional/ivy/device/dev/static_dev_container.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/function_supported_devices.rst", "functional/ivy/device/function_unsupported_devices.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/to_device/static_to_device_container.rst", "functional/ivy/device/to_device/to_device_array.rst", "functional/ivy/device/to_device/to_device_container.rst", "functional/ivy/device/to_device/to_device_functional.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acos/static_acos_container.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/acosh/static_acosh_container.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asin/static_asin_container.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/asinh/static_asinh_container.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan/static_atan_container.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atan2/static_atan2_container.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/atanh/static_atanh_container.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_and/static_bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_invert/static_bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_left_shift/static_bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_or/static_bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_right_shift/static_bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/bitwise_xor/static_bitwise_xor_container.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/ceil/static_ceil_container.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cos/static_cos_container.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/cosh/static_cosh_container.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/equal/static_equal_container.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/erf/static_erf_container.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/exp/static_exp_container.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/expm1/static_expm1_container.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor/static_floor_container.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/floor_divide/static_floor_divide_container.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater/static_greater_container.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/greater_equal/static_greater_equal_container.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isfinite/static_isfinite_container.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isinf/static_isinf_container.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/isnan/static_isnan_container.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less/static_less_container.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/less_equal/static_less_equal_container.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log/static_log_container.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log10/static_log10_container.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log1p/static_log1p_container.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/log2/static_log2_container.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logaddexp/static_logaddexp_container.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_and/static_logical_and_container.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_not/static_logical_not_container.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_or/static_logical_or_container.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/logical_xor/static_logical_xor_container.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/maximum/maximum_container.rst", "functional/ivy/elementwise/maximum/maximum_functional.rst", "functional/ivy/elementwise/maximum/static_maximum_container.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/minimum/minimum_container.rst", "functional/ivy/elementwise/minimum/minimum_functional.rst", "functional/ivy/elementwise/minimum/static_minimum_container.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/negative/static_negative_container.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/not_equal/static_not_equal_container.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/positive/static_positive_container.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/pow/static_pow_container.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/remainder/static_remainder_container.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/round/static_round_container.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sign/static_sign_container.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sin/static_sin_container.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sinh/static_sinh_container.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/sqrt/static_sqrt_container.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/square/static_square_container.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/static_trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_matrix_norm/clip_matrix_norm_container.rst", "functional/ivy/general/clip_matrix_norm/clip_matrix_norm_functional.rst", "functional/ivy/general/clip_matrix_norm/static_clip_matrix_norm_container.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/clip_vector_norm/static_clip_vector_norm_container.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumprod/cumprod_container.rst", "functional/ivy/general/cumprod/cumprod_functional.rst", "functional/ivy/general/cumprod/static_cumprod_container.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_rearrange/einops_rearrange_container.rst", "functional/ivy/general/einops_rearrange/einops_rearrange_functional.rst", "functional/ivy/general/einops_rearrange/static_einops_rearrange_container.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_reduce/einops_reduce_container.rst", "functional/ivy/general/einops_reduce/einops_reduce_functional.rst", "functional/ivy/general/einops_reduce/static_einops_reduce_container.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/einops_repeat/einops_repeat_container.rst", "functional/ivy/general/einops_repeat/einops_repeat_functional.rst", "functional/ivy/general/einops_repeat/static_einops_repeat_container.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/function_supported_devices_and_dtypes.rst", "functional/ivy/general/function_unsupported_devices_and_dtypes.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather/gather_container.rst", "functional/ivy/general/gather/gather_functional.rst", "functional/ivy/general/gather/static_gather_container.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_array_mode.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_nestable_mode.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/has_nans/has_nans_container.rst", "functional/ivy/general/has_nans/has_nans_functional.rst", "functional/ivy/general/has_nans/static_has_nans_container.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_decrement/inplace_decrement_container.rst", "functional/ivy/general/inplace_decrement/inplace_decrement_functional.rst", "functional/ivy/general/inplace_decrement/static_inplace_decrement_container.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_array_mode.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_nestable_mode.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_shape_array_mode.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_array_mode.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_divide/stable_divide_container.rst", "functional/ivy/general/stable_divide/stable_divide_functional.rst", "functional/ivy/general/stable_divide/static_stable_divide_container.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_ivy_shape.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_list/static_to_list_container.rst", "functional/ivy/general/to_list/to_list_container.rst", "functional/ivy/general/to_list/to_list_functional.rst", "functional/ivy/general/to_native_shape.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_numpy/static_to_numpy_container.rst", "functional/ivy/general/to_numpy/to_numpy_container.rst", "functional/ivy/general/to_numpy/to_numpy_functional.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unset_array_mode.rst", "functional/ivy/general/unset_nestable_mode.rst", "functional/ivy/general/unset_shape_array_mode.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/unstack/static_unstack_container.rst", "functional/ivy/general/unstack/unstack_container.rst", "functional/ivy/general/unstack/unstack_functional.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/grad.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/jac.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/stop_gradient/static_stop_gradient_container.rst", "functional/ivy/gradients/stop_gradient/stop_gradient_container.rst", "functional/ivy/gradients/stop_gradient/stop_gradient_functional.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/value_and_grad.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable/static_variable_container.rst", "functional/ivy/gradients/variable/variable_container.rst", "functional/ivy/gradients/variable/variable_functional.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/variable_data/static_variable_data_container.rst", "functional/ivy/gradients/variable_data/variable_data_container.rst", "functional/ivy/gradients/variable_data/variable_data_functional.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d/conv1d_container.rst", "functional/ivy/layers/conv1d/conv1d_functional.rst", "functional/ivy/layers/conv1d/static_conv1d_container.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/deconv_length.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_container.rst", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_functional.rst", "functional/ivy/layers/depthwise_conv2d/static_depthwise_conv2d_container.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/handle_padding.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_container.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cholesky/static_cholesky_container.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_container.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/cross/static_cross_container.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_container.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/det/static_det_container.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_container.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/diagonal/static_diagonal_container.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_container.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_container.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/inv/static_inv_container.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_container.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_norm/static_matrix_norm_container.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_power/matrix_power_container.rst", "functional/ivy/linear_algebra/matrix_power/matrix_power_functional.rst", "functional/ivy/linear_algebra/matrix_power/static_matrix_power_container.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_container.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_rank/static_matrix_rank_container.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_container.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/matrix_transpose/static_matrix_transpose_container.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_container.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/outer/static_outer_container.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_container.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/qr/static_qr_container.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/slogdet/slogdet_container.rst", "functional/ivy/linear_algebra/slogdet/slogdet_functional.rst", "functional/ivy/linear_algebra/slogdet/static_slogdet_container.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_container.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/solve/static_solve_container.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/static_svd_container.rst", "functional/ivy/linear_algebra/svd/svd_container.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/static_svdvals_container.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_container.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/static_tensordot_container.rst", "functional/ivy/linear_algebra/tensordot/tensordot_container.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/static_trace_container.rst", "functional/ivy/linear_algebra/trace/trace_container.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/static_vecdot_container.rst", "functional/ivy/linear_algebra/vecdot/vecdot_container.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/static_vector_norm_container.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_container.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/static_vector_to_skew_symmetric_matrix_container.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_container.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/concat/static_concat_container.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/expand_dims/static_expand_dims_container.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/repeat/static_repeat_container.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/reshape/static_reshape_container.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/split/split_container.rst", "functional/ivy/manipulation/split/split_functional.rst", "functional/ivy/manipulation/split/static_split_container.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/multinomial/multinomial_container.rst", "functional/ivy/random/multinomial/multinomial_functional.rst", "functional/ivy/random/multinomial/static_multinomial_container.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_container.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_normal/random_normal_container.rst", "functional/ivy/random/random_normal/random_normal_functional.rst", "functional/ivy/random/random_normal/static_random_normal_container.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/random/shuffle/shuffle_container.rst", "functional/ivy/random/shuffle/shuffle_functional.rst", "functional/ivy/random/shuffle/static_shuffle_container.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmax/argmax_container.rst", "functional/ivy/searching/argmax/argmax_functional.rst", "functional/ivy/searching/argmax/static_argmax_container.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/argmin/argmin_container.rst", "functional/ivy/searching/argmin/argmin_functional.rst", "functional/ivy/searching/argmin/static_argmin_container.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/nonzero/nonzero_array.rst", "functional/ivy/searching/nonzero/nonzero_container.rst", "functional/ivy/searching/nonzero/nonzero_functional.rst", "functional/ivy/searching/nonzero/static_nonzero_container.rst", "functional/ivy/searching/where.rst", "functional/ivy/searching/where/static_where_container.rst", "functional/ivy/searching/where/where_container.rst", "functional/ivy/searching/where/where_functional.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_all/static_unique_all_container.rst", "functional/ivy/set/unique_all/unique_all_container.rst", "functional/ivy/set/unique_all/unique_all_functional.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_counts/static_unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_functional.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_inverse/static_unique_inverse_container.rst", "functional/ivy/set/unique_inverse/unique_inverse_container.rst", "functional/ivy/set/unique_inverse/unique_inverse_functional.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/set/unique_values/static_unique_values_container.rst", "functional/ivy/set/unique_values/unique_values_container.rst", "functional/ivy/set/unique_values/unique_values_functional.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/searchsorted.rst", "functional/ivy/sorting/searchsorted/searchsorted_array.rst", "functional/ivy/sorting/searchsorted/searchsorted_container.rst", "functional/ivy/sorting/searchsorted/searchsorted_functional.rst", "functional/ivy/sorting/searchsorted/static_searchsorted_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/static_var_container.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/all/static_all_container.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "functional/ivy/utility/any/static_any_container.rst", "glossary.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Array", "Array", "Variable", "Array methods", "abs array", "acos array", "acosh array", "adam_step array", "adam_update array", "add array", "add_ivy_array_instance_methods array", "all array", "all_equal array", "any array", "argmax array", "argmin array", "argsort array", "asarray array", "asin array", "asinh array", "astype array", "atan array", "atan2 array", "atanh array", "binary_cross_entropy array", "bitwise_and array", "bitwise_invert array", "bitwise_left_shift array", "bitwise_or array", "bitwise_right_shift array", "bitwise_xor array", "broadcast_arrays array", "broadcast_to array", "can_cast array", "ceil array", "cholesky array", "clip array", "clip_matrix_norm array", "clip_vector_norm array", "concat array", "constant_pad array", "conv1d array", "cos array", "cosh array", "cross array", "cross_entropy array", "cumprod array", "depthwise_conv2d array", "det array", "dev array", "diagonal array", "divide array", "dtype array", "eigh array", "eigvalsh array", "einops_rearrange array", "einops_reduce array", "einops_repeat array", "einsum array", "empty_like array", "equal array", "erf array", "exp array", "expand_dims array", "expm1 array", "finfo array", "flip array", "floor array", "floor_divide array", "from_dlpack array", "full_like array", "gather array", "gather_nd array", "gelu array", "gradient_descent_update array", "greater array", "greater_equal array", "has_nans array", "iinfo array", "inplace_decrement array", "inv array", "is_bool_dtype array", "is_float_dtype array", "is_int_dtype array", "is_uint_dtype array", "is_variable array", "isfinite array", "isinf array", "isnan array", "lamb_update array", "lars_update array", "layer_norm array", "leaky_relu array", "less array", "less_equal array", "log array", "log10 array", "log1p array", "log2 array", "logaddexp array", "logical_and array", "logical_not array", "logical_or array", "logical_xor array", "matmul array", "matrix_norm array", "matrix_rank array", "matrix_transpose array", "max array", "mean array", "meshgrid array", "min array", "multinomial array", "multiply array", "native_array array", "negative array", "nonzero array", "not_equal array", "ones_like array", "optimizer_update array", "outer array", "permute_dims array", "pinv array", "positive array", "pow array", "prod array", "qr array", "randint array", "random_normal array", "random_uniform array", "relu array", "remainder array", "repeat array", "reshape array", "result_type array", "roll array", "round array", "searchsorted array", "shuffle array", "sigmoid array", "sign array", "sin array", "sinh array", "softmax array", "softplus array", "solve array", "sort array", "sparse_cross_entropy array", "split array", "sqrt array", "square array", "squeeze array", "stable_divide array", "stack array", "std array", "stop_gradient array", "subtract array", "sum array", "svd array", "svdvals array", "swapaxes array", "tan array", "tanh array", "tensordot array", "tile array", "to_device array", "to_list array", "to_numpy array", "trace array", "tril array", "triu array", "trunc array", "unique_all array", "unique_counts array", "unique_inverse array", "unique_values array", "unstack array", "var array", "variable array", "variable_data array", "vecdot array", "vector_norm array", "vector_to_skew_symmetric_matrix array", "where array", "zero_pad array", "zeros_like array", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utilities", "ArrayWithutilities", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "Container methods", "abs container", "acos container", "acosh container", "adam_step container", "adam_update container", "add container", "add_ivy_container_instance_methods container", "all container", "all_equal container", "any container", "argmax container", "argmin container", "argsort container", "asin container", "asinh container", "astype container", "atan container", "atan2 container", "atanh container", "binary_cross_entropy container", "bitwise_and container", "bitwise_invert container", "bitwise_left_shift container", "bitwise_or container", "bitwise_right_shift container", "bitwise_xor container", "broadcast_arrays container", "broadcast_to container", "can_cast container", "ceil container", "cholesky container", "clip container", "clip_matrix_norm container", "clip_vector_norm container", "concat container", "constant_pad container", "conv1d container", "cos container", "cosh container", "cross container", "cross_entropy container", "cumprod container", "depthwise_conv2d container", "det container", "dev container", "diagonal container", "divide container", "dtype container", "eigh container", "einops_rearrange container", "einops_reduce container", "einops_repeat container", "einsum container", "empty_like container", "equal container", "erf container", "exp container", "expand_dims container", "expm1 container", "finfo container", "flip container", "floor container", "floor_divide container", "from_dlpack container", "full_like container", "gather container", "gather_nd container", "gelu container", "gradient_descent_update container", "greater container", "greater_equal container", "has_nans container", "iinfo container", "inplace_decrement container", "inv container", "is_bool_dtype container", "is_float_dtype container", "is_int_dtype container", "is_uint_dtype container", "is_variable container", "isfinite container", "isinf container", "isnan container", "lamb_update container", "lars_update container", "layer_norm container", "leaky_relu container", "less container", "less_equal container", "log container", "log10 container", "log1p container", "log2 container", "logaddexp container", "logical_and container", "logical_not container", "logical_or container", "logical_xor container", "matmul container", "matrix_norm container", "matrix_power container", "matrix_rank container", "matrix_transpose container", "max container", "maximum container", "mean container", "meshgrid container", "min container", "minimum container", "multinomial container", "multiply container", "native_array container", "negative container", "nonzero container", "not_equal container", "ones_like container", "optimizer_update container", "outer container", "permute_dims container", "positive container", "pow container", "prod container", "qr container", "randint container", "random_normal container", "random_uniform container", "relu container", "remainder container", "repeat container", "reshape container", "result_type container", "roll container", "round container", "searchsorted container", "shuffle container", "sigmoid container", "sign container", "sin container", "sinh container", "slogdet container", "softmax container", "softplus container", "solve container", "sort container", "sparse_cross_entropy container", "split container", "sqrt container", "square container", "squeeze container", "stable_divide container", "stack container", "static_abs container", "static_acos container", "static_acosh container", "static_add container", "static_all container", "static_all_equal container", "static_any container", "static_arange container", "static_argmax container", "static_argmin container", "static_argsort container", "static_asarray container", "static_asin container", "static_asinh container", "static_astype container", "static_atan container", "static_atan2 container", "static_atanh container", "static_binary_cross_entropy container", "static_bitwise_and container", "static_bitwise_invert container", "static_bitwise_left_shift container", "static_bitwise_or container", "static_bitwise_right_shift container", "static_bitwise_xor container", "static_broadcast_arrays container", "static_broadcast_to container", "static_can_cast container", "static_ceil container", "static_cholesky container", "static_clip container", "static_clip_matrix_norm container", "static_clip_vector_norm container", "static_concat container", "static_conv1d container", "static_cos container", "static_cosh container", "static_cross container", "static_cross_entropy container", "static_cumprod container", "static_default_float_dtype container", "static_depthwise_conv2d container", "static_det container", "static_dev container", "static_diagonal container", "static_divide container", "static_dtype container", "static_einops_rearrange container", "static_einops_reduce container", "static_einops_repeat container", "static_empty_like container", "static_equal container", "static_erf container", "static_exp container", "static_expand_dims container", "static_expm1 container", "static_eye container", "static_finfo container", "static_floor container", "static_floor_divide container", "static_from_dlpack container", "static_full_like container", "static_function_supported_dtypes container", "static_function_unsupported_dtypes container", "static_gather container", "static_gather_nd container", "static_gelu container", "static_greater container", "static_greater_equal container", "static_has_nans container", "static_iinfo container", "static_inplace_decrement container", "static_inv container", "static_is_bool_dtype container", "static_is_float_dtype container", "static_is_int_dtype container", "static_is_uint_dtype container", "static_is_variable container", "static_isfinite container", "static_isinf container", "static_isnan container", "static_leaky_relu container", "static_less container", "static_less_equal container", "static_linspace container", "static_log container", "static_log10 container", "static_log1p container", "static_log2 container", "static_logaddexp container", "static_logical_and container", "static_logical_not container", "static_logical_or container", "static_logical_xor container", "static_logspace container", "static_matrix_norm container", "static_matrix_power container", "static_matrix_rank container", "static_matrix_transpose container", "static_maximum container", "static_meshgrid container", "static_minimum container", "static_multinomial container", "static_multiply container", "static_native_array container", "static_negative container", "static_nonzero container", "static_not_equal container", "static_ones container", "static_ones_like container", "static_outer container", "static_positive container", "static_pow container", "static_qr container", "static_randint container", "static_random_normal container", "static_random_uniform container", "static_relu container", "static_remainder container", "static_repeat container", "static_reshape container", "static_result_type container", "static_roll container", "static_round container", "static_searchsorted container", "static_shuffle container", "static_sigmoid container", "static_sign container", "static_sin container", "static_sinh container", "static_slogdet container", "static_softmax container", "static_softplus container", "static_solve container", "static_sort container", "static_sparse_cross_entropy container", "static_split container", "static_sqrt container", "static_square container", "static_stable_divide container", "static_stop_gradient container", "static_subtract container", "static_svd container", "static_svdvals container", "static_tan container", "static_tanh container", "static_tensordot container", "static_to_device container", "static_to_list container", "static_to_numpy container", "static_trace container", "static_tril container", "static_triu container", "static_trunc container", "static_unique_all container", "static_unique_counts container", "static_unique_inverse container", "static_unique_values container", "static_unstack container", "static_var container", "static_variable container", "static_variable_data container", "static_vecdot container", "static_vector_norm container", "static_vector_to_skew_symmetric_matrix container", "static_where container", "static_zeros container", "static_zeros_like container", "std container", "stop_gradient container", "subtract container", "sum container", "svd container", "svdvals container", "swapaxes container", "tan container", "tanh container", "tensordot container", "tile container", "to_device container", "to_list container", "to_numpy container", "trace container", "tril container", "triu container", "trunc container", "unique_all container", "unique_counts container", "unique_inverse container", "unique_values container", "unstack container", "var container", "variable container", "variable_data container", "vecdot container", "vector_norm container", "vector_to_skew_symmetric_matrix container", "where container", "zero_pad container", "zeros_like container", "Conversions", "static_to_ivy", "static_to_native", "to_ivy", "to_native", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Function Arguments", "Submodule Helper Functions", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Ivy Frontends", "Ivy Frontend Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Formatting", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "from_zero_dim_arrays_to_float", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "integer_array_to_float", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "ivy.Container.gelu", "ivy.gelu", "ivy.Container.static_gelu", "leaky_relu", "ivy.Container.leaky_relu", "ivy.leaky_relu", "ivy.Container.static_leaky_relu", "relu", "ivy.Container.relu", "ivy.relu", "ivy.Container.static_relu", "sigmoid", "ivy.Container.sigmoid", "ivy.sigmoid", "ivy.Container.static_sigmoid", "softmax", "ivy.Container.softmax", "ivy.softmax", "ivy.Container.static_softmax", "softplus", "ivy.Container.softplus", "ivy.softplus", "ivy.Container.static_softplus", "Compilation", "compile", "Constants", "Creation", "arange", "ivy.arange", "ivy.Container.static_arange", "asarray", "ivy.asarray", "ivy.Container.static_asarray", "empty", "empty_like", "ivy.Container.empty_like", "ivy.empty_like", "ivy.Container.static_empty_like", "eye", "ivy.eye", "ivy.Container.static_eye", "from_dlpack", "ivy.Container.from_dlpack", "ivy.from_dlpack", "ivy.Container.static_from_dlpack", "full", "full_like", "ivy.Container.full_like", "ivy.full_like", "ivy.Container.static_full_like", "linspace", "ivy.linspace", "ivy.Container.static_linspace", "logspace", "ivy.logspace", "ivy.Container.static_logspace", "meshgrid", "ivy.Container.meshgrid", "ivy.meshgrid", "ivy.Container.static_meshgrid", "native_array", "ivy.Container.native_array", "ivy.native_array", "ivy.Container.static_native_array", "ones", "ivy.ones", "ivy.Container.static_ones", "ones_like", "ivy.Container.ones_like", "ivy.ones_like", "ivy.Container.static_ones_like", "tril", "ivy.Container.static_tril", "ivy.Container.tril", "ivy.tril", "triu", "ivy.Container.static_triu", "ivy.Container.triu", "ivy.triu", "zeros", "ivy.Container.static_zeros", "ivy.zeros", "zeros_like", "ivy.Container.static_zeros_like", "ivy.Container.zeros_like", "ivy.zeros_like", "Data type", "as_ivy_dtype", "as_native_dtype", "astype", "ivy.Container.astype", "ivy.astype", "ivy.Container.static_astype", "broadcast_arrays", "ivy.Container.broadcast_arrays", "ivy.broadcast_arrays", "ivy.Container.static_broadcast_arrays", "broadcast_to", "ivy.Container.broadcast_to", "ivy.broadcast_to", "ivy.Container.static_broadcast_to", "can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "check_float", "closest_valid_dtype", "default_dtype", "default_float_dtype", "ivy.default_float_dtype", "ivy.Container.static_default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "ivy.Container.dtype", "ivy.dtype", "ivy.Container.static_dtype", "dtype_bits", "finfo", "ivy.Container.finfo", "ivy.finfo", "ivy.Container.static_finfo", "function_supported_dtypes", "ivy.function_supported_dtypes", "ivy.Container.static_function_supported_dtypes", "function_unsupported_dtypes", "ivy.function_unsupported_dtypes", "ivy.Container.static_function_unsupported_dtypes", "iinfo", "ivy.Container.iinfo", "ivy.iinfo", "ivy.Container.static_iinfo", "invalid_dtype", "is_bool_dtype", "ivy.Container.is_bool_dtype", "ivy.is_bool_dtype", "ivy.Container.static_is_bool_dtype", "is_float_dtype", "ivy.Container.is_float_dtype", "ivy.is_float_dtype", "ivy.Container.static_is_float_dtype", "is_int_dtype", "ivy.Container.is_int_dtype", "ivy.is_int_dtype", "ivy.Container.static_is_int_dtype", "is_uint_dtype", "ivy.Array.is_uint_dtype", "ivy.Container.is_uint_dtype", "ivy.is_uint_dtype", "ivy.Container.static_is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "ivy.Container.result_type", "ivy.result_type", "ivy.Container.static_result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "Device", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "ivy.Container.dev", "ivy.dev", "ivy.Container.static_dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "ivy.Container.static_to_device", "ivy.Array.to_device", "ivy.Container.to_device", "ivy.to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Container.acos", "ivy.acos", "ivy.Container.static_acos", "acosh", "ivy.Container.acosh", "ivy.acosh", "ivy.Container.static_acosh", "add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Container.asin", "ivy.asin", "ivy.Container.static_asin", "asinh", "ivy.Container.asinh", "ivy.asinh", "ivy.Container.static_asinh", "atan", "ivy.Container.atan", "ivy.atan", "ivy.Container.static_atan", "atan2", "ivy.Container.atan2", "ivy.atan2", "ivy.Container.static_atan2", "atanh", "ivy.Container.atanh", "ivy.atanh", "ivy.Container.static_atanh", "bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "ivy.Container.static_bitwise_and", "bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "ivy.Container.static_bitwise_invert", "bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "ivy.Container.static_bitwise_left_shift", "bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "ivy.Container.static_bitwise_or", "bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "ivy.Container.static_bitwise_right_shift", "bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ivy.Container.static_bitwise_xor", "ceil", "ivy.Container.ceil", "ivy.ceil", "ivy.Container.static_ceil", "cos", "ivy.Container.cos", "ivy.cos", "ivy.Container.static_cos", "cosh", "ivy.Container.cosh", "ivy.cosh", "ivy.Container.static_cosh", "divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Container.equal", "ivy.equal", "ivy.Container.static_equal", "erf", "ivy.Container.erf", "ivy.erf", "ivy.Container.static_erf", "exp", "ivy.Container.exp", "ivy.exp", "ivy.Container.static_exp", "expm1", "ivy.Container.expm1", "ivy.expm1", "ivy.Container.static_expm1", "floor", "ivy.Container.floor", "ivy.floor", "ivy.Container.static_floor", "floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "ivy.Container.static_floor_divide", "greater", "ivy.Container.greater", "ivy.greater", "ivy.Container.static_greater", "greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "ivy.Container.static_greater_equal", "isfinite", "ivy.Container.isfinite", "ivy.isfinite", "ivy.Container.static_isfinite", "isinf", "ivy.Container.isinf", "ivy.isinf", "ivy.Container.static_isinf", "isnan", "ivy.Container.isnan", "ivy.isnan", "ivy.Container.static_isnan", "less", "ivy.Container.less", "ivy.less", "ivy.Container.static_less", "less_equal", "ivy.Container.less_equal", "ivy.less_equal", "ivy.Container.static_less_equal", "log", "ivy.Container.log", "ivy.log", "ivy.Container.static_log", "log10", "ivy.Container.log10", "ivy.log10", "ivy.Container.static_log10", "log1p", "ivy.Container.log1p", "ivy.log1p", "ivy.Container.static_log1p", "log2", "ivy.Container.log2", "ivy.log2", "ivy.Container.static_log2", "logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "ivy.Container.static_logaddexp", "logical_and", "ivy.Container.logical_and", "ivy.logical_and", "ivy.Container.static_logical_and", "logical_not", "ivy.Container.logical_not", "ivy.logical_not", "ivy.Container.static_logical_not", "logical_or", "ivy.Container.logical_or", "ivy.logical_or", "ivy.Container.static_logical_or", "logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "ivy.Container.static_logical_xor", "maximum", "ivy.Container.maximum", "ivy.maximum", "ivy.Container.static_maximum", "minimum", "ivy.Container.minimum", "ivy.minimum", "ivy.Container.static_minimum", "multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Container.negative", "ivy.negative", "ivy.Container.static_negative", "not_equal", "ivy.Container.not_equal", "ivy.not_equal", "ivy.Container.static_not_equal", "positive", "ivy.Container.positive", "ivy.positive", "ivy.Container.static_positive", "pow", "ivy.Container.pow", "ivy.pow", "ivy.Container.static_pow", "remainder", "ivy.Container.remainder", "ivy.remainder", "ivy.Container.static_remainder", "round", "ivy.Container.round", "ivy.round", "ivy.Container.static_round", "sign", "ivy.Container.sign", "ivy.sign", "ivy.Container.static_sign", "sin", "ivy.Container.sin", "ivy.sin", "ivy.Container.static_sin", "sinh", "ivy.Container.sinh", "ivy.sinh", "ivy.Container.static_sinh", "sqrt", "ivy.Container.sqrt", "ivy.sqrt", "ivy.Container.static_sqrt", "square", "ivy.Container.square", "ivy.square", "ivy.Container.static_square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Container.static_trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "ivy.Container.clip_matrix_norm", "ivy.clip_matrix_norm", "ivy.Container.static_clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "ivy.Container.static_clip_vector_norm", "container_types", "copy_array", "cumprod", "ivy.Container.cumprod", "ivy.cumprod", "ivy.Container.static_cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "ivy.Container.einops_rearrange", "ivy.einops_rearrange", "ivy.Container.static_einops_rearrange", "einops_reduce", "ivy.Container.einops_reduce", "ivy.einops_reduce", "ivy.Container.static_einops_reduce", "einops_repeat", "ivy.Container.einops_repeat", "ivy.einops_repeat", "ivy.Container.static_einops_repeat", "exists", "floormod", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "ivy.Container.gather", "ivy.gather", "ivy.Container.static_gather", "gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_array_mode", "get_min_base", "get_min_denominator", "get_nestable_mode", "get_num_dims", "get_referrers_recursive", "has_nans", "ivy.Container.has_nans", "ivy.has_nans", "ivy.Container.static_has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "ivy.Container.inplace_decrement", "ivy.inplace_decrement", "ivy.Container.static_inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_array_mode", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_queue_timeout", "set_shape_array_mode", "set_tmp_dir", "shape", "shape_array_mode", "stable_divide", "ivy.Container.stable_divide", "ivy.stable_divide", "ivy.Container.static_stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_ivy_shape", "to_list", "ivy.Container.static_to_list", "ivy.Container.to_list", "ivy.to_list", "to_native_shape", "to_numpy", "ivy.Container.static_to_numpy", "ivy.Container.to_numpy", "ivy.to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_nestable_mode", "unset_shape_array_mode", "unstack", "ivy.Container.static_unstack", "ivy.Container.unstack", "ivy.unstack", "value_is_nan", "Gradients", "adam_step", "ivy.Container.adam_step", "ivy.adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "jac", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "set_with_grads", "stop_gradient", "ivy.Container.static_stop_gradient", "ivy.Container.stop_gradient", "ivy.stop_gradient", "unset_with_grads", "value_and_grad", "variable", "ivy.Container.static_variable", "ivy.Container.variable", "ivy.variable", "variable_data", "ivy.Container.static_variable_data", "ivy.Container.variable_data", "ivy.variable_data", "with_grads", "Layers", "conv1d", "ivy.Container.conv1d", "ivy.conv1d", "ivy.Container.static_conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "deconv_length", "depthwise_conv2d", "ivy.Container.depthwise_conv2d", "ivy.depthwise_conv2d", "ivy.Container.static_depthwise_conv2d", "dropout", "handle_padding", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Container.cholesky", "ivy.cholesky", "ivy.Container.static_cholesky", "cross", "ivy.Container.cross", "ivy.cross", "ivy.Container.static_cross", "det", "ivy.Container.det", "ivy.det", "ivy.Container.static_det", "diagonal", "ivy.Container.diagonal", "ivy.diagonal", "ivy.Container.static_diagonal", "eigh", "ivy.Container.eigh", "ivy.eigh", "eigvalsh", "inv", "ivy.Container.inv", "ivy.inv", "ivy.Container.static_inv", "matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Container.matrix_norm", "ivy.matrix_norm", "ivy.Container.static_matrix_norm", "matrix_power", "ivy.Container.matrix_power", "ivy.matrix_power", "ivy.Container.static_matrix_power", "matrix_rank", "ivy.Container.matrix_rank", "ivy.matrix_rank", "ivy.Container.static_matrix_rank", "matrix_transpose", "ivy.Container.matrix_transpose", "ivy.matrix_transpose", "ivy.Container.static_matrix_transpose", "outer", "ivy.Container.outer", "ivy.outer", "ivy.Container.static_outer", "pinv", "qr", "ivy.Container.qr", "ivy.qr", "ivy.Container.static_qr", "slogdet", "ivy.Container.slogdet", "ivy.slogdet", "ivy.Container.static_slogdet", "solve", "ivy.Container.solve", "ivy.solve", "ivy.Container.static_solve", "svd", "ivy.Container.static_svd", "ivy.Container.svd", "ivy.svd", "svdvals", "ivy.Container.static_svdvals", "ivy.Array.svdvals", "ivy.Container.svdvals", "ivy.svdvals", "tensordot", "ivy.Container.static_tensordot", "ivy.Container.tensordot", "ivy.tensordot", "trace", "ivy.Container.static_trace", "ivy.Container.trace", "ivy.trace", "vecdot", "ivy.Container.static_vecdot", "ivy.Container.vecdot", "ivy.vecdot", "vector_norm", "ivy.Container.static_vector_norm", "ivy.Container.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Container.static_vector_to_skew_symmetric_matrix", "ivy.Container.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Container.concat", "ivy.concat", "ivy.Container.static_concat", "constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "ivy.Container.static_expand_dims", "flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Container.repeat", "ivy.repeat", "ivy.Container.static_repeat", "reshape", "ivy.Container.reshape", "ivy.reshape", "ivy.Container.static_reshape", "roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "ivy.Container.split", "ivy.split", "ivy.Container.static_split", "squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "ivy.Container.multinomial", "ivy.multinomial", "ivy.Container.static_multinomial", "randint", "ivy.Container.randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "ivy.Container.random_normal", "ivy.random_normal", "ivy.Container.static_random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "ivy.Container.shuffle", "ivy.shuffle", "ivy.Container.static_shuffle", "Searching", "argmax", "ivy.Container.argmax", "ivy.argmax", "ivy.Container.static_argmax", "argmin", "ivy.Container.argmin", "ivy.argmin", "ivy.Container.static_argmin", "nonzero", "ivy.Array.nonzero", "ivy.Container.nonzero", "ivy.nonzero", "ivy.Container.static_nonzero", "where", "ivy.Container.static_where", "ivy.Container.where", "ivy.where", "Set", "unique_all", "ivy.Container.static_unique_all", "ivy.Container.unique_all", "ivy.unique_all", "unique_counts", "ivy.Container.static_unique_counts", "ivy.Container.unique_counts", "ivy.unique_counts", "unique_inverse", "ivy.Container.static_unique_inverse", "ivy.Container.unique_inverse", "ivy.unique_inverse", "unique_values", "ivy.Container.static_unique_values", "ivy.Container.unique_values", "ivy.unique_values", "Sorting", "argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "searchsorted", "ivy.Array.searchsorted", "ivy.Container.searchsorted", "ivy.searchsorted", "ivy.Container.static_searchsorted", "sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Container.max", "ivy.max", "mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Container.min", "ivy.min", "prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Container.std", "ivy.std", "sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Container.static_var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Container.all", "ivy.all", "ivy.Container.static_all", "any", "ivy.Container.any", "ivy.any", "ivy.Container.static_any", "Glossary", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "FirstLayerSiren", "GlorotUniform", "Ones", "Siren", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [1, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 651, 652, 655, 657, 658, 660, 666, 667, 668, 669, 673, 674, 676, 677, 678, 688, 689, 690, 1614, 1615], "ivi": [1, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 245, 246, 651, 652, 653, 655, 656, 657, 659, 663, 664, 665, 667, 668, 669, 670, 671, 672, 688, 690, 1614, 1615, 1621], "arrai": [1, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 649, 650, 651, 653, 654, 657, 658, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 690, 1614, 1615], "activ": [1, 229, 230, 649, 650, 652, 654, 677, 1615], "sourc": [1, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 244, 245, 246, 648, 649, 650, 652, 666, 667, 1615], "base": [1, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 650, 654, 655, 660, 662, 665, 667, 673, 689], "abc": [1, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 675], "gelu": 1, "approxim": [1, 657], "true": [1, 195, 196, 199, 200, 201, 202, 203, 204, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 223, 224, 225, 226, 229, 230, 656, 658, 660, 661, 662, 663, 667, 668, 670, 671, 673, 676, 677, 678], "out": [1, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 244, 245, 246, 648, 649, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 675, 676, 677, 678, 689, 1615], "none": [1, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 654, 655, 656, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 671, 673, 675, 677, 678], "instanc": [1, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 650, 651, 655, 657, 658, 660, 661, 662, 663, 665, 666, 668, 670, 676, 677, 678, 1614], "method": [1, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 650, 651, 654, 655, 657, 658, 660, 661, 662, 663, 665, 666, 671, 673, 674, 677, 678, 690, 1615], "variant": [1, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 657, 658], "thi": [1, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 244, 245, 246, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 689, 690, 1615, 1621], "simpli": [1, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 650, 655, 657, 658, 660, 661, 663, 666, 667, 668, 669, 670, 673, 677, 678, 690, 1614], "wrap": [1, 188, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 230, 653, 655, 657, 660, 663, 664, 666, 667, 668, 669, 670, 673, 675, 678, 690, 1614], "function": [1, 188, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 244, 650, 652, 653, 654, 657, 658, 659, 661, 662, 664, 666, 670, 671, 672, 674, 675, 676, 677, 688, 689, 1614, 1615], "so": [1, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 244, 245, 649, 650, 651, 654, 655, 657, 658, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 690, 1615], "docstr": [1, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 651, 652, 653, 654, 655, 661, 663, 671], "also": [1, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 244, 245, 648, 649, 650, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 673, 676, 677, 678, 689, 690], "appli": [1, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 649, 650, 651, 655, 656, 657, 658, 660, 663, 665, 667, 668, 669, 670, 675, 676, 677, 678, 688, 690, 1614, 1615], "minim": [1, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 657, 670, 673], "chang": [1, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 246, 649, 650, 651, 652, 657, 658, 659, 660, 661, 667, 673, 677, 690, 1615, 1621], "exampl": [1, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 246, 649, 650, 651, 653, 654, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 676, 677, 678, 689, 690, 1615], "x": [1, 188, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 652, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 667, 670, 671, 673, 675, 676, 677, 678, 1615], "0": [1, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 650, 654, 657, 658, 660, 661, 662, 673, 675, 676, 677, 678, 690, 1615], "3": [1, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 213, 214, 217, 218, 225, 226, 649, 651, 652, 658, 660, 664, 667, 668, 673, 675, 676, 677, 678, 1615], "1": [1, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 245, 246, 650, 651, 652, 655, 658, 660, 661, 662, 663, 667, 668, 670, 671, 672, 673, 675, 676, 677, 678, 690, 1615], "y": [1, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 221, 222, 223, 224, 225, 226, 654, 658, 661, 664, 667, 673, 675], "print": [1, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 225, 226, 229, 230, 649, 650, 658, 660, 667, 673, 675, 676, 677, 1615], "185": 1, "046": 1, "return": [1, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 649, 650, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 690, 1615], "type": [1, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 665, 666, 667, 669, 670, 671, 673, 675, 676, 1615], "leaky_relu": [1, 660, 1615], "alpha": [1, 660, 661], "2": [1, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 649, 650, 651, 652, 655, 658, 660, 664, 667, 668, 672, 673, 675, 676, 677, 678, 690, 1615], "39": [1, 199, 200, 217, 218], "85": [1, 217, 218], "17": [1, 658, 667], "relu": [1, 229, 230, 662, 676, 677, 1615], "sigmoid": [1, 673, 676, 677, 1615], "269": 1, "731": 1, "881": [1, 199, 200], "softmax": [1, 229, 230, 1615], "axi": [1, 201, 202, 209, 210, 211, 212, 213, 214, 219, 220, 223, 224, 225, 226, 655, 658, 660, 661, 663, 667, 668, 670, 671, 673, 675, 678, 689], "422": 1, "155": 1, "softplu": [1, 1615], "3461": 1, "6491": 1, "535": 1, "42": [1, 217, 218, 673, 678], "support": [1, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 194, 196, 198, 200, 202, 203, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 248, 250, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 669, 670, 672, 673, 675, 676, 678, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1483, 1484, 1485, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1505, 1506, 1507, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1619, 1620, 1621, 1623, 1624, 1626, 1628, 1629, 1630, 1631, 1632, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1646, 1648, 1650, 1651, 1652, 1653, 1654, 1656, 1657, 1659], "framework": [1, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 198, 200, 202, 203, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 248, 250, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 672, 673, 675, 678, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1483, 1484, 1485, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1505, 1506, 1507, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1619, 1620, 1621, 1623, 1624, 1626, 1628, 1629, 1630, 1631, 1632, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1646, 1648, 1650, 1651, 1652, 1653, 1654, 1656, 1657, 1659], "collect": [188, 660, 662, 689], "accept": [188, 199, 200, 649, 650, 654, 655, 657, 658, 660, 662, 663, 665, 666, 667, 669, 670, 675, 1614, 1615], "args_to_ivi": 188, "arg": [188, 189, 190, 652, 673, 677], "include_deriv": [188, 189, 190, 191, 192], "kwarg": [188, 189, 190, 673, 677], "keyword": [188, 189, 190, 654, 660, 661, 662, 665, 668, 669, 670, 676], "variabl": [188, 189, 190, 191, 192, 203, 204, 215, 216, 650, 655, 656, 657, 660, 664, 668, 670, 671, 673, 676, 677, 678, 690, 1615], "form": [188, 189, 190, 191, 192, 193, 194, 203, 204, 209, 210, 245, 648, 660, 663, 677, 678], "all": [188, 189, 190, 191, 192, 193, 194, 201, 202, 213, 214, 217, 218, 229, 230, 244, 245, 246, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 689, 690, 1614, 1615], "nest": [188, 189, 190, 191, 192, 654, 660, 663, 666, 667, 676, 677, 690, 1614], "otherwis": [188, 189, 190, 191, 192, 195, 196, 199, 200, 203, 204, 209, 210, 213, 214, 219, 220, 225, 226, 655, 658, 660, 666, 667, 668, 669, 673], "argument": [188, 189, 190, 191, 192, 199, 200, 244, 651, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 671, 673, 675, 676, 1614], "ar": [188, 189, 190, 199, 200, 201, 202, 213, 214, 217, 218, 219, 220, 244, 245, 246, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 689, 690, 1614, 1615], "unchang": [188, 189, 190, 191, 192], "paramet": [188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 654, 655, 657, 660, 673, 675, 676, 689], "iter": [188, 189, 190, 191, 192, 201, 202, 213, 214, 229, 230, 246, 667, 673, 676], "ani": [188, 189, 190, 193, 194, 199, 200, 201, 202, 229, 230, 244, 245, 246, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 676, 677, 678, 689, 690, 1614, 1615], "The": [188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 243, 244, 246, 648, 649, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 689, 1614, 1615], "posit": [188, 189, 190, 199, 200, 209, 210, 213, 214, 650, 654, 660, 661, 662, 665, 676, 689], "check": [188, 189, 190, 191, 192, 195, 196, 201, 202, 203, 204, 244, 245, 246, 649, 650, 651, 656, 658, 660, 665, 667, 672, 673, 675, 676, 677, 678, 689, 1615], "option": [188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 225, 226, 229, 230, 649, 650, 654, 655, 656, 657, 658, 660, 661, 662, 663, 667, 668, 669, 670, 671, 673, 678, 690], "dict": [188, 189, 190, 191, 192, 201, 202, 656, 661, 667, 671, 676, 677, 1614], "bool": [188, 189, 190, 191, 192, 195, 196, 199, 200, 201, 202, 203, 204, 209, 210, 213, 214, 217, 218, 219, 220, 223, 224, 225, 226, 656, 658, 661, 668, 670, 671, 673, 678], "whether": [188, 189, 190, 191, 192, 195, 196, 201, 202, 203, 204, 213, 214, 217, 218, 648, 649, 655, 658, 667, 668, 670], "recurs": [188, 189, 190, 191, 192, 649, 652, 663, 667, 677, 690], "deriv": [188, 189, 190, 191, 192, 193, 194, 203, 204, 668, 669, 675, 677], "from": [188, 189, 190, 191, 192, 193, 194, 195, 196, 201, 202, 203, 204, 207, 208, 213, 214, 217, 218, 219, 220, 225, 226, 229, 230, 244, 245, 246, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 689, 690, 1614, 1615, 1621], "tupl": [188, 189, 190, 191, 192, 193, 194, 195, 196, 207, 208, 209, 210, 213, 214, 225, 226, 654, 655, 656, 660, 661, 662, 668, 669, 671, 673, 676, 677, 678, 690], "list": [188, 189, 190, 191, 192, 193, 194, 195, 196, 201, 202, 207, 208, 213, 214, 215, 216, 229, 230, 649, 651, 652, 654, 655, 658, 660, 661, 662, 667, 668, 669, 671, 673, 676, 677, 678, 690, 1615], "default": [188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 649, 650, 651, 655, 657, 658, 660, 661, 663, 664, 665, 668, 669, 673, 677, 1614], "i": [188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 244, 245, 246, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 689, 690, 1614, 1615], "fals": [188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 209, 210, 213, 214, 219, 220, 223, 224, 225, 226, 656, 658, 660, 661, 662, 670, 671, 673, 676, 677, 678], "str": [188, 189, 190, 201, 202, 207, 208, 656, 668, 669, 671, 673, 678], "kei": [188, 189, 190, 660, 662, 667, 671, 676], "word": [188, 189, 190, 667, 1614], "ret": [188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 654, 657, 661, 673, 678], "same": [188, 189, 190, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 213, 214, 217, 218, 221, 222, 223, 224, 225, 226, 244, 246, 649, 650, 652, 654, 655, 656, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 675, 677, 678, 690, 1615], "convert": [188, 189, 190, 191, 192, 193, 194, 246, 651, 660, 665, 666, 673, 690, 1614], "args_to_n": [188, 670], "nativ": [188, 190, 191, 192, 193, 194, 660, 661, 662, 665, 668, 670, 675, 676, 1614], "backend": [188, 190, 192, 203, 204, 244, 650, 651, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 668, 669, 670, 672, 674, 675, 678, 1614, 1615, 1621], "to_ivi": 188, "input": [188, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 654, 655, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 676, 677, 678, 690], "an": [188, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 209, 210, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 245, 246, 649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 689, 690, 1614, 1615], "If": [188, 191, 192, 193, 194, 195, 196, 203, 204, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 244, 648, 649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 690, 1615], "set": [188, 191, 192, 201, 202, 203, 204, 209, 210, 219, 220, 222, 223, 224, 225, 226, 244, 648, 650, 653, 654, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 673, 675, 676], "leaf": [188, 191, 192, 663, 667, 676], "contain": [188, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 209, 210, 211, 212, 213, 214, 219, 220, 221, 222, 225, 226, 244, 649, 651, 652, 653, 655, 657, 658, 660, 663, 665, 668, 670, 672, 673, 674, 677, 690, 1614, 1615], "within": [188, 191, 192, 650, 651, 660, 662, 677, 690], "union": [188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 225, 226, 654, 655, 656, 658, 661, 663, 666, 667, 668, 669, 670, 671, 673, 678], "nativearrai": [188, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 654, 655, 658, 661, 663, 665, 666, 667, 670, 671, 673, 675, 1614], "mayb": [188, 191, 192, 649, 673, 675], "manner": [188, 191, 192, 244, 654, 657, 660, 669, 676, 689, 690], "travers": [188, 191, 192, 667, 673], "lowest": [188, 191, 192, 217, 218, 663, 668, 690, 1614], "leav": [188, 191, 192, 655, 657, 658, 660, 663, 667, 668, 670, 676, 677], "search": [188, 191, 192, 220, 244, 649, 654, 658, 660], "": [188, 191, 192, 193, 194, 203, 204, 225, 226, 245, 246, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 689, 690, 1614, 1615], "case": [188, 191, 192, 213, 214, 225, 226, 245, 649, 650, 651, 654, 655, 656, 657, 658, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 677, 678, 690], "to_n": [188, 673], "item": [188, 192, 229, 230, 651, 668, 673, 675, 676, 678, 1615], "convers": [189, 190, 191, 192, 246, 651, 665, 672, 674, 678, 689, 690, 1614, 1615, 1621], "arraywithcr": [193, 675], "asarrai": [193, 194, 201, 202, 660, 662, 665, 670], "copi": [193, 194, 195, 196, 201, 202, 213, 214, 650, 652, 657, 664, 668, 673, 676, 689, 690], "dtype": [193, 194, 195, 196, 217, 218, 219, 220, 225, 226, 654, 656, 658, 660, 661, 662, 663, 665, 668, 669, 671, 673, 675, 1615], "devic": [193, 194, 198, 201, 202, 217, 218, 245, 650, 653, 654, 656, 662, 663, 665, 668, 673, 678, 690, 1614], "self": [193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 666, 667, 673, 675, 676, 677, 678, 1615], "data": [193, 194, 196, 199, 200, 203, 204, 209, 210, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 243, 245, 649, 653, 654, 655, 656, 657, 662, 663, 665, 667, 669, 670, 673, 675, 1614, 1615, 1621], "can": [193, 194, 195, 196, 213, 214, 217, 218, 244, 245, 246, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 689, 690, 1614, 1615, 1621], "includ": [193, 194, 201, 202, 219, 220, 225, 226, 245, 650, 651, 654, 655, 657, 658, 659, 660, 663, 664, 666, 667, 668, 669, 670, 671, 673, 689, 690], "ndarrai": [193, 194, 655, 656, 666, 668, 669, 670, 673, 675, 678, 1614], "nativedtyp": [193, 194, 217, 218, 654, 655, 668, 669, 673], "datatyp": [193, 194], "infer": [193, 194, 213, 214, 653, 664, 665, 668, 669, 673, 678], "nativedevic": [193, 194, 197, 198, 217, 218, 654, 655, 668, 669], "which": [193, 194, 195, 196, 201, 202, 203, 204, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 223, 224, 225, 226, 244, 245, 246, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 689, 690, 1614, 1615], "place": [193, 194, 199, 200, 201, 202, 213, 214, 650, 653, 654, 655, 656, 657, 658, 660, 661, 663, 667, 669, 670, 671, 678, 1614], "creat": [193, 194, 201, 202, 217, 218, 245, 648, 649, 650, 651, 652, 653, 656, 660, 661, 662, 665, 668, 669, 670, 673, 674, 677, 688, 689, 1614, 1615, 1621], "output": [193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 225, 226, 649, 650, 653, 654, 655, 657, 658, 660, 662, 663, 665, 666, 667, 669, 670, 673, 675, 677, 678, 690, 1614, 1615], "write": [193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 225, 226, 246, 650, 651, 652, 653, 654, 657, 658, 662, 663, 664, 670, 673, 675, 678], "result": [193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 225, 226, 650, 654, 655, 657, 658, 660, 661, 662, 665, 666, 667, 668, 670, 673, 676, 690, 1615], "It": [193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 649, 650, 651, 652, 653, 654, 657, 658, 660, 661, 662, 664, 665, 666, 667, 668, 670, 673, 675, 676, 677], "must": [193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 244, 246, 649, 650, 651, 654, 655, 657, 658, 663, 666, 668, 669, 673, 677, 678], "have": [193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 243, 244, 245, 246, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 689, 690, 1614, 1615], "shape": [193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 650, 654, 655, 657, 658, 660, 662, 668, 669, 670, 673, 675, 676, 677, 678, 1615], "broadcast": [193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 225, 226, 654, 657, 658, 660, 667, 668, 673], "interpret": [193, 194], "empty_lik": [193, 194], "uniniti": [193, 194], "from_dlpack": [193, 194], "full_lik": [193, 194, 656], "fill_valu": [193, 194, 656, 662, 668], "float": [193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 209, 210, 211, 212, 215, 216, 217, 218, 225, 226, 655, 656, 657, 660, 662, 663, 665, 667, 668, 670, 673, 675, 677], "scalar": [193, 194, 668, 690], "fill": [193, 194, 217, 218, 662], "valu": [193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 649, 650, 655, 657, 658, 660, 661, 662, 663, 667, 668, 669, 670, 671, 673, 675, 690], "where": [193, 194, 213, 214, 217, 218, 219, 220, 225, 226, 244, 245, 246, 648, 649, 650, 651, 652, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 676, 677, 678, 690, 1615], "everi": [193, 194, 201, 202, 650, 651, 652, 655, 658, 659, 660, 663, 664, 665, 667, 668, 670, 673, 675, 677], "element": [193, 194, 199, 200, 201, 202, 209, 210, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 657, 660, 662, 673], "equal": [193, 194, 195, 196, 199, 200, 201, 202, 213, 214, 217, 218, 223, 224, 225, 226, 658, 667, 668], "With": [193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 209, 210, 219, 220, 245, 246, 649, 658, 660, 661, 673], "int": [193, 194, 195, 196, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 654, 655, 656, 658, 660, 661, 662, 663, 667, 668, 669, 670, 671, 673, 678], "000123": [193, 194], "ones": [193, 194, 203, 204, 217, 218, 658, 660, 675, 676, 1615], "5": [193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 209, 210, 213, 214, 215, 216, 217, 218, 223, 224, 225, 226, 650, 652, 655, 658, 660, 662, 664, 675, 676, 677], "4": [193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 213, 214, 217, 218, 225, 226, 246, 651, 652, 658, 660, 664, 667, 673, 675, 676, 677, 678, 1615], "6": [193, 194, 199, 200, 201, 202, 203, 204, 207, 208, 213, 214, 217, 218, 223, 224, 225, 226, 652, 658, 660, 664, 667, 673, 675, 676, 677], "meshgrid": [193, 194], "index": [193, 194, 201, 202, 219, 220, 221, 222, 223, 224, 652, 663, 667, 675], "xy": [193, 194], "native_arrai": [193, 194, 195, 196, 199, 200, 201, 202, 660, 662], "A": [193, 194, 195, 196, 201, 202, 213, 214, 243, 244, 245, 246, 652, 653, 655, 660, 663, 667, 668, 669, 673, 676, 690, 1614, 1615], "ones_lik": [193, 194, 678, 1615], "tril": [193, 194], "k": [193, 194, 217, 218, 653, 661, 662, 673], "m": [193, 194, 209, 210, 217, 218, 649, 650, 652, 653, 673], "n": [193, 194, 213, 214, 217, 218, 225, 226, 653, 660], "whose": [193, 194, 199, 200, 209, 210, 213, 214, 221, 222, 657, 660], "innermost": [193, 194, 209, 210], "two": [193, 194, 209, 210, 246, 649, 657, 658, 659, 660, 661, 662, 666, 672, 676, 678, 1615], "dimens": [193, 194, 201, 202, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 658, 660, 661, 662, 673, 676], "mxn": [193, 194], "matric": [193, 194, 209, 210, 689], "diagon": [193, 194, 209, 210], "abov": [193, 194, 199, 200, 217, 218, 649, 650, 652, 655, 657, 658, 660, 661, 663, 664, 666, 667, 670, 671, 673, 675, 676, 677, 678], "zero": [193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 219, 220, 225, 226, 246, 655, 658, 660, 665, 666, 667, 668, 669, 673, 676, 677, 1615], "main": [193, 194, 649, 652, 665, 667], "below": [193, 194, 648, 649, 651, 652, 653, 654, 656, 658, 660, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 689, 1615], "lower": [193, 194, 209, 210, 217, 218, 650, 658, 660, 673, 690, 1614], "triangular": [193, 194, 209, 210], "part": [193, 194, 203, 204, 650, 654, 659, 660, 663, 673, 674, 678, 689, 690], "specifi": [193, 194, 195, 196, 201, 202, 211, 212, 213, 214, 217, 218, 219, 220, 650, 653, 655, 659, 660, 661, 662, 663, 668, 669, 670, 673, 676, 677], "should": [193, 194, 199, 200, 203, 204, 209, 210, 213, 214, 217, 218, 219, 220, 225, 226, 243, 245, 649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 1615], "alloc": [193, 194, 195, 196, 650, 690], "triu": [193, 194], "upper": [193, 194, 209, 210, 217, 218, 660], "zeros_lik": [193, 194, 661, 1615], "creation": [194, 654, 656, 660, 662, 665, 668, 669, 673], "data_typ": [195, 196, 654, 656, 660, 668], "arraywithdatatyp": [195, 675], "astyp": [195, 196, 207, 208, 661, 668, 670], "irrespect": [195, 196, 667, 670, 675], "promot": [195, 196, 199, 200, 209, 210, 657, 663, 668], "rule": [195, 196, 209, 210, 658, 660, 663, 666, 667, 668, 671], "cast": [195, 196, 661, 662, 663, 668, 673, 1615], "point": [195, 196, 199, 200, 209, 210, 217, 218, 225, 226, 246, 650, 651, 655, 657, 658, 660, 666, 670, 673, 675, 676, 689], "nan": [195, 196, 199, 200, 201, 202, 225, 226, 654, 657, 660], "infin": [195, 196, 199, 200, 201, 202, 657], "integr": [195, 196, 649], "implement": [195, 196, 223, 224, 651, 653, 655, 656, 657, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 676, 677, 678, 689, 690, 1614, 1615], "depend": [195, 196, 223, 224, 245, 649, 650, 657, 660, 661, 665, 668, 670, 673, 690], "when": [195, 196, 211, 212, 217, 218, 219, 220, 225, 226, 244, 245, 649, 650, 651, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 678, 690, 1615], "boolean": [195, 196, 199, 200, 201, 202, 203, 204, 213, 214, 660, 662, 667], "numer": [195, 196, 199, 200, 201, 202, 209, 210, 217, 218, 219, 220, 654, 662, 665, 673, 677], "non": [195, 196, 217, 218, 219, 220, 225, 226, 658, 665, 667, 668, 673], "desir": [195, 196, 244, 650, 661], "match": [195, 196, 658, 667], "newli": [195, 196, 650, 660, 670], "alwai": [195, 196, 203, 204, 213, 214, 650, 651, 654, 655, 657, 660, 663, 664, 666, 667, 670, 671, 673, 690], "us": [195, 196, 199, 200, 201, 202, 203, 204, 213, 214, 215, 216, 229, 230, 246, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 689, 690, 1614, 1615], "float64": [195, 196, 217, 218, 660, 668], "broadcast_arrai": [195, 196], "against": [195, 196, 219, 220, 244, 660, 690], "other": [195, 196, 201, 202, 225, 226, 245, 649, 650, 654, 657, 658, 659, 660, 661, 662, 663, 666, 667, 670, 671, 673, 675, 677, 678, 688, 689, 690, 1614, 1615], "arbitrari": [195, 196, 655, 660, 663, 667, 670, 677, 690], "number": [195, 196, 201, 202, 213, 214, 217, 218, 221, 222, 225, 226, 243, 244, 649, 650, 658, 660, 662, 667, 669, 670, 673, 676, 1615], "each": [195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 213, 214, 221, 222, 244, 245, 246, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 670, 671, 673, 675, 676, 678, 689, 690, 1615, 1621], "its": [195, 196, 213, 214, 649, 650, 651, 652, 656, 657, 660, 661, 662, 665, 671, 678, 690, 1614], "correspond": [195, 196, 199, 200, 201, 202, 213, 214, 225, 226, 650, 655, 657, 658, 659, 660, 663, 665, 666, 667, 668, 673], "x1": [195, 196, 199, 200, 201, 202, 209, 210, 219, 220, 655, 658, 661], "x2": [195, 196, 199, 200, 201, 202, 209, 210, 219, 220, 655, 658, 661], "x3": [195, 196], "mix": [195, 196, 199, 200, 201, 202, 653, 658, 660, 670, 673, 1614], "broadcast_to": [195, 196, 668], "store": [195, 196, 203, 204, 213, 214, 650, 657, 664, 666, 667, 673, 675, 676, 677, 1614], "code": [195, 196, 199, 200, 203, 204, 244, 245, 246, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 690, 1614, 1615, 1621], "can_cast": [195, 196, 663, 668], "occur": [195, 196, 221, 222], "accord": [195, 196, 225, 226, 649, 651, 652, 661, 663, 668], "float32": [195, 196, 207, 208, 658, 660, 668], "as_n": [195, 196, 197, 198, 668], "finfo": [195, 196, 660], "iinfo": [195, 196, 671], "is_bool_dtyp": [195, 196], "is_float_dtyp": [195, 196, 656], "see": [195, 196, 199, 200, 209, 210, 219, 220, 225, 226, 244, 648, 649, 650, 651, 655, 658, 659, 660, 662, 663, 667, 669, 673, 675, 676, 689, 690, 1615], "int64": [195, 196, 217, 218, 660, 668, 673], "int32": [195, 196, 217, 218, 660, 668, 673], "arr": [195, 196, 668, 669], "b": [195, 196, 199, 200, 243, 246, 648, 653, 658, 663, 664, 667, 672, 673, 674, 676, 677, 678, 688, 1615, 1621], "is_int_dtyp": [195, 196, 656, 662], "is_uint_dtyp": [195, 196, 656, 662], "result_typ": [195, 196, 668], "arrays_and_dtyp": [195, 196], "oper": [195, 196, 203, 204, 207, 208, 244, 649, 651, 657, 658, 660, 661, 663, 666, 667, 669, 670, 673, 676, 677, 1614], "involv": [195, 196, 245, 648, 652, 653, 658, 668, 678, 1615, 1621], "arraywithdevic": [197, 675], "dev": [197, 198, 649, 663, 669, 675, 677], "to_devic": [197, 198], "stream": [197, 198], "arraywithelementwis": [199, 651, 666, 675], "ab": [199, 200, 660, 665, 1615], "absolut": [199, 200, 648], "aco": [199, 200, 1615], "real": [199, 200], "invers": [199, 200, 689], "cosin": [199, 200], "9": [199, 200, 201, 202, 203, 204, 207, 208, 213, 214, 217, 218, 223, 224, 225, 226, 652, 658, 660, 676, 677], "57": [199, 200], "69": [199, 200, 676], "acosh": [199, 200, 1615], "repres": [199, 200, 652, 660, 675], "area": [199, 200, 245, 670, 688, 1615], "hyperbol": [199, 200], "sector": [199, 200, 245], "10": [199, 200, 203, 204, 217, 218, 245, 649, 652, 658, 660, 662, 667, 673, 675, 676], "32": [199, 200, 217, 218, 660, 676], "99": [199, 200, 203, 204], "add": [199, 200, 215, 216, 229, 230, 649, 650, 651, 653, 654, 655, 657, 659, 660, 661, 663, 664, 666, 667, 670, 673, 675, 690, 1615, 1621], "first": [199, 200, 201, 202, 209, 210, 217, 218, 219, 220, 221, 222, 244, 245, 649, 650, 652, 655, 658, 660, 662, 663, 665, 666, 667, 673, 675, 676, 678], "second": [199, 200, 203, 204, 209, 210, 221, 222, 246, 649, 658, 660, 661, 662, 670, 675], "compat": [199, 200, 209, 210, 213, 214, 219, 220, 225, 226, 245, 654, 655, 656, 673, 690, 1615], "wise": [199, 200, 209, 210], "sum": [199, 200, 201, 202, 225, 226, 663, 667, 668, 670, 673], "determin": [199, 200, 209, 210, 244, 657, 662, 663, 667, 668, 669], "z": [199, 200, 201, 202, 209, 210, 211, 212, 217, 218, 658, 664, 667, 673, 675], "7": [199, 200, 201, 202, 203, 204, 207, 208, 211, 212, 213, 214, 217, 218, 223, 224, 225, 226, 650, 652, 658, 660, 663, 667, 670], "asin": [199, 200, 1615], "sine": [199, 200], "8": [199, 200, 201, 202, 211, 212, 213, 214, 217, 218, 223, 224, 225, 226, 649, 652, 658, 660, 667, 672, 676, 1615], "927": [199, 200], "12": [199, 200, 217, 218, 649, 658, 660, 667], "asinh": [199, 200, 1615], "82": [199, 200], "atan": [199, 200, 1615], "tangent": [199, 200, 657], "785": [199, 200], "464": [199, 200], "atan2": [199, 200, 1615], "coordin": [199, 200], "quotient": [199, 200], "245": [199, 200], "14": [199, 200, 217, 218, 652, 658, 660, 667], "atanh": [199, 200, 1615], "549": [199, 200], "47": [199, 200, 217, 218], "bitwise_and": [199, 200], "integ": [199, 200, 213, 214, 217, 218, 225, 226, 650, 660, 662, 665, 667, 673, 675], "bitwise_invert": [199, 200], "bitiwse_invert": [199, 200], "bitwise_left_shift": [199, 200], "bitwise_or": [199, 200], "bitwise_right_shift": [199, 200], "bitwise_xor": [199, 200], "ceil": [199, 200, 1615], "round": [199, 200, 244, 245, 246, 649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 676, 677, 678, 689, 1615], "co": [199, 200, 245, 668, 673, 689, 1615], "express": [199, 200, 657, 671, 673, 678], "radian": [199, 200, 657], "54": [199, 200, 658], "416": [199, 200], "cosh": [199, 200, 1615], "angl": [199, 200, 689], "76": [199, 200], "23": [199, 200, 217, 218, 673], "03": [199, 200], "81": [199, 200], "divid": [199, 200, 201, 202, 213, 214, 658, 666, 667], "dividend": [199, 200], "divisor": [199, 200, 203, 204, 225, 226], "mai": [199, 200, 223, 224, 246, 649, 650, 660, 661, 667, 670, 674, 675, 677], "375": [199, 200], "erf": [199, 200], "comput": [199, 200, 201, 202, 203, 204, 209, 210, 211, 212, 225, 226, 245, 246, 649, 660, 661, 663, 667, 673, 676, 690, 1614], "exponenti": [199, 200], "gauss": [199, 200], "error": [199, 200, 246, 649, 650, 655, 656, 658, 660, 666, 669, 671, 675, 690], "exp": [199, 200, 1615], "evalu": [199, 200, 650, 667], "expm1": [199, 200], "244": [199, 200], "918": [199, 200], "48": [199, 200], "_": [199, 200, 652, 657, 660, 665, 667, 670, 676], "147": [199, 200], "floor": [199, 200, 1615], "floor_divid": [199, 200], "13": [199, 200, 201, 202, 207, 208, 217, 218, 658, 660, 667], "greater": [199, 200, 217, 218, 650], "15": [199, 200, 217, 218, 649, 658, 660], "greater_equ": [199, 200], "isfinit": [199, 200, 660], "test": [199, 200, 246, 649, 651, 653, 658, 671, 690], "out_i": [199, 200], "self_i": [199, 200], "finit": [199, 200], "inf": [199, 200, 660], "isinf": [199, 200], "either": [199, 200, 649, 650, 652, 657, 658, 660, 663, 664, 667, 668, 669, 670, 673, 676, 690], "neg": [199, 200, 213, 214, 217, 218, 663, 667, 670], "isnan": [199, 200], "less": [199, 200, 217, 218, 225, 226, 245, 650, 655, 658, 667, 670, 672, 673], "less_equ": [199, 200], "24": [199, 200, 201, 202, 676], "log": [199, 200, 650, 658, 663, 667, 670, 673, 676, 1615], "log10": [199, 200], "logarithm": [199, 200], "602": [199, 200], "699": [199, 200], "log1p": [199, 200], "693": [199, 200], "001": [199, 200, 215, 216, 676, 677], "0953": [199, 200], "log2": [199, 200], "logaddexp": [199, 200], "logical_and": [199, 200, 1615], "logical_not": [199, 200, 1615], "logical_or": [199, 200, 1615], "conform": [199, 200, 657], "api": [199, 200, 243, 244, 649, 650, 653, 655, 657, 658, 660, 661, 662, 663, 665, 666, 668, 669, 670, 672, 674, 676, 690, 1614, 1615, 1621], "standard": [199, 200, 215, 216, 217, 218, 225, 226, 243, 653, 654, 655, 657, 659, 660, 666, 667, 670, 690, 1615, 1621], "http": [199, 200, 649, 657], "org": [199, 200, 657], "latest": [199, 200, 649, 650, 651, 652, 657, 690], "extens": [199, 200, 649, 657, 660], "api_specif": [199, 200, 657], "gener": [199, 200, 202, 203, 204, 217, 218, 229, 230, 649, 650, 651, 652, 653, 654, 655, 657, 658, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 689, 690, 1614, 1615], "signatur": [199, 200, 245, 654, 655, 657, 658, 660, 668, 669, 670], "elementwise_funct": [199, 200, 657], "html": [199, 200, 245, 652, 657], "noqa": [199, 200], "both": [199, 200, 650, 655, 656, 657, 658, 660, 661, 662, 663, 667, 669, 670, 673, 675, 676, 677, 678, 689, 690], "descript": [199, 200, 657, 660], "hint": [199, 200, 651, 654, 655, 657, 661, 663, 666, 670, 671], "assum": [199, 200, 657, 660, 662, 664, 668, 675, 676, 690], "simplic": [199, 200, 657, 677, 689], "nestabl": [199, 200, 653, 657, 658, 660, 670, 1614], "therefor": [199, 200, 244, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 673, 675, 677, 690], "logical_xor": [199, 200], "multipli": [199, 200, 201, 202, 650, 658, 664, 666, 667], "product": [199, 200, 201, 202, 209, 210, 673], "not_equ": [199, 200], "pow": [199, 200], "expon": [199, 200], "remaind": [199, 200, 213, 214], "sign": [199, 200, 245, 649, 673, 678], "respect": [199, 200, 203, 204, 650, 651, 655, 656, 658, 660, 666, 667, 668, 671], "x2_i": [199, 200], "11": [199, 200, 201, 202, 207, 208, 209, 210, 217, 218, 658, 660, 667], "18": [199, 200, 217, 218, 658, 667], "94": [199, 200, 203, 204, 217, 218], "256": [199, 200], "0001": [199, 200], "36": [199, 200], "37": [199, 200], "67": [199, 200, 201, 202, 667], "45": [199, 200, 660], "678": [199, 200], "16": [199, 200, 209, 210, 217, 218, 650, 658, 660, 676], "25": [199, 200, 201, 202, 209, 210, 211, 212, 217, 218, 667], "33": [199, 200, 215, 216, 217, 218, 225, 226], "sin": [199, 200, 666, 673, 1615], "841": [199, 200], "909": [199, 200], "141": [199, 200], "sinh": [199, 200, 1615], "63": [199, 200], "232": [199, 200], "51": [199, 200], "sqrt": [199, 200], "squar": [199, 200, 209, 210, 660], "root": [199, 200, 649, 650, 652, 676], "subtract": [199, 200, 658, 666, 667], "differ": [199, 200, 244, 245, 246, 649, 650, 651, 653, 654, 655, 657, 658, 660, 661, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 690, 1615], "tan": [199, 200, 655, 657, 661, 663, 667, 670, 673, 1615], "56": [199, 200, 217, 218, 658], "19": [199, 200, 217, 218, 658], "tanh": [199, 200, 673, 1615], "762": [199, 200], "964": [199, 200], "trunc": [199, 200], "elementwis": [200, 654, 663, 673], "arraywithgener": [201, 675], "all_equ": [201, 202], "equality_matrix": [201, 202], "compar": [201, 202, 223, 224, 658, 660, 662, 671, 676], "matrix": [201, 202, 209, 210], "clip_matrix_norm": [201, 202], "max_norm": [201, 202], "p": [201, 202, 649, 650, 653], "maximum": [201, 202, 203, 204, 213, 214, 219, 220, 650, 658, 676, 1615], "norm": [201, 202, 216, 654, 1615], "downscal": [201, 202], "max": [201, 202, 225, 226], "need": [201, 202, 213, 214, 246, 649, 650, 651, 652, 654, 657, 658, 659, 661, 662, 663, 666, 667, 668, 670, 673, 675, 676, 689, 690], "894": [201, 202], "79": [201, 202], "clip_vector_norm": [201, 202], "vector": [201, 202, 209, 210, 689], "cumprod": [201, 202, 661, 678], "exclus": [201, 202, 203, 204, 660, 661, 663, 667, 678], "along": [201, 202, 211, 212, 213, 214, 217, 218, 219, 220, 223, 224, 225, 226, 654, 658, 670, 673], "take": [201, 202, 246, 648, 649, 650, 651, 657, 658, 660, 662, 667, 668, 669, 673, 675, 677, 678, 690, 1615, 1621], "cumul": [201, 202, 689], "exclud": [201, 202, 658, 673], "120": [201, 202], "einops_rearrang": [201, 202], "pattern": [201, 202, 246, 657, 668], "axes_length": [201, 202], "re": [201, 202, 243, 244, 245, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 675, 678, 690, 1615], "arrang": [201, 202], "rearrang": [201, 202], "addit": [201, 202, 215, 216, 649, 650, 654, 657, 658, 660, 661, 667, 668, 675, 676, 678], "specif": [201, 202, 244, 650, 651, 653, 655, 656, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 673, 674, 675, 677, 678, 689, 690, 1614, 1615, 1621], "new": [201, 202, 203, 204, 213, 214, 215, 216, 244, 245, 246, 648, 649, 650, 651, 652, 653, 654, 657, 658, 660, 665, 667, 668, 670, 672, 675, 678, 689, 1614, 1615], "einop": [201, 202, 245], "been": [201, 202, 217, 218, 650, 655, 657, 660, 663, 664, 667, 668, 669, 671, 673, 675, 689, 690, 1614], "einops_reduc": [201, 202], "reduct": [201, 202, 660, 668, 675, 1615], "reduc": [201, 202, 209, 210, 219, 220, 225, 226, 673, 675], "callabl": [201, 202, 656, 660, 673], "One": [201, 202, 213, 214, 217, 218, 658, 660, 662, 668, 673, 675, 676], "avail": [201, 202, 244, 649, 650, 657, 661, 667, 669, 690], "min": [201, 202, 225, 226], "mean": [201, 202, 207, 208, 217, 218, 225, 226, 649, 650, 653, 656, 658, 660, 663, 667, 668, 669, 670, 673, 675, 676, 677, 678, 689, 690, 1614, 1615], "prod": [201, 202, 225, 226, 658, 668, 673], "einops_repeat": [201, 202], "repeat": [201, 202, 213, 214, 650, 657, 658, 660, 664, 666, 668, 671], "gather": [201, 202], "indic": [201, 202, 207, 208, 213, 214, 215, 216, 219, 220, 223, 224, 652, 655, 661, 671, 678, 1615], "gather_nd": [201, 202, 1615], "cuda": [201, 202, 217, 218, 673, 690, 1614], "cpu": [201, 202, 217, 218, 650, 669, 690], "etc": [201, 202, 217, 218, 229, 230, 246, 649, 650, 651, 654, 655, 658, 660, 662, 666, 667, 668, 673, 675, 676, 690, 1614], "given": [201, 202, 211, 212, 213, 214, 217, 218, 245, 246, 649, 650, 651, 652, 654, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 675, 677, 689], "has_nan": [201, 202], "include_inf": [201, 202], "inplace_decr": [201, 202], "val": [201, 202, 670, 675], "decrement": [201, 202], "defin": [201, 202, 209, 210, 649, 651, 654, 655, 657, 660, 668, 675, 677, 690, 1614], "follow": [201, 202, 203, 204, 244, 245, 649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 690, 1615], "stable_divid": [201, 202, 663], "denomin": [201, 202, 215, 216, 663, 668, 690], "min_denomin": [201, 202], "divis": [201, 202, 203, 204, 663], "minimum": [201, 202, 213, 214, 219, 220, 1615], "global": [201, 202, 215, 216, 663, 664, 668, 669, 673], "_min_denomin": [201, 202], "numpi": [201, 202, 244, 245, 650, 651, 655, 656, 659, 660, 661, 662, 664, 668, 669, 670, 673, 675, 678, 1614, 1615], "to_list": [201, 202, 1615], "represent": [201, 202, 689], "to_numpi": [201, 202, 676, 1615], "unstack": [201, 202, 667, 673, 676, 1615], "keepdim": [201, 202, 209, 210, 219, 220, 225, 226, 671, 673], "unpack": [201, 202, 660, 671], "keep": [201, 202, 649, 650, 656, 659, 660, 667, 668, 676, 678], "arraywithgradi": [203, 675], "adam_step": [203, 204], "mw": [203, 204, 677], "vw": [203, 204, 677], "step": [203, 204, 246, 649, 650, 652, 658, 664, 666, 667, 668, 669, 673, 676, 677, 678, 689, 1615], "beta1": [203, 204, 677], "beta2": [203, 204, 677], "999": [203, 204, 677], "epsilon": [203, 204, 211, 212, 215, 216, 663, 667, 670, 677], "1e": [203, 204, 211, 212, 215, 216, 662, 663, 667, 670, 677, 678, 1615], "07": [203, 204, 211, 212, 677], "cost": [203, 204], "c": [203, 204, 207, 208, 225, 226, 243, 245, 246, 648, 649, 653, 658, 663, 667, 672, 673, 674, 676, 690, 1614, 1615, 1621], "weight": [203, 204, 663, 667, 673, 677, 678], "w": [203, 204, 207, 208, 673, 676, 677], "dc": [203, 204], "dw": [203, 204], "run": [203, 204, 649, 652, 655, 658, 660, 661, 662, 664, 671, 673, 674, 675, 676, 677, 678, 689, 690], "averag": [203, 204], "moment": [203, 204, 651, 664, 690], "train": [203, 204, 246, 663, 667, 669, 676, 677, 678, 688, 689, 690, 1614, 1615], "forget": [203, 204], "factor": [203, 204, 207, 208, 209, 210, 245], "dure": [203, 204, 225, 226, 649, 663, 665, 667, 668, 669, 670, 690], "adam": [203, 204, 676, 677, 678, 1615], "updat": [203, 204, 649, 650, 651, 652, 653, 655, 658, 659, 665, 666, 667, 668, 673, 675, 676, 678, 690], "prevent": [203, 204, 650, 670, 671], "delta": [203, 204], "dcdw": [203, 204], "adam_step_delta": [203, 204], "182": [203, 204], "adam_upd": [203, 204, 677], "lr": [203, 204, 676, 677], "mw_tm1": [203, 204], "vw_tm1": [203, 204], "stop_gradi": [203, 204, 677, 1615], "learn": [203, 204, 244, 245, 649, 651, 653, 663, 672, 689, 1614, 1615], "rate": [203, 204], "rel": [203, 204, 213, 214, 223, 224, 650, 652, 662, 1615], "previou": [203, 204, 650, 655, 660, 661, 678, 690], "time": [203, 204, 221, 222, 244, 245, 246, 649, 650, 651, 655, 656, 658, 660, 663, 667, 668, 670, 673, 676, 678, 690], "stop": [203, 204, 673, 690], "after": [203, 204, 215, 216, 650, 651, 655, 658, 659, 660, 661, 668, 672], "ws_new": [203, 204], "gradient_descent_upd": [203, 204, 1615], "inplac": [203, 204, 653, 655, 658, 665, 666, 675, 677], "perform": [203, 204, 246, 654, 655, 658, 660, 662, 663, 664, 666, 667, 669, 670, 673, 676, 690], "handl": [203, 204, 653, 655, 660, 661, 662, 663, 665, 667, 668, 669, 670, 677], "behind": [203, 204, 650, 653, 660, 672, 674], "scene": [203, 204, 243, 244, 653, 672, 674, 1615], "pytorch": [203, 204, 245, 246, 651, 655, 661, 662, 663, 668, 669, 670, 673, 678, 690, 1614, 1615], "graph": [203, 204, 246, 663, 667, 674, 690, 1614], "e": [203, 204, 217, 218, 223, 224, 225, 226, 245, 246, 648, 650, 652, 653, 659, 660, 667, 673, 676, 690, 1614], "higher": [203, 204, 672, 673, 678, 690], "order": [203, 204, 223, 224, 244, 649, 650, 651, 652, 654, 655, 657, 658, 661, 662, 664, 666, 667, 668, 669, 670, 676, 678, 690], "optim": [203, 204, 246, 670, 674, 676, 678, 689, 1615], "provid": [203, 204, 219, 220, 225, 226, 244, 649, 650, 655, 657, 658, 660, 663, 666, 667, 668, 669, 670, 675, 677, 689, 690], "descent": [203, 204, 677], "new_weight": [203, 204, 676], "95": [203, 204, 217, 218], "98": [203, 204, 217, 218], "97": [203, 204], "96": [203, 204], "is_vari": [203, 204, 670, 675], "rather": [203, 204, 245, 650, 654, 657, 660, 667, 668, 670, 678, 690], "than": [203, 204, 217, 218, 221, 222, 225, 226, 245, 650, 654, 658, 660, 661, 662, 667, 668, 670, 673, 676, 677, 678, 690], "For": [203, 204, 244, 245, 246, 649, 650, 651, 652, 653, 654, 655, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 676, 677, 678, 689, 690], "like": [203, 204, 245, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 665, 668, 669, 670, 672, 673, 675, 676, 677, 678, 689, 690, 1615], "jax": [203, 204, 245, 246, 650, 651, 655, 656, 660, 661, 662, 664, 668, 669, 670, 673, 675, 678, 690, 1615], "do": [203, 204, 246, 649, 650, 651, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 676, 677, 678, 690, 1614], "flag": [203, 204, 650, 668, 670], "trainabl": [203, 204, 657, 674, 676, 677], "is_var": [203, 204], "lamb_upd": [203, 204], "max_trust_ratio": [203, 204], "decay_lambda": [203, 204], "trust": [203, 204], "ratio": [203, 204], "decai": [203, 204], "lamb": [203, 204, 677], "784": [203, 204], "78": [203, 204], "05": [203, 204, 215, 216, 660, 662], "02": [203, 204, 217, 218], "01": [203, 204, 215, 216, 649, 678], "5e": [203, 204], "04": [203, 204], "0e": [203, 204], "lars_upd": [203, 204], "lar": [203, 204, 677], "optimizer_upd": [203, 204], "effective_grad": [203, 204], "effect": [203, 204, 225, 226, 245, 651, 655, 657, 666, 667, 670, 690], "3e": [203, 204], "preserve_typ": [203, 204], "preserv": [203, 204, 660, 678, 690], "inform": [203, 204, 649, 650, 660, 667, 671], "variable_data": [203, 204], "intern": [203, 204, 657, 660, 666, 667, 669, 670], "gradient": [204, 654, 676, 677, 689, 690, 1615], "arraywithimag": [205, 675], "imag": [206, 207, 208, 649, 652, 654, 673, 674, 676, 678, 689, 1615], "arraywithlay": [207, 675], "conv1d": [207, 208], "filter": [207, 208, 652, 660], "stride": [207, 208], "pad": [207, 208], "data_format": [207, 208], "nwc": [207, 208], "dilat": [207, 208], "batch_siz": [207, 208, 217, 218, 676], "d_in": [207, 208], "convolut": [207, 208], "fw": [207, 208, 660, 662], "d_out": [207, 208], "slide": [207, 208], "window": [207, 208, 650, 652], "valid": [207, 208, 658, 660, 661, 662, 668], "algorithm": [207, 208, 690], "per": [207, 208, 650, 660, 676], "ncw": [207, 208], "wio": [207, 208], "20": [207, 208, 217, 218, 675], "depthwise_conv2d": [207, 208, 1615], "nhwc": [207, 208], "h": [207, 208, 653, 667], "d": [207, 208, 245, 246, 648, 649, 653, 667, 676, 1615, 1621], "fh": [207, 208], "nchw": [207, 208], "randint": [207, 208, 217, 218, 1615], "255": [207, 208], "128": [207, 208], "random_norm": [207, 208, 217, 218, 660], "std": [207, 208, 217, 218, 225, 226, 658], "64": [207, 208, 649, 660, 676, 677, 1615], "layer": [208, 215, 216, 244, 654, 657, 673, 674, 677, 1615], "linear_algebra": [209, 210, 654], "arraywithlinearalgebra": [209, 675], "choleski": [209, 210], "symmetr": [209, 210, 667], "definit": [209, 210, 650, 663, 668, 675], "u": [209, 210, 245, 648, 649, 650, 654, 660, 662, 667, 670, 677, 690, 1615], "l": [209, 210, 650, 653], "625": [209, 210], "cross": [209, 210, 211, 212, 1615], "vif": [209, 210], "last": [209, 210, 211, 212, 213, 214, 223, 224, 246, 650, 658, 660, 662, 664, 671, 673, 690], "det": [209, 210], "offset": [209, 210, 215, 216], "axis1": [209, 210, 213, 214], "axis2": [209, 210], "eigh": [209, 210], "namedtupl": [209, 210, 221, 222], "eigvalsh": [209, 210], "inv": [209, 210, 1615], "matmul": [209, 210, 654, 660, 664, 673, 1615], "matrix_norm": [209, 210], "ord": [209, 210], "fro": [209, 210], "matrix_rank": [209, 210], "rtol": [209, 210, 662], "matrix_transpos": [209, 210, 675], "outer": [209, 210], "pinv": [209, 210, 1615], "qr": [209, 210], "mode": [209, 210, 649, 650, 658, 667, 690], "solv": [209, 210, 674, 689], "svd": [209, 210, 1615], "full_matric": [209, 210], "svdval": [209, 210], "tensordot": [209, 210], "ax": [209, 210, 213, 214, 219, 220, 225, 226, 654, 658, 660, 668, 673, 675], "trace": [209, 210, 673, 690, 1614], "vecdot": [209, 210], "vector_norm": [209, 210], "vector_to_skew_symmetric_matrix": [209, 210, 1615], "arraywithloss": [211, 675], "binary_cross_entropi": [211, 212], "pred": [211, 212, 663, 667, 670], "label": [211, 212, 650, 672, 673, 674, 678], "predict": [211, 212], "amount": [211, 212, 669], "smooth": [211, 212], "calcul": [211, 212, 225, 226, 245, 657, 673], "binari": [211, 212], "entropi": [211, 212], "between": [211, 212, 213, 214, 244, 655, 658, 660, 662, 663, 666, 667, 672, 674, 675, 676, 678, 689, 1615], "distribut": [211, 212, 217, 218, 651, 660, 669, 690], "357": [211, 212], "223": [211, 212], "cross_entropi": [211, 212, 663, 667, 670], "3862944": [211, 212], "sparse_cross_entropi": [211, 212], "logit": [211, 212], "spars": [211, 212], "loss": [212, 654, 663, 676, 677, 678, 1615], "arraywithmanipul": [213, 675], "clip": [213, 214, 663, 667, 670, 676, 678, 1615], "x_min": [213, 214, 678], "x_max": [213, 214, 678], "roll": [213, 214, 655, 667], "replac": [213, 214, 217, 218, 245, 650, 652, 658, 660, 665, 667, 668, 669, 675, 678, 690], "those": [213, 214, 244, 649, 650, 651, 660, 665, 667], "concat": [213, 214, 661, 673, 1615], "constant_pad": [213, 214], "pad_width": [213, 214], "expand_dim": [213, 214, 673, 676, 1615], "expand": [213, 214, 667], "size": [213, 214, 217, 218, 219, 220, 660, 662, 676], "one": [213, 214, 219, 220, 221, 222, 245, 246, 649, 650, 651, 655, 658, 660, 661, 663, 665, 666, 667, 668, 670, 671, 672, 675, 676, 678, 690, 1615], "ad": [213, 214, 245, 649, 650, 651, 654, 655, 657, 658, 660, 661, 663, 665, 666, 667, 668, 670, 673, 677, 690], "ha": [213, 214, 221, 222, 225, 226, 244, 245, 246, 650, 656, 657, 658, 660, 661, 662, 663, 664, 665, 668, 669, 671, 673, 675, 677, 678, 689, 690], "rank": [213, 214], "flip": [213, 214, 661, 675, 676, 678, 1615], "permute_dim": [213, 214], "reshap": [213, 214, 660, 670, 673, 675, 678, 1615], "nativeshap": [213, 214, 217, 218], "sequenc": [213, 214, 658, 660, 661, 668, 671, 689], "origin": [213, 214, 246, 650, 661, 664, 665, 668, 673], "In": [213, 214, 244, 246, 649, 650, 651, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 675, 676, 677, 678, 689, 690, 1615], "length": [213, 214, 660, 662, 671, 676], "remain": [213, 214, 650, 654, 658, 690], "never": [213, 214, 650, 660], "rais": [213, 214, 217, 218, 245, 650, 656, 670, 671, 673, 675], "valueerror": [213, 214], "would": [213, 214, 245, 649, 650, 652, 653, 655, 657, 658, 659, 660, 664, 665, 666, 667, 670, 672, 673, 675, 677, 678, 690, 1615], "necessari": [213, 214, 649, 650, 658, 660, 664, 667, 670], "reus": [213, 214, 660], "exist": [213, 214, 244, 245, 649, 651, 652, 656, 657, 658, 659, 660, 661, 663, 664, 665, 670, 673, 690, 1614], "memori": [213, 214, 669, 670, 673, 688, 690, 1615], "buffer": [213, 214, 690], "possibl": [213, 214, 245, 648, 649, 650, 651, 657, 658, 660, 667, 668, 670, 673, 676, 689, 690], "shift": [213, 214, 650, 655, 658], "toward": [213, 214, 649, 673, 1615, 1621], "larger": [213, 214, 225, 226, 660], "smaller": [213, 214, 650, 673], "flatten": [213, 214, 219, 220, 221, 222], "restor": [213, 214], "split": [213, 214, 648, 650, 672, 673, 690, 1615], "num_or_size_split": [213, 214, 673], "with_remaind": [213, 214], "sub": [213, 214, 650, 651, 653, 660, 661, 667, 675, 676, 677, 1615], "mani": [213, 214, 244, 245, 246, 649, 650, 651, 655, 657, 658, 660, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 690], "dimension": [213, 214, 219, 220, 225, 226, 673], "tensor": [213, 214, 217, 218, 244, 654, 655, 656, 661, 663, 664, 666, 668, 669, 670, 673, 675, 676, 678, 690, 1614, 1615], "doe": [213, 214, 245, 650, 652, 653, 654, 655, 657, 658, 660, 661, 662, 663, 664, 668, 670, 673, 675, 676, 690, 1614], "evenli": [213, 214], "entri": [213, 214], "squeez": [213, 214, 1615], "stack": [213, 214, 673, 1615], "swapax": [213, 214], "axis0": [213, 214], "tile": [213, 214, 1615], "rep": [213, 214], "zero_pad": [213, 214, 1615], "manipul": [214, 244, 654, 673, 678, 689], "arraywithnorm": [215, 675], "layer_norm": [215, 216], "normalized_idx": [215, 216], "scale": [215, 216, 661], "new_std": [215, 216], "normal": [215, 216, 217, 218, 676], "small": [215, 216, 658, 662, 663, 673, 677, 690], "constant": [215, 216, 654, 663, 677, 678, 690], "_min_bas": [215, 216], "learnabl": [215, 216, 678], "gamma": [215, 216], "post": [215, 216, 649, 678, 1615, 1621], "multipl": [215, 216, 225, 226, 246, 650, 658, 663, 667, 673, 690], "beta": [215, 216], "deviat": [215, 216, 217, 218, 246, 660], "0976": [215, 216], "3452": [215, 216], "2740": [215, 216], "1047": [215, 216], "5886": [215, 216], "2732": [215, 216], "7696": [215, 216], "7024": [215, 216], "2518": [215, 216], "576": [215, 216], "292": [215, 216], "581": [215, 216], "891": [215, 216], "579": [215, 216], "931": [215, 216], "arraywithrandom": [217, 675], "multinomi": [217, 218], "population_s": [217, 218], "num_sampl": [217, 218], "unnorm": [217, 218, 660], "probabl": [217, 218, 246, 660], "popul": [217, 218, 225, 226, 660, 668, 669, 673], "uniform": [217, 218, 677], "batch_shap": [217, 218, 673, 675], "draw": [217, 218, 660, 662], "sampl": [217, 218, 225, 226, 660], "independ": [217, 218, 658, 659, 665, 673, 678], "onc": [217, 218, 246, 649, 650, 658, 660, 667, 668, 669, 673, 676, 690], "thei": [217, 218, 649, 650, 651, 653, 654, 658, 660, 663, 665, 667, 668, 669, 670, 671, 675, 676, 677, 678, 690, 1615], "ve": [217, 218, 650, 672, 675, 1614, 1615], "drawn": [217, 218, 660], "parameter": [217, 218], "high": [217, 218, 246, 651, 676, 1614], "highest": [217, 218], "g": [217, 218, 246, 653, 660, 667, 673, 690, 1614], "onli": [217, 218, 244, 648, 649, 650, 651, 654, 655, 656, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 676, 677, 678, 688, 690, 1615], "low": [217, 218, 673], "els": [217, 218, 650, 651, 654, 656, 662, 663, 664, 670, 673, 675, 677, 678, 690], "except": [217, 218, 650, 656, 657, 666, 670, 671, 673, 675, 690], "singl": [217, 218, 246, 650, 654, 655, 658, 660, 663, 665, 667, 670, 673, 676, 677, 678, 690], "half": [217, 218], "open": [217, 218, 244, 245, 246, 648, 649, 650, 652, 657, 689, 1615], "interv": [217, 218, 650], "int8": [217, 218, 660, 668], "int16": [217, 218, 660, 668, 673], "46": [217, 218], "44": [217, 218], "72": [217, 218], "235": [217, 218], "27": [217, 218], "22": [217, 218, 667], "float16": [217, 218, 660, 661, 668], "26": [217, 218], "49": [217, 218], "807": [217, 218], "21": [217, 218], "random_uniform": [217, 218, 660, 669, 677, 1615], "boundari": [217, 218], "86": [217, 218], "89": [217, 218, 660], "06": [217, 218, 660, 676], "53": [217, 218], "shuffl": [217, 218, 1615], "object": [217, 218, 660, 661, 665, 667, 675, 678], "random": [218, 654, 669, 678, 689, 1615], "arraywithsearch": [219, 675], "argmax": [219, 220, 1615], "left": [219, 220, 223, 224, 649, 650, 658, 668, 1615], "correctli": [219, 220, 649, 651, 655, 658, 660, 662, 667, 668, 670, 671, 677, 690], "insert": [219, 220], "appropri": [219, 220, 229, 230, 650, 660, 662, 665], "occurr": [219, 220], "argmin": [219, 220, 1615], "singleton": [219, 220, 225, 226, 673], "accordingli": [219, 220, 225, 226, 661, 671, 673], "across": [219, 220, 651, 655, 658, 660, 663, 667, 668], "nonzero": [219, 220], "yield": [219, 220, 671], "choos": [219, 220, 649, 650, 674, 678], "condit": [219, 220, 658, 689], "arraywithset": [221, 675], "unique_al": [221, 222], "unique_count": [221, 222], "more": [221, 222, 650, 653, 654, 655, 658, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 689, 690, 1615], "uniqu": [221, 222, 244, 660, 661, 662, 663, 667, 690], "count": [221, 222, 658, 676], "field": [221, 222, 689], "name": [221, 222, 649, 650, 651, 652, 654, 655, 656, 657, 658, 660, 661, 662, 668, 671, 673, 676, 678], "uc": [221, 222], "unique_invers": [221, 222], "unique_valu": [221, 222], "arraywithsort": [223, 675], "argsort": [223, 224], "descend": [223, 224], "stabl": [223, 224, 649, 673, 690], "ascend": [223, 224], "stabil": [223, 224], "maintain": [223, 224, 244, 650], "searchsort": [223, 224], "v": [223, 224, 649, 650, 660, 673, 676, 677, 678, 1615], "side": [223, 224, 649, 650], "sorter": [223, 224], "sort": [224, 654], "arraywithstatist": [225, 675], "einsum": [225, 226], "equat": [225, 226], "correct": [225, 226, 650, 651, 653, 655, 663, 667, 668, 669, 671, 1615], "var": [225, 226, 658, 673], "special": [225, 226, 651, 654, 655, 657, 658, 661, 666], "let": [225, 226, 246, 656, 657, 658, 660, 661, 662, 667, 668, 669, 673, 675, 676, 677, 678, 1615], "over": [225, 226, 229, 230, 244, 246, 649, 650, 657, 658, 660, 664, 670, 673, 675, 690], "varianc": [225, 226], "x_i": [225, 226, 657], "propag": [225, 226], "By": [225, 226, 658, 661, 663, 670, 673, 677, 678], "entir": [225, 226, 245, 246, 650, 658, 659, 660, 666, 667, 670, 673, 676, 677, 678, 690], "degre": [225, 226], "freedom": [225, 226, 664], "adjust": [225, 226], "total": [225, 226, 246, 648, 650, 658, 660, 669, 676, 677, 690], "choic": [225, 226, 246, 649, 670, 676], "constitut": [225, 226, 663, 673], "unbias": [225, 226], "commonli": [225, 226, 663], "refer": [225, 226, 649, 650, 655, 660, 661, 662, 663, 668, 690, 1614], "bessel": [225, 226], "wa": [225, 226, 245, 650, 658, 673, 675], "6666665": [225, 226, 676], "08": [225, 226, 649, 660], "667": [225, 226], "statist": [226, 654, 660, 668], "add_ivy_array_instance_method": 229, "cl": [229, 230], "modul": [229, 230, 246, 649, 652, 660, 661, 663, 664, 666, 670, 671, 673, 674, 676, 678, 689, 690, 1615], "to_ignor": [229, 230], "loop": [229, 230, 664, 671, 690], "_wrap_funct": [229, 230, 663, 665], "we": [229, 230, 243, 244, 245, 246, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 665, 666, 667, 668, 670, 671, 673, 674, 675, 676, 677, 678, 689, 690, 1614, 1615, 1621], "want": [229, 230, 245, 648, 649, 650, 659, 660, 665, 676, 677, 678, 690], "don": [229, 230, 246, 649, 650, 651, 660, 668, 677, 690], "t": [229, 230, 245, 246, 649, 650, 651, 652, 658, 660, 665, 668, 673, 675, 676, 677, 678, 690], "As": [229, 230, 244, 649, 650, 655, 656, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 673, 675, 676, 677, 690], "shown": [229, 230, 650, 651, 655, 656, 658, 660, 661, 671, 673, 675, 690], "our": [229, 230, 244, 245, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 667, 668, 671, 672, 675, 676, 677, 678, 690, 1615], "toi": [229, 230], "arrayexampl": [229, 230], "import": [229, 230, 245, 650, 651, 654, 656, 657, 658, 659, 661, 662, 664, 666, 667, 668, 669, 670, 671, 673, 675, 676, 678, 690, 1615, 1621], "pass": [229, 230, 650, 651, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 690], "hasattr": [229, 230, 656], "ml": [243, 245, 246, 648, 672, 673, 674, 676, 677, 678, 689, 1615, 1621], "explos": [243, 245, 1615], "huge": [243, 245, 676, 1615], "tool": [243, 246, 650, 658, 674, 678, 689, 690, 1615], "explod": [243, 244, 1615], "onto": [243, 244, 1615], "why": [243, 245, 650, 655, 670, 675, 1615], "unifi": [243, 245, 666, 673, 690, 1615], "try": [243, 245, 246, 649, 650, 651, 652, 666, 667, 671, 673, 675, 690, 1615], "them": [243, 244, 245, 246, 651, 653, 660, 662, 664, 665, 666, 667, 673, 675, 676, 677, 690, 1614, 1615], "collabor": [243, 244, 245, 1615], "consortium": [243, 245, 1615, 1621], "python": [243, 244, 245, 649, 650, 652, 660, 671, 673, 675, 676, 690, 1614, 1615, 1621], "project": [244, 245, 246, 649, 650, 652, 654, 660, 664, 677, 689, 690], "grown": 244, "consider": [244, 655, 658], "recent": [244, 245, 649, 650, 660], "year": [244, 246, 690, 1615], "especi": [244, 649], "deep": [244, 648, 650, 651, 662, 667, 672, 675, 676, 1615], "seen": [244, 245, 658, 660, 673, 675, 676], "rapidli": 244, "increas": [244, 654], "github": [244, 650, 651, 657, 658, 660], "repo": [244, 245, 246, 649, 650, 659, 673, 675, 676, 677, 678, 689, 1615, 1621], "term": [244, 650, 667, 673, 1614], "These": [244, 245, 246, 650, 651, 655, 657, 658, 660, 661, 662, 663, 667, 668, 670, 673, 674, 676, 677, 678, 690, 1614, 1615, 1621], "written": [244, 649, 654, 655, 657, 660, 661, 666, 670, 673, 675, 678, 690], "while": [244, 245, 649, 650, 658, 660, 664, 670, 671, 675, 677, 678, 690], "wonder": [244, 246, 675], "thing": [244, 245, 246, 649, 650, 651, 660, 664, 675, 676], "research": [244, 689], "develop": [244, 245, 246, 648, 649, 650, 651, 689, 690, 1614, 1615], "consid": [244, 245, 654, 663, 674, 675, 676], "speed": [244, 660], "evolv": 244, "sharabl": 244, "significantli": 244, "hinder": [244, 655], "librari": [244, 245, 246, 661, 678, 688, 690, 1614, 1615], "becom": [244, 246, 650, 658, 667, 690], "outdat": 244, "matter": [244, 658], "month": 244, "rigor": [244, 660], "newest": 244, "version": [244, 245, 246, 649, 650, 657, 661, 662, 668, 673, 1615], "softwar": [244, 245, 649, 650], "pipelin": [244, 666, 678, 1614], "rapid": [244, 245, 649], "prototyp": 244, "vital": [244, 678], "signific": [244, 245, 690], "bottleneck": 244, "futur": [244, 246, 649, 650, 654, 675, 690], "quickli": [244, 246, 649, 650, 676, 677], "obsolet": [244, 246], "user": [244, 245, 649, 650, 652, 653, 660, 661, 664, 665, 667, 670, 672, 673, 690], "constantli": 244, "invent": 244, "wheel": 244, "simultan": [244, 246], "modern": [244, 245], "simpl": [244, 649, 650, 654, 657, 658, 660, 663, 666, 667, 668, 669, 670, 675, 677, 678, 690, 1614], "scalabl": [244, 673], "exactli": [244, 246, 658, 667, 669, 1615, 1621], "common": [244, 651, 656, 658, 663, 665, 667, 668, 669, 671, 690], "ground": [244, 660], "li": 244, "find": [244, 649, 650, 659, 660, 673, 676, 1614, 1615], "essenti": [244, 245, 651, 658, 663, 669], "design": [244, 245, 653, 662, 670, 673, 675, 690], "univers": 244, "abstract": [244, 667, 677, 690], "languag": [244, 246, 673, 1614], "clear": [244, 245, 246, 650, 651, 658, 668, 669, 673, 675], "front": [244, 672, 673, 676, 1615, 1621], "runner": 244, "look": [244, 649, 650, 652, 654, 655, 656, 658, 660, 661, 662, 663, 664, 667, 668, 669, 673, 675, 677, 678, 1615], "littl": [244, 675], "deeper": [244, 650, 653, 672], "core": [244, 649, 651, 669, 678, 1615], "principl": 244, "expos": [244, 673, 677], "almost": [244, 650, 662, 667, 674, 676], "ident": [244, 246, 656, 661, 662, 663, 665, 667, 675, 676, 690, 1614, 1615], "syntax": [244, 245, 671], "There": [244, 649, 650, 651, 658, 659, 661, 662, 663, 666, 667, 668, 671, 673, 676, 690], "wai": [244, 245, 649, 659, 660, 664, 670, 675, 676, 677, 678, 690], "unsurprisingli": [244, 658], "fundament": [244, 673], "consist": [244, 666, 668, 670], "veri": [244, 245, 649, 650, 654, 655, 658, 660, 663, 667, 669, 670, 674, 676, 677, 678, 690, 1615], "similar": [244, 654, 660, 665, 667, 668, 669, 676, 690], "convent": [244, 654, 655, 689], "introduc": [244, 667, 676], "2006": 244, "present": [244, 650, 655, 659, 667, 668, 669, 670, 673], "itself": [244, 649, 650, 655, 661, 667, 670, 677, 689, 690], "cut": 244, "cloth": 244, "adher": [244, 245, 657, 659, 673, 678], "semant": [244, 673, 678], "up": [244, 245, 246, 648, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 689, 690], "hopefulli": [244, 245, 246, 649, 650, 651, 652, 653, 654, 655, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 676, 677, 678, 689], "paint": [244, 673], "pictur": [244, 673], "how": [244, 246, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 675, 676, 677, 678, 689, 690, 1615, 1621], "pleas": [244, 245, 246, 649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 676, 677, 678, 689, 1615], "discuss": [244, 245, 246, 648, 649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 689, 690, 1615], "faq": [244, 245, 246, 673, 675, 676, 677, 678, 689], "reach": [244, 245, 246, 649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 676, 677, 678, 689], "discord": [244, 245, 246, 649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 676, 677, 678, 689, 1615], "you": [244, 245, 246, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 689, 690, 1614, 1615, 1621], "question": [244, 245, 246, 649, 650, 658, 660, 673, 675, 676, 677, 678, 689, 690, 1615], "central": 245, "goal": [245, 651], "being": [245, 246, 649, 650, 655, 658, 660, 665, 666, 667, 668, 669, 670, 671, 673, 676, 689, 690, 1615], "forgiven": 245, "eyebrow": 245, "somehow": 245, "tensorflow": [245, 246, 650, 651, 655, 656, 659, 660, 661, 662, 668, 669, 670, 673, 678, 690, 1614, 1615], "mxnet": [245, 651, 668, 669, 670, 1615], "strong": [245, 690], "industri": 245, "back": [245, 650, 665, 666, 672, 690, 1615, 1621], "momentum": 245, "won": [245, 246, 650, 678], "just": [245, 246, 649, 650, 657, 658, 659, 660, 661, 662, 663, 665, 670, 675, 676, 690], "make": [245, 246, 649, 650, 651, 654, 655, 657, 658, 659, 660, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 678], "problem": [245, 650, 666, 675], "even": [245, 246, 649, 650, 655, 657, 663, 668, 669, 675, 676, 677, 678, 690], "wors": 245, "funni": 245, "comic": 245, "strip": 245, "easi": [245, 649, 650, 662, 663, 667], "feasibl": 245, "space": 245, "howev": [245, 649, 650, 651, 655, 656, 657, 658, 660, 661, 663, 664, 666, 667, 668, 669, 670, 675, 676, 677, 678, 690], "unlik": [245, 658, 667, 670], "charger": 245, "charact": [245, 671], "encod": [245, 676], "instant": [245, 1615], "messag": [245, 650, 658, 671, 673, 675], "much": [245, 649, 650, 654, 666, 667, 668, 670, 673, 675, 676], "mandat": [245, 654, 660, 670], "adopt": [245, 650, 666], "continu": [245, 246, 659, 660, 671, 690], "own": [245, 246, 649, 656, 657, 660, 671, 673, 690, 1614], "call": [245, 650, 652, 654, 655, 657, 658, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 676, 677, 678, 690], "your": [245, 246, 648, 649, 651, 652, 654, 657, 659, 676, 677, 690, 1615], "100": [245, 246, 660, 676, 677, 678, 690, 1615], "despit": [245, 667, 669], "distinct": [245, 649, 657, 667, 670, 672, 1615], "still": [245, 650, 657, 660, 668, 677, 690, 1615], "believ": [245, 650], "share": [245, 658, 660, 662, 663, 664, 667, 673], "bring": [245, 660, 673, 674, 1614], "benefit": [245, 246, 649, 650, 666, 667, 670, 675, 676, 690], "unrel": [245, 650], "what": [245, 246, 650, 653, 655, 657, 658, 660, 665, 667, 671, 672, 673, 675, 676, 677, 678, 689, 690, 1615], "again": [245, 246, 650, 654, 658, 660, 667, 670, 676, 678, 690], "contrari": 245, "bumpi": 245, "road": 245, "allud": [245, 676], "most": [245, 649, 654, 655, 660, 662, 663, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 690], "technologi": 245, "full": [245, 246, 650, 655, 657, 660, 668, 673, 690], "success": 245, "reason": [245, 650, 654, 658, 663, 666, 667, 668, 670, 673, 675], "build": [245, 648, 649, 663, 672, 674, 677, 678, 690, 1614, 1615], "custom": [245, 660, 677], "thank": [245, 676], "interoper": 245, "compon": [245, 673], "bio": [245, 649], "hardwar": [245, 649], "initi": [245, 650, 660, 664, 668, 669, 673], "pcie": 245, "interfac": [245, 675, 678, 690, 1614], "motherboard": 245, "raid": 245, "storag": [245, 676], "virtual": [245, 650, 652], "bluetooth": 245, "wireless": 245, "exchang": 245, "btx": 245, "sata": 245, "connect": [245, 649, 677, 678], "host": [245, 690], "bu": 245, "adapt": 245, "enabl": [245, 649, 650, 660, 661, 663, 665, 666, 667, 670, 672, 674, 676, 678, 690, 1614], "anyon": [245, 648, 690], "websit": 245, "tcp": 245, "ip": 245, "node": [245, 667], "commun": [245, 648, 650, 651, 690, 1615, 1621], "network": [245, 663, 667, 673, 677, 689, 1615], "smtp": 245, "send": 245, "gmail": 245, "outlook": 245, "pop": 245, "email": 245, "ieee": 245, "754": 245, "allow": [245, 650, 651, 660, 661, 662, 665, 673, 675, 690, 1614], "live": [245, 246], "did": [245, 651, 678], "aris": [245, 690], "until": [245, 650, 671, 673, 690, 1615], "substanti": [245, 650, 660, 666], "innov": 245, "growth": 245, "usag": [245, 673, 690], "relev": [245, 649, 650, 651, 658, 667, 668, 676], "necess": 245, "parti": [245, 690], "could": [245, 246, 649, 650, 658, 660, 665, 668, 670, 673, 675, 676, 677], "easili": [245, 650, 661, 676, 677, 678, 690, 1615], "engag": [245, 648, 649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670], "regard": [245, 667], "2015": 245, "sinc": [245, 649, 650, 660, 690], "alongsid": 245, "machin": [245, 649, 663, 689, 1614], "frame": [245, 689], "matur": [245, 690], "state": [245, 655, 657, 660, 672, 673, 674, 676, 689, 1615], "preced": [245, 677], "mention": [245, 649, 650, 655, 658, 663, 670], "aros": 245, "70": 245, "80": 245, "90": 245, "effort": [245, 648, 660, 690], "stage": [245, 648, 650, 652, 653, 671, 1615], "complet": [245, 650, 651, 658, 666, 667, 675, 676], "natur": [245, 658, 666, 689], "certainli": 245, "mission": [245, 1615], "At": [245, 651, 656, 659], "process": [245, 246, 648, 649, 650, 652, 660, 662, 663, 667, 673, 678], "ourselv": 245, "lead": [245, 246, 658, 690], "quansight": 245, "compani": 245, "made": [245, 650, 651, 670, 673, 675], "organ": [245, 654, 663, 666, 667, 1614], "panda": 245, "scipi": 245, "conda": [245, 649, 652], "dask": 245, "apach": 245, "onnx": 245, "scikit": 245, "jupyt": 245, "aw": 245, "cupi": 245, "net": [245, 246, 673, 678], "sympi": 245, "rai": 245, "modin": 245, "spyder": 245, "member": [245, 650], "googl": [245, 1615], "octoml": 245, "further": [245, 246, 650, 652, 658, 660, 666, 672, 676, 677, 1615], "sponsor": 245, "lg": 245, "electron": 245, "microsoft": 245, "shaw": 245, "intel": 245, "togeth": [245, 654, 666, 667, 671, 677, 678, 690], "major": [245, 660, 661, 668, 669, 690], "anoth": [245, 649, 650, 651, 660, 661, 662, 663, 667, 668, 675, 678, 1614], "promis": 245, "pursuit": 245, "unif": [245, 648, 675, 1615, 1621], "clearli": [245, 650, 651, 658, 660], "lot": [245, 246, 665, 668, 690], "thought": [245, 649, 650, 655], "care": [245, 650, 678], "attent": [245, 650, 651, 666], "gone": [245, 672], "simplifi": [245, 673, 674, 677], "excit": [245, 648, 653, 1615], "complianc": 245, "hope": [245, 690], "due": [245, 649, 661, 670], "suit": [245, 649, 653, 659, 660, 676, 689, 1614], "some": [245, 246, 649, 650, 651, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 675, 676, 677, 689, 690, 1614, 1615], "motiv": [245, 675], "great": [245, 246, 650, 660, 673, 675], "convinc": 245, "celebr": 245, "encourag": [245, 689, 690, 1615, 1621], "foundat": 245, "ask": [246, 658, 673, 675, 690, 1615], "perfectli": 246, "happi": [246, 649, 690], "current": [246, 649, 650, 651, 652, 662, 663, 665, 667, 669, 673, 678, 689, 690, 1615], "abund": 246, "better": [246, 653, 656, 661, 662, 671, 672, 675, 676, 677], "ll": [246, 648, 650, 658, 670, 676], "give": [246, 649, 650, 653, 655, 657, 658, 664], "streamlin": 246, "workflow": [246, 650, 651, 676, 688, 1614, 1615], "save": [246, 660, 671, 690], "week": [246, 650, 1615], "sai": [246, 649, 665, 675], "deepmind": 246, "releas": [246, 649, 650, 651, 654, 690, 1615], "awesom": 246, "paper": 246, "love": 246, "perceiverio": 246, "happen": [246, 649, 650, 660, 676], "slew": 246, "rush": 246, "f": [246, 650, 652, 653, 660, 667, 671, 673, 676], "inevit": 246, "often": [246, 660, 663, 671, 690], "erron": 246, "poor": 246, "converg": 246, "issu": [246, 648, 651, 658, 660, 673, 677, 690], "publish": [246, 690], "manag": [246, 648, 670, 690], "get": [246, 648, 649, 651, 653, 660, 662, 663, 665, 668, 669, 670, 673, 674, 675, 676, 677, 1614, 1615, 1621], "work": [246, 649, 650, 651, 653, 658, 659, 660, 661, 668, 669, 672, 673, 675, 677, 678, 1615, 1621], "repositori": [246, 649, 650, 652, 659, 671], "pull": [246, 648, 649, 651, 652, 654, 658, 690], "request": [246, 648, 651, 654, 658], "confus": [246, 670, 1614], "expect": [246, 650, 660, 690, 1615], "codebas": [246, 648, 653, 654, 660, 670, 672, 1615], "hour": 246, "spent": 246, "spin": 246, "off": [246, 649, 672], "address": [246, 650, 651, 666, 673], "sake": 246, "line": [246, 649, 658, 659, 660, 666, 671, 674, 675, 676, 677, 688, 1615, 1621], "directli": [246, 650, 654, 655, 656, 657, 660, 661, 663, 665, 666, 667, 668, 669, 670, 673, 675, 677, 678, 689, 690], "guarante": [246, 666, 690], "turn": [246, 649, 658, 660, 667], "few": [246, 650, 651, 660, 663, 667, 668, 669, 670, 671, 674, 675, 676, 677, 688, 1615, 1621], "automat": [246, 649, 650, 653, 655, 663, 667, 672, 674, 677, 678, 1614, 1615], "everyon": [246, 648, 650, 690], "regardless": [246, 648, 675, 678], "wouldn": [246, 668], "nice": [246, 660], "know": [246, 650, 660], "among": [246, 660], "frantic": 246, "port": 246, "lucid": 246, "honk": 246, "improv": [246, 650, 663, 673, 1614], "understand": [246, 649, 650, 651, 652, 653, 655, 657, 658, 659, 661, 662, 671, 672], "hasn": 246, "now": [246, 649, 652, 654, 655, 660, 665, 667, 668, 671, 675, 676, 678, 689, 690], "spend": 246, "torchvis": 246, "sonnet": 246, "about": [246, 649, 650, 654, 655, 659, 660, 672, 673, 675, 676, 677, 678, 690], "next": [246, 649, 650, 651, 652, 657, 658, 664, 665, 671, 674, 675, 676, 1615], "everyth": [246, 650, 651, 658, 660, 662, 674, 690], "said": 246, "level": [246, 648, 650, 651, 663, 672, 673, 676, 677, 678, 690, 1614], "trainer": [246, 688, 690, 1615], "statu": [246, 651], "quo": 246, "kera": 246, "dopamin": 246, "ignit": 246, "catalyst": 246, "lightn": 246, "fastai": 246, "haiku": [246, 678], "flax": [246, 678, 690], "trax": [246, 678], "objax": [246, 678], "idea": [246, 656, 661, 671, 689], "fulli": [246, 655, 666, 670, 673, 674, 675, 676, 677, 678, 690], "offer": [246, 677], "strongli": [648, 649, 1615, 1621], "welcom": [648, 649, 650, 1615, 1621], "skill": 648, "veteran": 648, "beginn": 648, "start": [648, 649, 650, 651, 652, 653, 657, 658, 661, 668, 672, 673, 675, 676, 677, 689, 690], "aspect": [648, 676, 1615], "guid": [648, 649, 650, 651, 671, 1615], "through": [648, 650, 651, 653, 658, 660, 661, 662, 663, 664, 665, 667, 671, 672, 673, 676, 677, 678, 689], "journei": [648, 1615, 1621], "inclusvi": 648, "big": [648, 690], "team": [648, 649, 650], "board": 648, "contributor": [648, 649, 650, 672, 1615], "section": [648, 650, 651, 653, 654, 655, 657, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 676, 677], "best": [648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671], "go": [648, 649, 650, 651, 653, 654, 658, 661, 662, 672, 676, 690], "finish": [648, 649, 653, 1615], "dive": [648, 650, 651, 662, 667, 672, 675, 676, 690, 1615], "right": [648, 649, 650, 653, 658, 676], "environ": [648, 650, 652, 689], "basic": [648, 651, 652, 658], "fork": [648, 649], "doc": [648, 651, 655, 657, 658, 673, 676, 677, 1615], "document": [648, 650, 658, 660, 661, 662, 676, 678], "local": [648, 649, 652, 659, 663], "task": [648, 650, 689, 1615], "help": [648, 649, 651, 658, 660, 661, 664, 666, 667, 675, 676, 677, 688, 1614, 1615], "video": [648, 650, 654, 655, 657, 658, 660, 661, 663, 664, 665, 666, 667, 668, 669], "realli": [649, 667, 690], "contribut": [649, 650, 651, 673, 1621], "page": [649, 650, 674, 675, 678, 688, 1615, 1621], "explain": [649, 650, 651, 654, 655, 657, 658, 660, 661, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 1615, 1621], "prefer": [649, 659, 661, 665, 667], "git": [649, 650, 660], "submodul": [649, 650, 651, 652, 653, 659, 660, 663, 665, 669, 672, 673, 677, 1614, 1615], "com": 649, "unifyai": [649, 650, 652], "gh": 649, "your_fold": 649, "id": [649, 666, 667, 671], "cours": [649, 650, 658, 676, 690], "whatev": [649, 667, 690], "familiar": [649, 651], "decid": [649, 661], "sure": [649, 650, 651, 659, 660], "elig": 649, "free": [649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 689, 1615], "student": 649, "licenc": 649, "peopl": [649, 650, 653], "seem": [649, 677, 678, 690], "miss": [649, 658, 660, 666, 667, 671], "explicit": [649, 652, 667, 668, 670, 673, 690], "remind": 649, "here": [649, 650, 651, 654, 655, 656, 658, 660, 661, 662, 667, 673, 674, 675, 676, 677, 678, 689, 690], "channel": [649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670], "pace": 649, "suggest": [649, 650, 654, 660], "packag": [649, 652, 661, 671, 690], "ensur": [649, 650, 651, 654, 655, 656, 658, 660, 661, 662, 665, 666, 668, 670, 671], "align": [649, 650, 673, 675, 1614, 1615, 1621], "pypi": [649, 651, 690], "person": [649, 650], "experi": [649, 674, 676, 690], "avoid": [649, 650, 656, 660, 664, 665, 667, 671], "pip": [649, 689, 1615], "instal": [649, 650, 652, 671, 689, 1615], "abil": [649, 674, 690], "certain": [649, 650, 660, 661, 668, 690], "perhap": [649, 675, 676, 677, 690], "track": [649, 650], "termin": [649, 650, 652, 659, 667, 673, 676], "command": [649, 652, 659, 1615], "ivy_dev": [649, 650, 652], "setup": [649, 650], "click": [649, 650, 657, 674, 1615], "icon": [649, 650], "panel": 649, "select": [649, 650, 651, 660, 670, 673, 675, 678, 690], "drop": [649, 690], "down": [649, 660, 1614], "path": [649, 652, 662], "manual": [649, 650, 660, 677], "builtin": [649, 652, 675, 677], "doesn": [649, 652, 658, 660, 668, 673, 690], "requir": [649, 651, 652, 654, 655, 656, 657, 658, 660, 661, 662, 665, 666, 668, 669, 673, 675, 690], "cmd": [649, 652], "directori": [649, 650, 652, 660, 661], "folder": [649, 650, 652, 654, 659, 660, 663], "file": [649, 650, 652, 654, 657, 660, 663, 664, 666, 667, 671, 673, 676], "python3": [649, 650, 652], "script": [649, 650, 652, 658, 673, 690], "bat": [649, 650, 652], "OR": [649, 650, 652], "bin": [649, 650, 652, 659], "mac": [649, 650, 652], "linux": [649, 650, 652], "virtualenv": 649, "found": [649, 650, 657, 665, 666, 667, 670, 671], "o": [649, 653, 673], "note": [649, 650, 651, 654, 657, 658, 660, 661, 662, 668], "tick": [649, 650], "abl": [649, 650, 663, 668, 670, 671, 678], "To": [649, 656, 658, 659, 660, 661, 662, 663, 667, 671, 676, 677, 678, 1615], "ivy_test": [649, 650, 662], "test_array_api": [649, 650, 659, 660], "cd": [649, 650, 652], "r": [649, 650, 653], "txt": 649, "visual": [649, 671, 690], "jetbrain": 649, "remot": 649, "mitig": 649, "potenti": [649, 650, 672], "conflict": [649, 650, 676], "yet": [649, 690], "particular": [649, 650, 654, 656, 658, 660, 661, 662, 665, 668, 670], "system": [649, 650, 690], "jaxlib": [649, 655, 656, 668, 669, 673, 675], "instruct": [649, 651], "desktop": 649, "wsl": 649, "powershel": 649, "admin": 649, "visit": [649, 650], "link": [649, 661], "profession": 649, "execut": [649, 650, 652, 658, 667, 670, 673, 675, 678, 690, 1614], "deploy": 649, "top": [649, 650, 660, 661, 676, 677, 1615], "press": [649, 650, 676, 1615], "ok": 649, "caus": [649, 650, 658, 660, 667, 670, 671, 690], "earlier": [649, 650], "might": [649, 650, 651, 654, 658, 660, 665, 668, 670, 673, 675, 676, 1614], "virtualis": 649, "sudo": 649, "apt": 649, "ca": 649, "certif": 649, "curl": 649, "gnupg": 649, "lsb": 649, "mkdir": 649, "keyr": 649, "fssl": 649, "download": [649, 660], "gpg": 649, "dearmor": 649, "echo": 649, "deb": 649, "arch": 649, "dpkg": 649, "architectur": [649, 678, 690], "lsb_releas": 649, "tee": 649, "null": 649, "ce": 649, "cli": 649, "containerd": 649, "io": 649, "compos": [649, 660, 667, 690], "plugin": 649, "systemctl": 649, "permiss": 649, "relat": [649, 650, 656, 660, 671, 689], "detect": [649, 655, 660, 667, 671, 676, 677], "simplest": [649, 658, 660], "becaus": [649, 650, 655, 657, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 673, 677, 678, 690], "header": [649, 650], "summari": [649, 650, 660], "recommend": [649, 650, 664], "advanc": 649, "bar": 649, "pytest": [649, 650, 660, 662], "checkbox": [649, 651], "q": [649, 650, 653, 690], "fail": [649, 650, 651, 658, 659, 660, 671], "headach": 649, "arm": [649, 650], "m1": 649, "instead": [649, 650, 651, 655, 657, 658, 660, 662, 663, 665, 667, 670, 673, 675, 676, 690], "featur": [649, 650, 654, 655, 661, 676, 690, 1615], "vm": 649, "azur": 649, "cloud": [649, 689], "configur": [649, 650, 652, 668], "dockerfil": [649, 652], "longer": [649, 660, 668, 670], "worri": 649, "platform": 649, "agnost": [649, 655, 666, 673, 675, 678, 690, 1615], "usual": [649, 660, 661], "studio": 649, "favourit": 649, "theme": 649, "too": [649, 650, 651, 671, 690], "done": [649, 650, 658, 660, 671, 676], "unsupport": [649, 661, 671], "old": [649, 670], "slow": 649, "ipad": 649, "long": [649, 650, 658, 673], "browser": 649, "cool": [649, 654], "requisit": 649, "befor": [649, 650, 651, 655, 657, 659, 660, 665, 666, 668, 669, 670, 673, 676, 690], "head": [649, 1615], "pane": [649, 650], "readi": 649, "begin": [649, 659], "outlin": [649, 650, 651, 653, 657, 660, 663, 667, 670], "green": [649, 650], "dropdown": 649, "tab": [649, 676, 1615], "master": [649, 650], "view": [649, 650], "built": [649, 650, 660, 674, 1614], "bottom": 649, "box": 649, "patient": [649, 651], "upto": [649, 650], "minut": 649, "subsequ": [649, 655, 658, 660, 663, 666, 670, 677], "launch": 649, "That": [649, 650, 660, 675, 676, 677], "alreadi": [649, 650, 655, 664, 667, 668, 690, 1615], "previous": [649, 652, 660, 663, 673], "approach": [649, 650, 660, 663, 667, 668, 675, 676, 690], "colour": 649, "applic": [649, 665, 668, 669, 677], "good": [649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 677], "chanc": 649, "vscode": 649, "show": [649, 650, 658, 660, 670, 689, 690, 1615], "explor": [649, 650, 674, 678, 689], "troubleshoot": 649, "sometim": [649, 650, 660, 661], "ever": [649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670], "bit": [649, 658, 660, 663, 667, 673, 675], "usr": 649, "under": [649, 650, 653, 657, 658, 659, 660, 661, 663, 667, 672, 673, 676, 678, 690], "flask": 649, "toolbar": [649, 650], "_array_modul": [649, 659], "py": [649, 650, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 668, 669, 671, 673, 675, 677, 678], "array_api_test": [649, 650, 659], "2022": 649, "conftest": 649, "comment": [649, 650, 651, 659, 671], "via": [649, 650, 654, 667, 668, 669, 670, 673, 675, 676, 689], "refresh": 649, "nutshel": [649, 655], "hook": 649, "lint": 649, "fix": [649, 650], "attempt": [649, 671, 690], "succe": 649, "problemat": 649, "proce": [649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670], "modifi": [649, 650, 651, 654, 657, 663, 668, 669, 671, 673], "properli": [649, 653], "enter": [649, 650, 655, 665, 666, 668, 669], "unsur": [649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670], "feel": [649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 1615], "server": [650, 1615], "context": [650, 658, 660, 668, 669], "suitabl": [650, 654, 667], "quick": [650, 653, 677], "tendenc": 650, "land": 650, "isn": [650, 665, 676, 690], "end": [650, 654, 670, 672, 689, 690, 1615, 1621], "world": 650, "come": [650, 660, 661, 677, 688, 1614, 1615, 1621], "fly": 650, "hard": [650, 675], "receiv": [650, 660, 668, 669], "respons": [650, 652], "internship": 650, "trigger": [650, 651], "unansw": 650, "respond": 650, "remov": [650, 651, 652, 657, 660, 663, 668, 670, 678], "someon": [650, 690], "strive": [650, 660, 690], "repli": 650, "bug": [650, 660], "serv": [650, 655, 660, 663, 666, 667, 672, 1614, 1615], "suspect": 650, "behaviour": [650, 654, 655, 657, 660, 661, 666, 667, 670, 675], "observ": 650, "confid": 650, "noth": 650, "wrong": 650, "someth": [650, 654, 676, 677, 690], "bet": 650, "act": [650, 658, 661, 690], "placehold": [650, 655, 666, 671, 1614], "mark": [650, 651, 660], "ii": 650, "iii": 650, "titl": [650, 1615], "issue_numb": 650, "delet": [650, 652], "No": 650, "wait": 650, "progress": [650, 678], "pr": [650, 651, 659], "soon": [650, 688, 690, 1615, 1621], "partial": 650, "solut": [650, 660, 667], "review": [650, 651, 654, 658], "merg": 650, "move": [650, 654], "dai": 650, "close": [650, 657, 660], "likewis": [650, 655, 657, 663, 667, 668, 676], "associ": [650, 660, 662, 663, 665, 690], "freed": 650, "purpos": [650, 652, 655, 656, 658, 660, 663, 665, 666, 667, 672, 675, 1614, 1615], "access": [650, 651, 652, 661, 668], "prioriti": [650, 670], "short": [650, 673, 677], "basi": [650, 659, 676], "situat": [650, 678], "upon": [650, 658, 660, 670, 690], "period": 650, "unabl": 650, "obvious": 650, "reflect": [650, 660, 666], "qualiti": 650, "hypothet": 650, "frustrat": 650, "delai": 650, "busi": 650, "fine": [650, 658, 675, 678], "inact": 650, "limit": [650, 658, 660, 671, 676, 690], "me": 650, "unfairli": 650, "investig": 650, "primarili": 650, "invit": 650, "roadmap": 650, "mainli": [650, 653, 674, 676, 1614], "fall": [650, 668, 672, 1615], "extend": [650, 654, 655, 657, 664, 690], "ideal": [650, 670, 676], "Such": [650, 660], "describ": [650, 660, 673, 678], "easier": [650, 654, 666, 668, 1614], "regular": 650, "forth": 650, "rare": [650, 669, 690], "scenario": [650, 660], "unfortun": 650, "redund": 650, "well": [650, 660, 661, 670, 677, 678, 689], "Then": [650, 652, 656, 661, 665, 690], "practic": 650, "separ": [650, 660, 662, 666, 667, 671, 673, 675, 676], "branch": [650, 690], "role": [650, 661, 674], "kept": [650, 654, 670], "date": 650, "upstream": [650, 659], "complic": [650, 662, 673], "merge_with_upstream": 650, "sh": [650, 659], "name_of_your_branch": 650, "resolv": [650, 673], "clone": [650, 652], "push": [650, 659, 671], "abort": 650, "tediou": [650, 658], "resolut": 650, "stash": 650, "reinstat": 650, "fetch": 650, "uncommit": 650, "unstag": 650, "untrack": 650, "comprehens": 650, "explan": [650, 655, 657, 661, 667, 675], "atlassian": 650, "tutori": [650, 661], "wrote": 650, "piec": [650, 663, 665, 666, 673], "tag": 650, "navig": [650, 653], "blame": 650, "revis": 650, "author": [650, 651, 1615], "eg": [650, 660], "past": 650, "filepath": 650, "grep": 650, "retriev": 650, "commit_id": 650, "handi": [650, 660], "histori": 650, "toggl": 650, "vertic": 650, "highlight": [650, 658], "whenev": [650, 660, 662, 665, 676], "think": [650, 658], "gain": [650, 672, 677], "quit": [650, 657, 658, 660, 663, 665, 666], "yourself": [650, 651, 660, 689], "simpler": 650, "cannot": [650, 656, 661, 664, 668, 678], "least": [650, 658, 660, 663, 666], "approv": 650, "hash": [650, 676], "detail": [650, 651, 654, 655, 659, 660, 662, 663, 664, 665, 667, 675, 676, 677], "cancel": 650, "speedup": 650, "button": 650, "unavail": 650, "final": [650, 657, 658, 663, 666, 668, 670, 671, 672, 676], "tickbox": 650, "corner": 650, "without": [650, 654, 655, 656, 658, 660, 661, 663, 666, 667, 668, 669, 671, 675, 676, 677, 689, 690], "span": 650, "intent": [650, 670], "larg": [650, 676], "discourag": 650, "philosophi": 650, "increment": 650, "frequent": [650, 651], "valuabl": 650, "infrequ": 650, "earli": [650, 1615], "wast": 650, "spot": [650, 658, 663], "mistak": [650, 671], "propos": 650, "mountain": 650, "around": [650, 655, 663, 666, 675, 690, 1614], "advoc": [650, 690], "individu": [650, 651, 663, 670], "style": 650, "were": [650, 654, 660, 671, 673], "actual": [650, 653, 663, 670, 672, 677, 690], "aim": [650, 660, 672], "subsect": 650, "session": [650, 1615], "block": [650, 660, 663, 671, 672, 674, 678, 690, 1614, 1615], "edit": [650, 651], "exact": [650, 658, 673], "beauti": 650, "particularli": [650, 660, 676, 690], "concern": [650, 653, 658, 667, 670, 672], "effici": [650, 655, 660, 663, 665, 667, 670, 671, 673, 676, 690], "difficult": [650, 660, 690], "undo": 650, "stress": 650, "frequenc": 650, "advantag": 650, "nifti": 650, "reassur": 650, "isol": 650, "bash": [650, 652], "shell": 650, "rm": 650, "structur": [650, 652, 654, 663, 666, 667, 676, 677], "fact": [650, 660, 676], "mount": 650, "local_path_to_ivi": 650, "overwrit": [650, 670, 673], "subfold": [650, 654, 660, 662], "insid": [650, 652, 654, 660, 667, 668], "wide": [650, 660], "dep": 650, "fresh": 650, "arsen": 650, "declar": 650, "exec": 650, "rf": 650, "cp": 650, "ivy_contain": 650, "test_ivi": [650, 660, 662], "test_funct": [650, 660], "test_cor": 650, "test_imag": 650, "test_random_crop": 650, "test_creation_funct": 650, "test_arang": 650, "variou": [650, 655, 657, 660, 665, 689, 1614], "gpu": [650, 669, 675], "combin": [650, 658, 660, 663, 666, 667, 678], "torch": [650, 654, 655, 656, 660, 661, 662, 663, 664, 666, 668, 669, 670, 673, 675, 676, 678, 690, 1614, 1615], "num": [650, 673], "hypothesi": [650, 651, 662], "text": [650, 651, 657, 658], "ctrl": 650, "prompt": [650, 1615], "whole": 650, "cursor": 650, "alt": 650, "j": [650, 653], "locat": [650, 654, 660, 662, 664, 669], "blog": 650, "debug": [650, 660, 667, 676], "breakpoint": 650, "gutter": 650, "caret": 650, "f8": 650, "f9": 650, "Into": 650, "f7": 650, "smart": 650, "sever": [650, 654, 690], "interest": 650, "consol": [650, 675], "fragment": 650, "pychram": 650, "depth": [650, 676, 677, 678, 689], "dummi": 650, "wherein": [650, 660], "failur": [650, 659], "wherebi": 651, "broad": 651, "todo": 651, "commit": [651, 658, 659, 660], "NOT": 651, "static": [651, 657, 658, 663, 665, 690], "revers": [651, 657, 658, 661, 667, 678, 690], "resourc": 651, "content": [651, 652, 661, 670, 673, 676], "cover": [651, 657, 658, 660, 663, 665, 672], "lambda": [651, 673, 676], "direct": [651, 661, 677, 678, 689], "bind": [651, 667], "def": [651, 654, 655, 656, 658, 660, 661, 662, 663, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 1615], "aforement": 651, "categori": [651, 654, 661, 666, 667, 668, 672, 1615], "parent": [651, 675], "containerwithmanipul": 651, "thorough": [651, 655, 657, 660, 662], "produc": [651, 654, 660], "add_reformatting_checklist_": 651, "category_nam": [651, 655, 657, 663, 668, 669], "belong": [651, 677], "autom": [651, 660, 1614, 1615], "bot": 651, "proper": 651, "markdown": 651, "symbol": 651, "emoji": 651, "legend": 651, "stuck": 651, "elabor": 651, "struggl": 651, "assigne": 651, "later": [651, 660], "pai": 651, "face": [651, 673], "refrain": 651, "transpil": [651, 661, 672, 674, 1614, 1615, 1621], "verifi": [651, 656, 660, 668, 669, 1615, 1621], "chosen": 651, "thu": [651, 661], "meanwhil": 651, "complex": [651, 658, 661, 676, 677, 678, 690, 1614], "composit": [651, 653, 660, 662, 664, 666, 667, 670, 673, 677, 678, 690, 1614], "reselect": 651, "builder": [652, 688, 690, 1614, 1615], "maco": 652, "ubuntu": 652, "uid": 652, "make_docs_without_dock": 652, "synchron": 652, "rest": [652, 678], "remove_doc": 652, "privat": [652, 660], "fulfil": [652, 672, 1615], "autogenerated_sourc": 652, "format": [652, 653, 657, 658, 668, 669, 673, 675, 676, 1615], "png": [652, 676], "_imag": 652, "lastli": 652, "rst": 652, "skip": [652, 660], "read": [652, 1615], "partial_sourc": 652, "conf": 652, "create_rst_fil": 652, "overal": [652, 657, 667, 668, 669, 678], "markup": 652, "extract": [652, 654, 656], "get_functions_and_class": 652, "doctr": 652, "readm": [652, 690], "module_nam": 652, "copy_readme_to_rst": 652, "tabl": 652, "toc": 652, "tree": 652, "append": [652, 660, 673, 676], "append_toctree_to_rst": 652, "create_index_rst": 652, "\u03c0": 652, "namespac": [652, 654, 662, 665, 668, 673, 678], "who": [653, 672, 690], "target": [653, 672, 676, 677, 678, 1615], "hood": [653, 658, 660, 663, 667, 672, 673, 676, 678], "weed": [653, 672], "tour": 653, "primari": [653, 660, 664, 670, 690, 1614], "dynam": [653, 668, 669, 670, 673], "runtim": [653, 660], "helper": [653, 662, 676, 1614], "borrow": 653, "frontend": [653, 668, 672, 674, 1614], "taken": [654, 671, 678], "util": [654, 669], "compil": [654, 667, 672, 674, 690, 1614, 1615], "meta": [654, 666], "overlap": 654, "judgement": 654, "some_namespac": 654, "some_backend": 654, "another_backend": 654, "break": [654, 655, 671, 690, 1615], "anyth": [654, 660, 1615], "refactor": 654, "ongo": 654, "__init__": [654, 664, 668, 673, 675, 676, 677, 678, 1615], "file_nam": [654, 660], "my_func": [654, 658], "my": 654, "op": [654, 673, 690], "cooler": 654, "current_backend": [654, 661, 663, 673], "extern": [654, 655, 660], "usabl": [654, 655], "map": [654, 655, 660, 663, 667, 676, 689, 690, 1614], "sole": [654, 655], "flexibl": [654, 655], "forward": [654, 657, 660, 678, 689, 690], "something_cool": 654, "backend_nam": [655, 657, 663, 664, 665, 668, 669], "adress": 655, "conveni": [655, 662, 668, 669, 674, 676, 677, 1614], "revisit": 655, "dedic": [655, 675, 677], "four": [655, 658, 660, 663, 668, 676], "to_native_arrays_and_back": [655, 665, 673], "handle_out_argu": [655, 665, 668, 669, 670, 673], "np": [655, 656, 660, 662, 666, 668, 669, 670, 673, 675, 676, 678, 1614, 1615], "tf": [655, 656, 661, 666, 668, 669, 670, 673, 678, 690, 1614, 1615], "outputs_to_ivy_arrai": [655, 665, 666, 668, 669], "infer_dtyp": [655, 665, 668, 669], "infer_devic": [655, 665, 668, 669], "jnp": [655, 656, 668, 669, 670, 673, 678, 1615], "xla_extens": [655, 656, 668, 669, 673, 675], "jaxarrai": [655, 656, 668, 669, 670, 673], "wherea": [655, 658, 660, 663, 666, 668, 669, 678], "__add__": [655, 657, 658, 666, 667, 675], "__sub__": [655, 658, 666, 667, 675], "__mul__": [655, 658, 666, 667, 675], "__div__": 655, "permit": [655, 660, 666], "dicat": 655, "addition": [655, 667, 670], "omit": [655, 670], "wrapper": [655, 665, 666, 667, 668, 670, 675, 1614], "contrast": [655, 657], "futher": 655, "absenc": [655, 667], "pep": 655, "484": 655, "annot": [655, 671], "dictat": [655, 658, 666, 670], "brittl": 655, "intend": 655, "subset": [655, 657, 660, 673], "freeli": 655, "consum": [655, 660, 662, 667], "inde": [655, 690], "technic": [655, 670, 690], "original_typ": 655, "cumbersom": 655, "readabl": [655, 656, 666, 667, 675, 676], "clean": [656, 671, 673, 674, 676], "_assert_fill_value_and_dtype_are_compat": 656, "assert": [656, 660, 671, 675, 676], "isinst": [656, 677, 678], "_to_devic": 656, "experiment": [656, 673], "_is_valid_dtypes_attribut": 656, "fn": [656, 673], "supported_dtyp": 656, "unsupported_dtyp": [656, 661, 668], "fn_supported_dtyp": 656, "fn_unsupported_dtyp": 656, "backend_str": 656, "current_backend_str": [656, 673, 675], "function_supported_dtyp": 656, "function_unsupported_dtyp": 656, "attribut": [656, 657, 661, 665, 667, 668, 670, 674, 675, 676, 677], "invalid_dtyp": [656, 668], "account": 657, "instanti": 657, "firstli": [657, 658, 663, 665, 666, 668, 670, 676], "templat": [657, 660, 1615], "spec": [657, 658], "array_api": 657, "raw": 657, "preview": 657, "newlin": 657, "render": 657, "incorrectli": [657, 671], "onlin": [657, 658, 1615], "domain": 657, "codomain": 657, "operand": [657, 661, 667], "ref": 657, "But": [657, 665, 667, 670, 678], "needless": 657, "duplic": [657, 664, 665, 671, 677], "info": [657, 1615], "renam": 657, "judgment": 657, "beyond": 657, "func_nam": [657, 658, 663], "pure": [657, 675, 678, 690], "themselv": [657, 663, 667, 668, 669, 677], "operator_nam": 657, "static_add": [657, 658, 667], "succinct": 657, "__radd__": [657, 658], "contstructor": 657, "linear": [657, 673, 676, 677, 678, 1615], "though": [657, 663, 668, 676, 690], "_forward": [657, 673, 676, 677, 1615], "former": 657, "explicitli": [657, 659, 663, 664, 665, 666, 667, 670, 673, 690], "latter": [657, 664], "implicit": [657, 660, 667, 673], "docst": 657, "eight": [658, 672], "static_": 658, "__": [658, 676], "op_nam": 658, "__r": 658, "__truediv__": [658, 666, 667], "recap": [658, 667, 677], "combinatorili": 658, "variat": [658, 660], "grid": [658, 660, 689], "vari": [658, 660, 667, 675], "unus": [658, 670, 671], "extra": [658, 660, 661, 662, 665, 666, 668, 673], "excess": [658, 664], "okai": [658, 673], "properti": [658, 660, 662, 663, 667, 675, 676, 677], "showcas": [658, 689], "demonstr": [658, 675], "replic": [658, 668], "meant": 658, "imaginari": 658, "some_flag": 658, "another_flag": 658, "jointli": 658, "three": [658, 660, 661, 667, 672, 1615], "x0": 658, "procedur": 658, "sens": [658, 675], "5574077": 658, "1850398": 658, "5463025": 658, "8422884": 658, "91601413": 658, "9647598": 658, "3738229": 658, "1597457": 658, "0963247": 658, "9955841": 658, "3278579": 658, "multi": [658, 672, 690, 1615, 1621], "seper": 658, "pars": [658, 690], "satisfi": 658, "ignor": [658, 660, 690], "far": [658, 669, 674], "asid": [658, 689], "irrelev": [658, 668], "increasingli": 658, "14254655": 658, "1578213": 658, "380515": 658, "static_tan": [658, 667], "143": 658, "38": 658, "trivial": 658, "static_rol": [658, 667], "exlud": 658, "action": [658, 660], "diff": [658, 667, 676], "failing_fn_nam": 658, "minutest": 658, "suffici": 658, "segment": 658, "fault": 658, "unit": [659, 660, 690], "thoroughli": 659, "ci": [659, 660, 690], "insert_chosen_backend": 659, "array_modul": 659, "set_backend": [659, 663, 664, 665, 668, 673, 675, 678, 1615], "typic": [659, 663], "On": [660, 661, 671, 674, 678], "fixtur": 660, "300": 660, "hit": [660, 673], "eleg": 660, "intellig": 660, "rang": [660, 673, 676, 677, 678, 1615], "cach": [660, 663], "unexplor": 660, "known": 660, "repeatedli": 660, "upload": 660, "artifact": 660, "parametr": 660, "statement": [660, 671, 690], "plai": [660, 661, 678], "kind": [660, 673, 690], "exhaust": 660, "impli": 660, "henc": [660, 667], "bespok": 660, "_array_or_typ": 660, "standalon": [660, 1614], "test_default_int_dtyp": 660, "clariti": 660, "varieti": [660, 668, 669], "valid_int_dtyp": [660, 662], "uint8": [660, 668], "uint16": [660, 668, 673], "uint32": [660, 668, 673], "uint64": [660, 668, 673], "custom_strategi": 660, "st": [660, 662], "sampled_from": [660, 662], "min_siz": 660, "max_siz": 660, "referenc": 660, "print_hypothesis_exampl": 660, "searchstrategi": 660, "randomis": 660, "simplist": 660, "intricaci": 660, "briefli": [660, 663, 676], "bound": [660, 673], "mechan": [660, 688, 690, 1615], "power": [660, 675, 676, 677], "math": [660, 661, 670, 678, 1615], "inclus": [660, 670], "width": 660, "losslessli": 660, "mostli": 660, "one_of": 660, "datum": 660, "pipe": 660, "overload": 660, "shorthand": 660, "min_valu": [660, 662], "ndim": 660, "max_valu": [660, 662], "input_dtyp": [660, 662], "as_vari": [660, 662], "num_arrai": 660, "reject": 660, "flatmap": 660, "suppos": 660, "interact": [660, 1615], "dataobject": 660, "test_argsort": 660, "decor": [660, 662, 663, 665, 667, 668, 669, 670], "initialis": 660, "snippet": 660, "dtype_and_x": [660, 662], "dtype_and_valu": [660, 662], "ivy_np": [660, 662], "valid_float_dtyp": [660, 662], "list_of_length": [660, 662], "num_positional_arg": [660, 662], "instance_method": 660, "test_leaky_relu": 660, "num_posit": 660, "indirectli": 660, "advis": 660, "seri": [660, 661], "9433925": 660, "401298464324817e": 660, "574352379": 660, "99999": 660, "2250738585072014e": 660, "308": 660, "103515625e": 660, "seamlessli": 660, "edg": [660, 1615], "encount": 660, "criterion": 660, "straight": [660, 675, 1615], "array_valu": 660, "valid_ax": 660, "hand": [660, 663, 671, 690], "craft": 660, "polici": [660, 689], "hoc": 660, "overview": [660, 672, 689], "array_dtyp": 660, "array_bool": [660, 662], "na": 660, "test_concat": 660, "treat": [660, 674, 678], "test_devic": 660, "array_shap": 660, "test_manipul": 660, "common_shap": 660, "test_lay": 660, "size_bound": 660, "precis": 660, "283405296074752": 660, "564049465049088": 660, "0417876997507982e": 660, "allow_inf": 660, "min_num_dim": [660, 662], "wherev": 660, "reshape_shap": 660, "stand": 660, "alon": 660, "fashion": 660, "some_sequ": 660, "allow_subnorm": 660, "exclude_min": 660, "960464477539063e": 660, "coverag": 660, "allow_nan": 660, "get_shap": [660, 662], "allow_non": [660, 662], "max_num_dim": [660, 662], "min_dim_s": [660, 662], "none_or_list_of_float": 660, "200": [660, 676], "199": 660, "99999999999997": 660, "000000000000002": 660, "125": 660, "43759670925832": 660, "get_mean_std": 660, "probabilist": 660, "811428143185347e": 660, "none_or_list_float": 660, "get_bound": 660, "arrays_valu": 660, "put": [660, 690], "73": 660, "36418": 660, "213": 660, "21716926": 660, "get_prob": 660, "099609375": 660, "get_axi": 660, "number_positional_argu": 660, "mind": [660, 666, 667], "bodi": 660, "possibli": [660, 690], "test_valu": [660, 662], "logic": [660, 665, 666, 668, 669, 675, 1615], "enough": [660, 675, 676, 677], "justifi": 660, "unduli": 660, "labori": 660, "straightforward": [660, 676], "report": 660, "test_demo": 660, "falsifi": 660, "failing_test": 660, "traceback": 660, "123": 660, "assertionerror": 660, "shrink": 660, "prescrib": 660, "behavior": [660, 667, 668, 673, 690], "identifi": 660, "closest": 660, "checkout": 660, "scratch": 660, "databas": 660, "therebi": 660, "event": [660, 1615], "test_gelu": 660, "test_fil": 660, "brief": 660, "phase": [660, 690], "notabl": 660, "displai": [660, 667, 676], "verbos": [660, 673, 1615], "newer": 660, "max_exampl": 660, "impact": [660, 677], "deadlin": 660, "weird": 660, "truth": 660, "opt": [660, 664, 670], "defer": [660, 663, 665, 666, 667, 668, 669, 670], "suffic": [660, 665], "catch": 660, "systemat": 660, "safeguard": 660, "inabl": 660, "num_gpu": [660, 669], "lax": [661, 662, 678, 690], "bfloat16": [661, 668], "categoris": 661, "notic": [661, 662], "mathematical_funct": 661, "arithmetic_oper": 661, "same_kind": [661, 662], "subok": [661, 662], "as_ivy_dtyp": 661, "is_arrai": 661, "mathemat": 661, "slightli": [661, 667, 673, 677], "recov": 661, "obtain": 661, "invalid": [661, 668, 671], "trigonometric_funct": 661, "pointwise_op": 661, "meet": 661, "criteria": 661, "incorpor": [661, 676], "resembl": 661, "concaten": [661, 673, 676, 1615], "manipulation_routin": 661, "joining_arrai": 661, "indexing_slicing_joining_mutating_op": 661, "cat": [661, 673, 678], "dim": [661, 662, 668], "grasp": 661, "youtub": 661, "jump": 662, "knowledg": 662, "strategi": 662, "test_frontend_funct": 662, "heavi": 662, "lift": 662, "np_frontend_help": 662, "behav": [662, 670, 675], "valid_numeric_dtyp": 662, "pick": 662, "fn_tree": 662, "nn": [662, 678, 1615], "test_frontend": 662, "test_jax": 662, "test_jax_lax_oper": 662, "available_dtyp": 662, "ivy_jax": 662, "fn_name": 662, "test_jax_lax_tan": 662, "as_variable_flag": 662, "with_out": 662, "native_array_flag": 662, "test_numpi": 662, "test_mathematical_funct": 662, "test_np_trigonometric_funct": 662, "test_numpy_tan": 662, "handle_where_and_array_bool": 662, "test_tensorflow": 662, "test_tf_funct": 662, "ivy_tf": 662, "test_tensorflow_tan": 662, "test_torch": 662, "test_pointwise_op": 662, "intersect": [662, 689], "ivy_torch": 662, "test_torch_tan": 662, "_dtype": [662, 675], "_fill_valu": 662, "elif": [662, 670], "max_dim_s": 662, "test_jax_lax_ful": 662, "uint": 662, "creation_routin": 662, "test_from_shape_or_valu": 662, "test_numpy_ful": 662, "test_tensorflow_ful": 662, "discrep": 662, "toler": 662, "test_creation_op": 662, "_requires_grad": 662, "requires_grad": 662, "test_torch_ful": 662, "accommod": 662, "unsign": [662, 673], "categor": [663, 669], "mutual": [663, 667], "venn": 663, "diagram": 663, "light": [663, 690, 1614], "log_pr": [663, 667, 670], "array_arg": 663, "whatsoev": [663, 667, 1614], "outsid": [663, 669, 671, 675], "cache_fn": 663, "deal": [663, 690], "batch": [663, 667, 676], "concurr": [663, 667], "modif": 663, "handle_nest": [663, 665, 667, 673], "group": [663, 667], "set_default_dtyp": [663, 668], "default_dtyp": [663, 668], "get_all_arrays_on_dev": 663, "get_backend": [663, 664], "nested_map": 663, "index_nest": 663, "implicit_backend": [664, 673], "overwritten": [664, 666], "unless": [664, 669, 670, 690], "__dict__": [664, 673], "ivy_original_dict": [664, 673], "string": [664, 668, 669, 671, 673, 676], "unmodifi": [664, 668], "unset_backend": 664, "unset": [664, 673], "fallback": 664, "achiev": [665, 671, 676, 678, 1614], "inputs_to_native_arrai": [665, 666], "counterpart": [665, 667], "inputs_to_ivy_arrai": 665, "heavili": [665, 690], "nearli": 665, "anywai": [665, 666], "facilit": 665, "integer_array_to_float": 665, "topic": [665, 675], "empti": [666, 668, 669], "_data": [666, 675], "organiz": [666, 667], "inherit": [666, 667, 675, 690, 1614], "bear": [666, 667, 668], "necessarili": [666, 667], "although": [666, 667], "underpin": [666, 667, 673], "programmat": [666, 667], "backup": [666, 667], "accident": [666, 667], "absent": [666, 667], "perk": [666, 667], "auto": [666, 667, 676], "__setitem__": [666, 667, 675], "throw": [666, 675], "imposs": 666, "chain": [666, 667, 677, 678, 690], "coupl": [666, 675, 677], "secondli": [666, 668], "five": [667, 676], "all_tru": [667, 676], "to_iter": 667, "containerbas": 667, "decis": [667, 673, 675], "multi_map": 667, "common_key_chain": 667, "arbitrarili": [667, 676], "multi_map_in_static_method": 667, "containerwithelementwis": 667, "__repr__": 667, "control": [667, 668, 670, 675, 676, 689, 1614], "__getattr__": 667, "underli": 667, "queri": [667, 668, 675], "__setattr__": 667, "__getitem__": 667, "__contains__": 667, "__getstate__": 667, "__setstate__": 667, "pickl": [667, 676], "unpickl": 667, "lefthand": 667, "righthand": 667, "presenc": [667, 670], "implicitli": [667, 673], "intuit": [667, 676, 677], "chronolog": 667, "had": [667, 670], "sequenti": [667, 677], "flow": [667, 689], "implic": 667, "eager": [667, 690], "children": 667, "shallowest": 667, "deepest": 667, "constructor": [668, 669, 675], "all_dtyp": 668, "all_numeric_dtyp": 668, "all_int_dtyp": 668, "all_float_dtyp": 668, "thirdli": 668, "native_float32": 668, "importantli": [668, 675, 678, 689], "arguabl": [668, 669], "compound": 668, "overflow": 668, "default_int_dtyp": 668, "default_float_dtyp": 668, "settabl": [668, 669], "set_default_int_dtyp": 668, "set_default_float_dtyp": 668, "arang": [668, 1615], "mx": [668, 669, 670, 1615], "nd": [668, 669, 670, 1615], "deleg": 668, "shape_to_tupl": 668, "donot": 668, "superset": [668, 690], "idx": [669, 675], "tpu": 669, "get_all_ivy_arrays_on_dev": 669, "aliv": 669, "total_mem_on_dev": 669, "dev_util": 669, "num_cpu_cor": 669, "default_devic": 669, "dual": 669, "thrown": [669, 690], "set_default_devic": 669, "program": 670, "strictli": 670, "inplace_upd": 670, "ration": 670, "speak": 670, "subtli": 670, "ensure_in_backend": 670, "x_nativ": 670, "val_n": 670, "is_ivy_arrai": [670, 675], "assign": [670, 671, 675], "unspecifi": 670, "predominantli": [670, 689], "altern": [670, 676], "_wrap_fn": 670, "maxim": [670, 673], "inner": 670, "third": [670, 690], "leverag": 670, "multi_head_attent": 670, "to_out_fn": 670, "support_native_out": 670, "composition": 670, "lack": 670, "capabl": 670, "equival": [670, 676, 678], "input_arrai": 670, "flake8": 671, "undefin": 671, "handler": [671, 672, 674, 678, 1614, 1615], "liter": 671, "carri": 671, "star": 671, "byte": 671, "notimpl": 671, "notimplementederror": 671, "unsuccess": 671, "exce": 671, "indices_wher": [671, 1615], "black": 671, "disobei": 671, "successfulli": 671, "comparison": 671, "sound": 672, "fledg": [673, 674], "syntact": [673, 678], "minor": [673, 690], "fit": 673, "logspac": 673, "construct": [673, 677, 678], "power_seq": 673, "linspac": [673, 1615], "resid": [673, 677], "devicearrai": [673, 675], "backend_handl": [673, 1615], "backend_stack": 673, "cprint": 673, "_determine_backend_from_arg": 673, "importlib": 673, "import_modul": 673, "_backend_dict": 673, "illustr": [673, 689], "un": 673, "lstm_updat": 673, "init_h": 673, "init_c": 673, "kernel": [673, 690], "recurrent_kernel": 673, "bia": [673, 677], "recurrent_bia": 673, "unrol": [673, 676], "lstm": 673, "cell": 673, "hidden": [673, 677], "recurr": 673, "timestep": 673, "x_shape": 673, "input_channel": [673, 677], "x_flat": 673, "wi": 673, "wi_x": 673, "wii_x": 673, "wif_x": 673, "wig_x": 673, "wio_x": 673, "wh": 673, "ht": 673, "ct": 673, "hts_list": 673, "wii_xt": 673, "wif_xt": 673, "wig_xt": 673, "wio_xt": 673, "zip": 673, "htm1": 673, "ctm1": 673, "wh_htm1": 673, "whi_htm1": 673, "whf_htm1": 673, "whg_htm1": 673, "who_htm1": 673, "ft": 673, "gt": 673, "ot": 673, "offici": 673, "reliabl": 673, "sacrific": 673, "hear": 673, "virtu": 673, "pure_ivi": 673, "compile_graph": [673, 678], "pure_torch": 673, "backbon": [673, 676], "_layer": 673, "super": [673, 676, 677, 678], "random_unifrom": 673, "unclean": 673, "wx": 673, "temp": 673, "torchscript": [673, 1614], "example_input": 673, "static_argnum": 673, "static_argnam": 673, "jit": [673, 690], "primit": [674, 690], "upcom": 674, "hierarch": [674, 676, 677], "arraywithactiv": 675, "arraywithutil": 675, "_init": 675, "is_native_arrai": 675, "_shape": 675, "_size": 675, "functool": 675, "mul": 675, "len": [675, 678], "_devic": 675, "_dev_str": 675, "as_ivy_dev": 675, "_pre_repr": 675, "_post_repr": 675, "framework_str": 675, "_is_vari": 675, "noinspect": 675, "pypep8nam": 675, "mt": 675, "answer": [675, 690], "typeerror": 675, "immut": 675, "claim": 675, "truli": 675, "_native_wrapp": 675, "attributeerror": 675, "scatter_nd": [675, 1615], "genuin": 675, "some_method": 675, "similarli": 675, "rewritten": 675, "__pow__": 675, "strang": 675, "enforc": 675, "compartment": 675, "public": 675, "newshap": 675, "new_shap": 675, "transpos": [675, 678, 1615], "tidi": 675, "shorter": 675, "crystal": 675, "50": 675, "ton": 676, "ado": [676, 677], "dictionari": [676, 690], "incredibli": [676, 690], "soup": 676, "walk": [676, 677], "dct": 676, "cnt": 676, "combo": [676, 1615, 1621], "hold": 676, "1000": 676, "3333335": 676, "Or": 676, "grad": [676, 677, 678, 1615], "31": 676, "delimit": 676, "autocomplet": 676, "midwai": 676, "agent": 676, "total_spe": 676, "total_height": 676, "total_width": 676, "ag": 676, "tot": 676, "total_": 676, "total_h": 676, "disk": 676, "hdf5": 676, "to_disk_as_hdf5": 676, "from_disk_as_hdf5": 676, "same_arrai": 676, "to_disk_as_pickl": 676, "from_disk_as_pickl": 676, "config": 676, "dir": 676, "dataset": [676, 688, 1615], "dropout": 676, "json": 676, "to_disk_as_json": 676, "from_disk_as_json": 676, "cnt0": 676, "cnt1": 676, "deep_copi": 676, "diff_0": 676, "diff_1": 676, "config0": 676, "config1": 676, "Not": [676, 677, 690], "hierarchi": 676, "screen": 676, "decod": 676, "l0": 676, "l1": 676, "clearer": 676, "truncat": 676, "flatten_key_chain": 676, "above_height": 676, "decoder__l0": 676, "decoder__l1": 676, "encoder__l0": 676, "encoder__l1": 676, "height": 676, "below_depth": 676, "l0__b": 676, "l0__w": 676, "l1__b": 676, "l1__w": 676, "with_print_limit": 676, "printabl": 676, "with_key_length_limit": 676, "with_print_ind": 676, "indent": 676, "obviou": 676, "foresight": 676, "untidili": 676, "update_ag": 676, "normalize_img": 676, "img": 676, "img_max": 676, "reduce_max": [676, 1615], "img_min": 676, "reduce_min": [676, 1615], "img_rang": 676, "agent_posit": 676, "agent_veloc": 676, "agent_cam_front_rgb": 676, "agent_cam_front_depth": 676, "agent_cam_rear_rgb": 676, "agent_cam_rear_depth": 676, "agent_cam_lidar": 676, "cleaner": 676, "camera": 676, "front_rgb": 676, "front_depth": 676, "rear_rgb": 676, "rear_depth": 676, "lidar": 676, "rgb": 676, "rear": 676, "veloc": 676, "cam": 676, "cam_max": 676, "cam_min": 676, "cam_rang": 676, "Of": 676, "perman": 676, "afterward": 676, "thread": 676, "multiprocess": [676, 690], "queue": 676, "pretti": 676, "dataload": [676, 688, 1615], "_cnt": 676, "img_": 676, "_dataset_s": 676, "_batch_siz": 676, "_count": [676, 677], "__next__": 676, "filenam": 676, "img_fnam": 676, "list_stack": 676, "fname": 676, "loaded_img": 676, "cv2": 676, "imread": 676, "from_numpi": 676, "loader": [676, 690], "batch_slic": 676, "model": [676, 677, 1614, 1615], "mymodel": [676, 1615], "linear0": [676, 677, 1615], "linear1": [676, 677, 1615], "x_in": [676, 677, 678, 1615], "loss_fn": [676, 677, 678, 1615], "reduce_mean": [676, 677, 678, 1615], "execute_with_gradi": [676, 677, 678, 690, 1615], "0145": 676, "grad_fn": 676, "addbackward0": 676, "_create_vari": 677, "output_channel": 677, "with_bia": 677, "_input_channel": 677, "_output_channel": 677, "_w_shape": 677, "_b_shape": 677, "_with_bia": 677, "729": 677, "396": 677, "764": 677, "872": 677, "211": 677, "439": 677, "644": 677, "nightmar": 677, "overcom": 677, "fc": 677, "v0": 677, "v1": 677, "key0": 677, "key1": 677, "linear3": 677, "v2": 677, "counter": 677, "fed": 677, "decoupl": 677, "scheme": 677, "weight_initi": 677, "glorotuniform": 677, "bias_initi": 677, "_w_init": 677, "_b_init": 677, "create_vari": 677, "var_shap": 677, "fan_out": 677, "fan_in": 677, "fan_mod": 677, "fan_sum": 677, "slight": 677, "misnom": 677, "saw": 677, "vanilla": 677, "compile_on_next_step": 677, "_beta1": 677, "_beta2": 677, "_epsilon": 677, "_mw": 677, "_vw": 677, "_first_pass": 677, "_should_compil": 677, "_step": 677, "new_v": 677, "_lr": 677, "_inplac": 677, "_stop_gradi": 677, "set_stat": 677, "clamp": 678, "clip_by_valu": 678, "pre": [678, 690], "captur": 678, "one_hot": [678, 1615], "sparse_funct": 678, "num_class": 678, "ey": 678, "num_dim": 678, "new_axi": 678, "constitu": 678, "_linear": 678, "to_backend": 678, "jax_graph": 678, "to_ivy_modul": 678, "thinli": 678, "whilst": [678, 1614], "to_haiku_modul": 678, "hk": 678, "loss_fn_t": 678, "transform": [678, 689, 1614], "without_apply_rng": 678, "rng": 678, "prngkei": 678, "param": 678, "init": 678, "update_rul": 678, "tree_multimap": 678, "vision": [688, 1615], "robot": [688, 1615], "focus": 689, "perfect": 689, "3d": 689, "differenti": 689, "demo": [689, 1615], "orient": 689, "pose": 689, "largest": 689, "euler": 689, "quaternion": 689, "rotat": 689, "ivy_mech": 689, "target_facing_rotation_matrix": 689, "polar_to_cartesian_coord": 689, "ordin": 689, "warp": 689, "optic": 689, "voxel": 689, "ivy_vis": 689, "coords_to_voxel_grid": 689, "render_pixel_coord": 689, "neural": [689, 1615], "radianc": 689, "nerf": 689, "trajectori": 689, "motion": 689, "plan": [689, 1615], "mobil": 689, "ivy_robot": 689, "sample_spline_path": 689, "rigidmobil": 689, "sample_bodi": 689, "drone": 689, "sample_link": 689, "openai": 689, "swimmer": 689, "reward": 689, "supervis": 689, "reinforc": 689, "door": [689, 690], "cartpol": 689, "mountain_car": 689, "pendulum": 689, "reacher": 689, "learnt": 689, "ture": 689, "ntm": 689, "egospher": 689, "spatial": 689, "esm": 689, "ivy_memori": 689, "egocentr": 689, "room": 689, "inspir": 689, "doubt": 690, "grate": 690, "probe": 690, "undergo": 690, "remark": 690, "surpris": 690, "backward": 690, "lock": 690, "xla": [690, 1614], "gold": 690, "dex": 690, "ye": 690, "scan": 690, "tricki": [690, 1614], "predictor": 690, "tight": 690, "driver": 690, "schedul": 690, "dispatch": 690, "Will": 690, "ast": 690, "cond": 690, "jacobian": 690, "checkpoint": 690, "autodiff": 690, "shine": 690, "merci": 690, "autograd": 690, "cluster": 690, "compet": 690, "paradigm": 690, "parallelis": 690, "spmd": 690, "mixtur": 690, "expert": 690, "sophist": 690, "depart": 690, "routin": 690, "hundr": 690, "thousand": 690, "deepli": 690, "broadli": 690, "supplementari": 690, "reusabl": 690, "fanci": 690, "fusion": 690, "lose": 690, "vmap": 690, "pmap": 690, "overhead": 690, "ineffici": 690, "eventu": 690, "supplement": 690, "backdoor": 690, "callback": 690, "load": 690, "record": 690, "metric": 690, "somewhat": 690, "outsourc": 690, "nail": 1614, "retain": 1614, "funtion": 1614, "asset": 1614, "functiona": 1614, "scientist": 1614, "deploi": 1614, "faster": 1614, "correl": 1614, "analyz": 1614, "join": 1615, "grow": 1615, "ai": 1615, "got": 1615, "colab": 1615, "sharp": 1615, "weekli": 1615, "immedi": 1615, "favorit": 1615, "jax_concat": 1615, "tf_concat": 1615, "np_concat": 1615, "mx_concat": 1615, "torch_concat": 1615, "get_devic": 1615, "reduce_prod": 1615, "get_num_dim": 1615, "reduce_sum": 1615, "gradient_imag": 1615, "seed": 1615, "linalg": 1615, "bilinear_resampl": 1615, "stack_imag": 1615, "conv2d": 1615, "neural_net": 1615, "cumsum": 1615, "floormod": 1615, "ecosystem": [1615, 1621], "popular": [1615, 1621], "acceler": 1615, "articl": 1615, "lenton2021ivi": 1615, "inter": 1615, "portabl": 1615, "lenton": 1615, "daniel": 1615, "pardo": 1615, "fabio": 1615, "falck": 1615, "fabian": 1615, "jame": 1615, "stephen": 1615, "clark": 1615, "ronald": 1615, "journal": 1615, "arxiv": 1615, "preprint": 1615, "2102": 1615, "02886": 1615, "2021": 1615}, "objects": {"ivy.array.activations": [[1, 0, 1, "", "ArrayWithActivations"]], "ivy.array.activations.ArrayWithActivations": [[1, 1, 1, "", "gelu"], [1, 1, 1, "", "leaky_relu"], [1, 1, 1, "", "relu"], [1, 1, 1, "", "sigmoid"], [1, 1, 1, "", "softmax"], [1, 1, 1, "", "softplus"]], "ivy.array": [[188, 2, 0, "-", "conversions"], [193, 2, 0, "-", "creation"], [195, 2, 0, "-", "data_type"], [197, 2, 0, "-", "device"], [199, 2, 0, "-", "elementwise"], [201, 2, 0, "-", "general"], [203, 2, 0, "-", "gradients"], [205, 2, 0, "-", "image"], [207, 2, 0, "-", "layers"], [209, 2, 0, "-", "linear_algebra"], [211, 2, 0, "-", "losses"], [213, 2, 0, "-", "manipulation"], [215, 2, 0, "-", "norms"], [217, 2, 0, "-", "random"], [219, 2, 0, "-", "searching"], [221, 2, 0, "-", "set"], [223, 2, 0, "-", "sorting"], [225, 2, 0, "-", "statistical"], [229, 2, 0, "-", "wrapping"]], "ivy.array.conversions": [[189, 3, 1, "", "args_to_ivy"], [190, 3, 1, "", "args_to_native"], [191, 3, 1, "", "to_ivy"], [192, 3, 1, "", "to_native"]], "ivy.array.creation": [[194, 0, 1, "", "ArrayWithCreation"]], "ivy.array.creation.ArrayWithCreation": [[194, 1, 1, "", "asarray"], [194, 1, 1, "", "empty_like"], [194, 1, 1, "", "from_dlpack"], [194, 1, 1, "", "full_like"], [194, 1, 1, "", "meshgrid"], [194, 1, 1, "", "native_array"], [194, 1, 1, "", "ones_like"], [194, 1, 1, "", "tril"], [194, 1, 1, "", "triu"], [194, 1, 1, "", "zeros_like"]], "ivy.array.data_type": [[196, 0, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[196, 1, 1, "", "astype"], [196, 1, 1, "", "broadcast_arrays"], [196, 1, 1, "", "broadcast_to"], [196, 1, 1, "", "can_cast"], [196, 1, 1, "", "dtype"], [196, 1, 1, "", "finfo"], [196, 1, 1, "", "iinfo"], [196, 1, 1, "", "is_bool_dtype"], [196, 1, 1, "", "is_float_dtype"], [196, 1, 1, "", "is_int_dtype"], [196, 1, 1, "", "is_uint_dtype"], [196, 1, 1, "", "result_type"]], "ivy.array.device": [[198, 0, 1, "", "ArrayWithDevice"]], "ivy.array.device.ArrayWithDevice": [[198, 1, 1, "", "dev"], [198, 1, 1, "", "to_device"]], "ivy.array.elementwise": [[200, 0, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[200, 1, 1, "", "abs"], [200, 1, 1, "", "acos"], [200, 1, 1, "", "acosh"], [200, 1, 1, "", "add"], [200, 1, 1, "", "asin"], [200, 1, 1, "", "asinh"], [200, 1, 1, "", "atan"], [200, 1, 1, "", "atan2"], [200, 1, 1, "", "atanh"], [200, 1, 1, "", "bitwise_and"], [200, 1, 1, "", "bitwise_invert"], [200, 1, 1, "", "bitwise_left_shift"], [200, 1, 1, "", "bitwise_or"], [200, 1, 1, "", "bitwise_right_shift"], [200, 1, 1, "", "bitwise_xor"], [200, 1, 1, "", "ceil"], [200, 1, 1, "", "cos"], [200, 1, 1, "", "cosh"], [200, 1, 1, "", "divide"], [200, 1, 1, "", "equal"], [200, 1, 1, "", "erf"], [200, 1, 1, "", "exp"], [200, 1, 1, "", "expm1"], [200, 1, 1, "", "floor"], [200, 1, 1, "", "floor_divide"], [200, 1, 1, "", "greater"], [200, 1, 1, "", "greater_equal"], [200, 1, 1, "", "isfinite"], [200, 1, 1, "", "isinf"], [200, 1, 1, "", "isnan"], [200, 1, 1, "", "less"], [200, 1, 1, "", "less_equal"], [200, 1, 1, "", "log"], [200, 1, 1, "", "log10"], [200, 1, 1, "", "log1p"], [200, 1, 1, "", "log2"], [200, 1, 1, "", "logaddexp"], [200, 1, 1, "", "logical_and"], [200, 1, 1, "", "logical_not"], [200, 1, 1, "", "logical_or"], [200, 1, 1, "", "logical_xor"], [200, 1, 1, "", "multiply"], [200, 1, 1, "", "negative"], [200, 1, 1, "", "not_equal"], [200, 1, 1, "", "positive"], [200, 1, 1, "", "pow"], [200, 1, 1, "", "remainder"], [200, 1, 1, "", "round"], [200, 1, 1, "", "sign"], [200, 1, 1, "", "sin"], [200, 1, 1, "", "sinh"], [200, 1, 1, "", "sqrt"], [200, 1, 1, "", "square"], [200, 1, 1, "", "subtract"], [200, 1, 1, "", "tan"], [200, 1, 1, "", "tanh"], [200, 1, 1, "", "trunc"]], "ivy.array.general": [[202, 0, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[202, 1, 1, "", "all_equal"], [202, 1, 1, "", "clip_matrix_norm"], [202, 1, 1, "", "clip_vector_norm"], [202, 1, 1, "", "cumprod"], [202, 1, 1, "", "einops_rearrange"], [202, 1, 1, "", "einops_reduce"], [202, 1, 1, "", "einops_repeat"], [202, 1, 1, "", "gather"], [202, 1, 1, "", "gather_nd"], [202, 1, 1, "", "has_nans"], [202, 1, 1, "", "inplace_decrement"], [202, 1, 1, "", "stable_divide"], [202, 1, 1, "", "to_list"], [202, 1, 1, "", "to_numpy"], [202, 1, 1, "", "unstack"]], "ivy.array.gradients": [[204, 0, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[204, 1, 1, "", "adam_step"], [204, 1, 1, "", "adam_update"], [204, 1, 1, "", "gradient_descent_update"], [204, 1, 1, "", "is_variable"], [204, 1, 1, "", "lamb_update"], [204, 1, 1, "", "lars_update"], [204, 1, 1, "", "optimizer_update"], [204, 1, 1, "", "stop_gradient"], [204, 1, 1, "", "variable"], [204, 1, 1, "", "variable_data"]], "ivy.array.image": [[206, 0, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[208, 0, 1, "", "ArrayWithLayers"]], "ivy.array.layers.ArrayWithLayers": [[208, 1, 1, "", "conv1d"], [208, 1, 1, "", "depthwise_conv2d"]], "ivy.array.linear_algebra": [[210, 0, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[210, 1, 1, "", "cholesky"], [210, 1, 1, "", "cross"], [210, 1, 1, "", "det"], [210, 1, 1, "", "diagonal"], [210, 1, 1, "", "eigh"], [210, 1, 1, "", "eigvalsh"], [210, 1, 1, "", "inv"], [210, 1, 1, "", "matmul"], [210, 1, 1, "", "matrix_norm"], [210, 1, 1, "", "matrix_rank"], [210, 1, 1, "", "matrix_transpose"], [210, 1, 1, "", "outer"], [210, 1, 1, "", "pinv"], [210, 1, 1, "", "qr"], [210, 1, 1, "", "solve"], [210, 1, 1, "", "svd"], [210, 1, 1, "", "svdvals"], [210, 1, 1, "", "tensordot"], [210, 1, 1, "", "trace"], [210, 1, 1, "", "vecdot"], [210, 1, 1, "", "vector_norm"], [210, 1, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[212, 0, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[212, 1, 1, "", "binary_cross_entropy"], [212, 1, 1, "", "cross_entropy"], [212, 1, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[214, 0, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[214, 1, 1, "", "clip"], [214, 1, 1, "", "concat"], [214, 1, 1, "", "constant_pad"], [214, 1, 1, "", "expand_dims"], [214, 1, 1, "", "flip"], [214, 1, 1, "", "permute_dims"], [214, 1, 1, "", "repeat"], [214, 1, 1, "", "reshape"], [214, 1, 1, "", "roll"], [214, 1, 1, "", "split"], [214, 1, 1, "", "squeeze"], [214, 1, 1, "", "stack"], [214, 1, 1, "", "swapaxes"], [214, 1, 1, "", "tile"], [214, 1, 1, "", "zero_pad"]], "ivy.array.norms": [[216, 0, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[216, 1, 1, "", "layer_norm"]], "ivy.array.random": [[218, 0, 1, "", "ArrayWithRandom"]], "ivy.array.random.ArrayWithRandom": [[218, 1, 1, "", "multinomial"], [218, 1, 1, "", "randint"], [218, 1, 1, "", "random_normal"], [218, 1, 1, "", "random_uniform"], [218, 1, 1, "", "shuffle"]], "ivy.array.searching": [[220, 0, 1, "", "ArrayWithSearching"]], "ivy.array.searching.ArrayWithSearching": [[220, 1, 1, "", "argmax"], [220, 1, 1, "", "argmin"], [220, 1, 1, "", "nonzero"], [220, 1, 1, "", "where"]], "ivy.array.set": [[222, 0, 1, "", "ArrayWithSet"]], "ivy.array.set.ArrayWithSet": [[222, 1, 1, "", "unique_all"], [222, 1, 1, "", "unique_counts"], [222, 1, 1, "", "unique_inverse"], [222, 1, 1, "", "unique_values"]], "ivy.array.sorting": [[224, 0, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[224, 1, 1, "", "argsort"], [224, 1, 1, "", "searchsorted"], [224, 1, 1, "", "sort"]], "ivy.array.statistical": [[226, 0, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[226, 1, 1, "", "einsum"], [226, 1, 1, "", "max"], [226, 1, 1, "", "mean"], [226, 1, 1, "", "min"], [226, 1, 1, "", "prod"], [226, 1, 1, "", "std"], [226, 1, 1, "", "sum"], [226, 1, 1, "", "var"]], "ivy.array.wrapping": [[230, 3, 1, "", "add_ivy_array_instance_methods"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:module", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "module", "Python module"], "3": ["py", "function", "Python function"]}, "titleterms": {"activ": [0, 247, 703, 1622], "arraywithactiv": 1, "arrai": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 245, 655, 659, 666, 668, 675, 851, 897, 1127, 1393, 1540, 1571], "variabl": [4, 180, 597, 1296, 1298, 1299], "method": [5, 253, 667, 675, 676], "ab": [6, 254, 905, 906, 907], "aco": [7, 255, 909, 910, 911], "acosh": [8, 256, 913, 914, 915], "adam_step": [9, 257, 1264, 1265, 1266], "adam_upd": [10, 258, 1267, 1268, 1269], "add": [11, 259, 658, 917, 918, 919], "add_ivy_array_instance_method": [12, 230], "all": [13, 261, 1606, 1607, 1608], "all_equ": [14, 262, 1143, 1144, 1145], "ani": [15, 263, 1610, 1611, 1612], "argmax": [16, 264, 1531, 1532, 1533], "argmin": [17, 265, 1535, 1536, 1537], "argsort": [18, 266, 1566, 1567, 1568], "asarrai": [19, 735, 736], "asin": [20, 267, 921, 922, 923], "asinh": [21, 268, 925, 926, 927], "astyp": [22, 269, 794, 795, 796], "atan": [23, 270, 929, 930, 931], "atan2": [24, 271, 933, 934, 935], "atanh": [25, 272, 937, 938, 939], "binary_cross_entropi": [26, 273, 1417, 1418, 1419], "bitwise_and": [27, 274, 941, 942, 943], "bitwise_invert": [28, 275, 945, 946, 947], "bitwise_left_shift": [29, 276, 949, 950, 951], "bitwise_or": [30, 277, 953, 954, 955], "bitwise_right_shift": [31, 278, 957, 958, 959], "bitwise_xor": [32, 279, 961, 962, 963], "broadcast_arrai": [33, 280, 798, 799, 800], "broadcast_to": [34, 281, 802, 803, 804], "can_cast": [35, 282, 806, 807, 808], "ceil": [36, 283, 965, 966, 967], "choleski": [37, 284, 1327, 1328, 1329], "clip": [38, 285, 1430, 1431, 1432], "clip_matrix_norm": [39, 286, 1153, 1154, 1155], "clip_vector_norm": [40, 287, 1157, 1158, 1159], "concat": [41, 288, 1434, 1435, 1436], "constant_pad": [42, 289, 1438, 1439, 1440], "conv1d": [43, 290, 1306, 1307, 1308, 1634], "co": [44, 291, 969, 970, 971], "cosh": [45, 292, 973, 974, 975], "cross": [46, 293, 1331, 1332, 1333], "cross_entropi": [47, 294, 1421, 1422, 1423], "cumprod": [48, 295, 1163, 1164, 1165], "depthwise_conv2d": [49, 296, 1316, 1317, 1318], "det": [50, 297, 1335, 1336, 1337], "dev": [51, 298, 877, 878, 879], "diagon": [52, 299, 1339, 1340, 1341], "divid": [53, 300, 977, 978, 979], "dtype": [54, 301, 655, 818, 819, 820], "eigh": [55, 302, 1343, 1344, 1345], "eigvalsh": [56, 1346], "einops_rearrang": [57, 303, 1170, 1171, 1172], "einops_reduc": [58, 304, 1174, 1175, 1176], "einops_repeat": [59, 305, 1178, 1179, 1180], "einsum": [60, 306, 1580, 1581, 1582], "empty_lik": [61, 307, 739, 740, 741], "equal": [62, 308, 981, 982, 983], "erf": [63, 309, 985, 986, 987], "exp": [64, 310, 989, 990, 991], "expand_dim": [65, 311, 1441, 1442, 1443], "expm1": [66, 312, 993, 994, 995], "finfo": [67, 313, 823, 824, 825], "flip": [68, 314, 1445, 1446, 1447], "floor": [69, 315, 997, 998, 999], "floor_divid": [70, 316, 1001, 1002, 1003], "from_dlpack": [71, 317, 746, 747, 748], "full_lik": [72, 318, 751, 752, 753], "gather": [73, 319, 1187, 1188, 1189], "gather_nd": [74, 320, 1191, 1192, 1193], "gelu": [75, 321, 704, 705, 706, 1624], "gradient_descent_upd": [76, 322, 1272, 1273, 1274], "greater": [77, 323, 1005, 1006, 1007], "greater_equ": [78, 324, 1009, 1010, 1011], "has_nan": [79, 325, 1202, 1203, 1204], "iinfo": [80, 326, 833, 834, 835], "inplace_decr": [81, 327, 1208, 1209, 1210], "inv": [82, 328, 1347, 1348, 1349], "is_bool_dtyp": [83, 329, 838, 839, 840], "is_float_dtyp": [84, 330, 842, 843, 844], "is_int_dtyp": [85, 331, 846, 847, 848], "is_uint_dtyp": [86, 332, 850, 851, 852, 853], "is_vari": [87, 333, 1275, 1276, 1277], "isfinit": [88, 334, 1013, 1014, 1015], "isinf": [89, 335, 1017, 1018, 1019], "isnan": [90, 336, 1021, 1022, 1023], "lamb_upd": [91, 337, 1280, 1281, 1282], "lars_upd": [92, 338, 1283, 1284, 1285], "layer_norm": [93, 339, 1505, 1506, 1507], "leaky_relu": [94, 340, 708, 709, 710], "less": [95, 341, 1025, 1026, 1027], "less_equ": [96, 342, 1029, 1030, 1031], "log": [97, 343, 649, 1033, 1034, 1035], "log10": [98, 344, 1037, 1038, 1039], "log1p": [99, 345, 1041, 1042, 1043], "log2": [100, 346, 1045, 1046, 1047], "logaddexp": [101, 347, 1049, 1050, 1051], "logical_and": [102, 348, 1053, 1054, 1055], "logical_not": [103, 349, 1057, 1058, 1059], "logical_or": [104, 350, 1061, 1062, 1063], "logical_xor": [105, 351, 1065, 1066, 1067], "matmul": [106, 352, 1351, 1352, 1353], "matrix_norm": [107, 353, 1354, 1355, 1356], "matrix_rank": [108, 355, 1362, 1363, 1364], "matrix_transpos": [109, 356, 1366, 1367, 1368], "max": [110, 357, 1583, 1584, 1585], "mean": [111, 359, 1586, 1587, 1588], "meshgrid": [112, 360, 761, 762, 763], "min": [113, 361, 1589, 1590, 1591], "multinomi": [114, 363, 1509, 1510, 1511], "multipli": [115, 364, 1077, 1078, 1079], "native_arrai": [116, 365, 765, 766, 767], "neg": [117, 366, 1081, 1082, 1083], "nonzero": [118, 367, 1539, 1540, 1541, 1542], "not_equ": [119, 368, 1085, 1086, 1087], "ones_lik": [120, 369, 772, 773, 774], "optimizer_upd": [121, 370, 1286, 1287, 1288], "outer": [122, 371, 1370, 1371, 1372], "permute_dim": [123, 372, 1448, 1449, 1450], "pinv": [124, 1374], "posit": [125, 373, 655, 1089, 1090, 1091], "pow": [126, 374, 1093, 1094, 1095], "prod": [127, 375, 1592, 1593, 1594], "qr": [128, 376, 1375, 1376, 1377], "randint": [129, 377, 1513, 1514, 1515], "random_norm": [130, 378, 1517, 1518, 1519], "random_uniform": [131, 379, 1521, 1522, 1523], "relu": [132, 380, 712, 713, 714], "remaind": [133, 381, 1097, 1098, 1099], "repeat": [134, 382, 1451, 1452, 1453], "reshap": [135, 383, 1455, 1456, 1457], "result_typ": [136, 384, 857, 858, 859], "roll": [137, 385, 658, 1459, 1460, 1461], "round": [138, 386, 1101, 1102, 1103], "searchsort": [139, 387, 1570, 1571, 1572, 1573], "shuffl": [140, 388, 1526, 1527, 1528], "sigmoid": [141, 389, 716, 717, 718], "sign": [142, 390, 1105, 1106, 1107], "sin": [143, 391, 1109, 1110, 1111], "sinh": [144, 392, 1113, 1114, 1115], "softmax": [145, 394, 720, 721, 722], "softplu": [146, 395, 724, 725, 726], "solv": [147, 396, 1383, 1384, 1385], "sort": [148, 223, 397, 640, 1565, 1575, 1576, 1577], "sparse_cross_entropi": [149, 398, 1425, 1426, 1427], "split": [150, 399, 1463, 1464, 1465], "sqrt": [151, 400, 1117, 1118, 1119], "squar": [152, 401, 1121, 1122, 1123], "squeez": [153, 402, 1467, 1468, 1469], "stable_divid": [154, 403, 1236, 1237, 1238], "stack": [155, 404, 1470, 1471, 1472], "std": [156, 573, 1595, 1596, 1597], "stop_gradi": [157, 574, 1290, 1292, 1293], "subtract": [158, 575, 1125, 1127, 1128, 1129], "sum": [159, 576, 1598, 1599, 1600], "svd": [160, 577, 1387, 1389, 1390], "svdval": [161, 578, 1391, 1393, 1394, 1395], "swapax": [162, 579, 1473, 1474, 1475], "tan": [163, 580, 658, 662, 1130, 1132, 1133], "tanh": [164, 581, 1134, 1136, 1137], "tensordot": [165, 582, 1396, 1398, 1399], "tile": [166, 583, 1476, 1477, 1478], "to_devic": [167, 584, 895, 897, 898, 899], "to_list": [168, 585, 1244, 1246, 1247], "to_numpi": [169, 586, 1249, 1251, 1252], "trace": [170, 587, 1400, 1402, 1403], "tril": [171, 588, 776, 778, 779], "triu": [172, 589, 780, 782, 783], "trunc": [173, 590, 1138, 1140, 1141], "unique_al": [174, 591, 1549, 1551, 1552], "unique_count": [175, 592, 1553, 1555, 1556], "unique_invers": [176, 593, 1557, 1559, 1560], "unique_valu": [177, 594, 1561, 1563, 1564], "unstack": [178, 595, 1258, 1260, 1261], "var": [179, 596, 1601, 1603, 1604], "variable_data": [181, 598, 1300, 1302, 1303], "vecdot": [182, 599, 1404, 1406, 1407], "vector_norm": [183, 600, 1408, 1410, 1411], "vector_to_skew_symmetric_matrix": [184, 601, 1412, 1414, 1415], "where": [185, 602, 1544, 1546, 1547], "zero_pad": [186, 603, 1479, 1480, 1481], "zeros_lik": [187, 604, 787, 789, 790], "convers": [188, 605], "args_to_ivi": 189, "args_to_n": 190, "to_ivi": [191, 608], "to_n": [192, 609], "creation": [193, 610, 731], "arraywithcr": 194, "data": [195, 612, 660, 668, 676, 690, 791], "type": [195, 612, 663, 668, 690, 791], "arraywithdatatyp": 196, "devic": [197, 614, 655, 669, 871], "arraywithdevic": 198, "elementwis": [199, 616, 904], "arraywithelementwis": 200, "gener": [201, 618, 660, 1142], "arraywithgener": 202, "gradient": [203, 620, 1263], "arraywithgradi": 204, "imag": [205, 622], "arraywithimag": 206, "layer": [207, 624, 1305, 1633], "arraywithlay": 208, "linear": [209, 626, 1322, 1326, 1643], "algebra": [209, 626, 1326], "arraywithlinearalgebra": 210, "loss": [211, 628, 1416], "arraywithloss": 212, "manipul": [213, 630, 1429], "arraywithmanipul": 214, "norm": [215, 632, 1504, 1647], "arraywithnorm": 216, "random": [217, 634, 1508], "arraywithrandom": 218, "search": [219, 636, 1530], "arraywithsearch": 220, "set": [221, 638, 649, 664, 1548], "arraywithset": 222, "arraywithsort": 224, "statist": [225, 642, 1579], "arraywithstatist": 226, "util": [227, 644, 1605], "arraywithutil": 228, "wrap": [229, 646, 665], "backend": [231, 654, 664, 673, 690], "handler": [231, 673], "choose_random_backend": 232, "clear_backend_stack": 233, "current_backend": 234, "get_backend": 235, "set_backend": 236, "try_import_ivy_jax": 237, "try_import_ivy_mxnet": 238, "try_import_ivy_numpi": 239, "try_import_ivy_tf": 240, "try_import_ivy_torch": 241, "unset_backend": 242, "background": [243, 1615], "ml": 244, "explos": 244, "standard": 245, "skeptic": 245, "complimentari": 245, "v": [245, 690], "competit": 245, "do": [245, 660], "work": [245, 652], "The": [245, 650, 675, 690], "api": [245, 651, 654, 659, 667, 673, 675, 677, 678], "why": [246, 660], "unifi": [246, 675], "No": [246, 649], "more": [246, 649], "re": 246, "implement": 246, "infinit": 246, "shelf": 246, "life": 246, "containerwithactiv": 248, "base": 249, "containerbas": 250, "contain": [251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 650, 667, 676, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 734, 737, 740, 742, 745, 747, 749, 752, 754, 757, 760, 762, 764, 766, 768, 771, 773, 775, 777, 778, 781, 782, 785, 788, 789, 795, 797, 799, 801, 803, 805, 807, 809, 815, 819, 821, 824, 826, 829, 832, 834, 836, 839, 841, 843, 845, 847, 849, 852, 854, 858, 860, 878, 880, 896, 898, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 942, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 1032, 1034, 1036, 1038, 1040, 1042, 1044, 1046, 1048, 1050, 1052, 1054, 1056, 1058, 1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1144, 1146, 1154, 1156, 1158, 1160, 1164, 1166, 1171, 1173, 1175, 1177, 1179, 1181, 1188, 1190, 1192, 1194, 1203, 1205, 1209, 1211, 1237, 1239, 1245, 1246, 1250, 1251, 1259, 1260, 1265, 1268, 1273, 1276, 1278, 1281, 1284, 1287, 1291, 1292, 1297, 1298, 1301, 1302, 1307, 1309, 1317, 1319, 1328, 1330, 1332, 1334, 1336, 1338, 1340, 1342, 1344, 1348, 1350, 1352, 1355, 1357, 1359, 1361, 1363, 1365, 1367, 1369, 1371, 1373, 1376, 1378, 1380, 1382, 1384, 1386, 1388, 1389, 1392, 1394, 1397, 1398, 1401, 1402, 1405, 1406, 1409, 1410, 1413, 1414, 1418, 1420, 1422, 1424, 1426, 1428, 1431, 1433, 1435, 1437, 1439, 1442, 1444, 1446, 1449, 1452, 1454, 1456, 1458, 1460, 1462, 1464, 1466, 1468, 1471, 1474, 1477, 1480, 1506, 1510, 1512, 1514, 1516, 1518, 1520, 1522, 1524, 1527, 1529, 1532, 1534, 1536, 1538, 1541, 1543, 1545, 1546, 1550, 1551, 1554, 1555, 1558, 1559, 1562, 1563, 1567, 1569, 1572, 1574, 1576, 1578, 1581, 1584, 1587, 1590, 1593, 1596, 1599, 1602, 1603, 1607, 1609, 1611, 1613], "add_ivy_container_instance_method": [260, 647], "matrix_pow": [354, 1358, 1359, 1360], "maximum": [358, 1069, 1070, 1071], "minimum": [362, 1073, 1074, 1075], "slogdet": [393, 1379, 1380, 1381], "static_ab": [405, 908], "static_aco": [406, 912], "static_acosh": [407, 916], "static_add": [408, 920], "static_al": [409, 1609], "static_all_equ": [410, 1146], "static_ani": [411, 1613], "static_arang": [412, 734], "static_argmax": [413, 1534], "static_argmin": [414, 1538], "static_argsort": [415, 1569], "static_asarrai": [416, 737], "static_asin": [417, 924], "static_asinh": [418, 928], "static_astyp": [419, 797], "static_atan": [420, 932], "static_atan2": [421, 936], "static_atanh": [422, 940], "static_binary_cross_entropi": [423, 1420], "static_bitwise_and": [424, 944], "static_bitwise_invert": [425, 948], "static_bitwise_left_shift": [426, 952], "static_bitwise_or": [427, 956], "static_bitwise_right_shift": [428, 960], "static_bitwise_xor": [429, 964], "static_broadcast_arrai": [430, 801], "static_broadcast_to": [431, 805], "static_can_cast": [432, 809], "static_ceil": [433, 968], "static_choleski": [434, 1330], "static_clip": [435, 1433], "static_clip_matrix_norm": [436, 1156], "static_clip_vector_norm": [437, 1160], "static_concat": [438, 1437], "static_conv1d": [439, 1309], "static_co": [440, 972], "static_cosh": [441, 976], "static_cross": [442, 1334], "static_cross_entropi": [443, 1424], "static_cumprod": [444, 1166], "static_default_float_dtyp": [445, 815], "static_depthwise_conv2d": [446, 1319], "static_det": [447, 1338], "static_dev": [448, 880], "static_diagon": [449, 1342], "static_divid": [450, 980], "static_dtyp": [451, 821], "static_einops_rearrang": [452, 1173], "static_einops_reduc": [453, 1177], "static_einops_repeat": [454, 1181], "static_empty_lik": [455, 742], "static_equ": [456, 984], "static_erf": [457, 988], "static_exp": [458, 992], "static_expand_dim": [459, 1444], "static_expm1": [460, 996], "static_ey": [461, 745], "static_finfo": [462, 826], "static_floor": [463, 1000], "static_floor_divid": [464, 1004], "static_from_dlpack": [465, 749], "static_full_lik": [466, 754], "static_function_supported_dtyp": [467, 829], "static_function_unsupported_dtyp": [468, 832], "static_gath": [469, 1190], "static_gather_nd": [470, 1194], "static_gelu": [471, 707], "static_great": [472, 1008], "static_greater_equ": [473, 1012], "static_has_nan": [474, 1205], "static_iinfo": [475, 836], "static_inplace_decr": [476, 1211], "static_inv": [477, 1350], "static_is_bool_dtyp": [478, 841], "static_is_float_dtyp": [479, 845], "static_is_int_dtyp": [480, 849], "static_is_uint_dtyp": [481, 854], "static_is_vari": [482, 1278], "static_isfinit": [483, 1016], "static_isinf": [484, 1020], "static_isnan": [485, 1024], "static_leaky_relu": [486, 711], "static_less": [487, 1028], "static_less_equ": [488, 1032], "static_linspac": [489, 757], "static_log": [490, 1036], "static_log10": [491, 1040], "static_log1p": [492, 1044], "static_log2": [493, 1048], "static_logaddexp": [494, 1052], "static_logical_and": [495, 1056], "static_logical_not": [496, 1060], "static_logical_or": [497, 1064], "static_logical_xor": [498, 1068], "static_logspac": [499, 760], "static_matrix_norm": [500, 1357], "static_matrix_pow": [501, 1361], "static_matrix_rank": [502, 1365], "static_matrix_transpos": [503, 1369], "static_maximum": [504, 1072], "static_meshgrid": [505, 764], "static_minimum": [506, 1076], "static_multinomi": [507, 1512], "static_multipli": [508, 1080], "static_native_arrai": [509, 768], "static_neg": [510, 1084], "static_nonzero": [511, 1543], "static_not_equ": [512, 1088], "static_on": [513, 771], "static_ones_lik": [514, 775], "static_out": [515, 1373], "static_posit": [516, 1092], "static_pow": [517, 1096], "static_qr": [518, 1378], "static_randint": [519, 1516], "static_random_norm": [520, 1520], "static_random_uniform": [521, 1524], "static_relu": [522, 715], "static_remaind": [523, 1100], "static_repeat": [524, 1454], "static_reshap": [525, 1458], "static_result_typ": [526, 860], "static_rol": [527, 1462], "static_round": [528, 1104], "static_searchsort": [529, 1574], "static_shuffl": [530, 1529], "static_sigmoid": [531, 719], "static_sign": [532, 1108], "static_sin": [533, 1112], "static_sinh": [534, 1116], "static_slogdet": [535, 1382], "static_softmax": [536, 723], "static_softplu": [537, 727], "static_solv": [538, 1386], "static_sort": [539, 1578], "static_sparse_cross_entropi": [540, 1428], "static_split": [541, 1466], "static_sqrt": [542, 1120], "static_squar": [543, 1124], "static_stable_divid": [544, 1239], "static_stop_gradi": [545, 1291], "static_subtract": [546, 1126], "static_svd": [547, 1388], "static_svdv": [548, 1392], "static_tan": [549, 1131], "static_tanh": [550, 1135], "static_tensordot": [551, 1397], "static_to_devic": [552, 896], "static_to_list": [553, 1245], "static_to_numpi": [554, 1250], "static_trac": [555, 1401], "static_tril": [556, 777], "static_triu": [557, 781], "static_trunc": [558, 1139], "static_unique_al": [559, 1550], "static_unique_count": [560, 1554], "static_unique_invers": [561, 1558], "static_unique_valu": [562, 1562], "static_unstack": [563, 1259], "static_var": [564, 1602], "static_vari": [565, 1297], "static_variable_data": [566, 1301], "static_vecdot": [567, 1405], "static_vector_norm": [568, 1409], "static_vector_to_skew_symmetric_matrix": [569, 1413], "static_wher": [570, 1545], "static_zero": [571, 785], "static_zeros_lik": [572, 788], "static_to_ivi": 606, "static_to_n": 607, "containerwithcr": 611, "containerwithdatatyp": 613, "containerwithdevic": 615, "containerwithelementwis": 617, "containerwithgener": 619, "containerwithgradi": 621, "containerwithimag": 623, "containerwithlay": 625, "containerwithlinearalgebra": 627, "containerwithloss": 629, "containerwithmanipul": 631, "containerwithnorm": 633, "containerwithrandom": 635, "containerwithsearch": 637, "containerwithset": 639, "containerwithsort": 641, "containerwithstatist": 643, "containerwithutil": 645, "contribut": [648, 1615], "up": 649, "clone": 649, "ivi": [649, 650, 654, 658, 660, 661, 662, 666, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 719, 721, 722, 723, 725, 726, 727, 733, 734, 736, 737, 740, 741, 742, 744, 745, 747, 748, 749, 752, 753, 754, 756, 757, 759, 760, 762, 763, 764, 766, 767, 768, 770, 771, 773, 774, 775, 777, 778, 779, 781, 782, 783, 785, 786, 788, 789, 790, 795, 796, 797, 799, 800, 801, 803, 804, 805, 807, 808, 809, 814, 815, 819, 820, 821, 824, 825, 826, 828, 829, 831, 832, 834, 835, 836, 839, 840, 841, 843, 844, 845, 847, 848, 849, 851, 852, 853, 854, 858, 859, 860, 878, 879, 880, 896, 897, 898, 899, 906, 907, 908, 910, 911, 912, 914, 915, 916, 918, 919, 920, 922, 923, 924, 926, 927, 928, 930, 931, 932, 934, 935, 936, 938, 939, 940, 942, 943, 944, 946, 947, 948, 950, 951, 952, 954, 955, 956, 958, 959, 960, 962, 963, 964, 966, 967, 968, 970, 971, 972, 974, 975, 976, 978, 979, 980, 982, 983, 984, 986, 987, 988, 990, 991, 992, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1031, 1032, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1055, 1056, 1058, 1059, 1060, 1062, 1063, 1064, 1066, 1067, 1068, 1070, 1071, 1072, 1074, 1075, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1099, 1100, 1102, 1103, 1104, 1106, 1107, 1108, 1110, 1111, 1112, 1114, 1115, 1116, 1118, 1119, 1120, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1135, 1136, 1137, 1139, 1140, 1141, 1144, 1145, 1146, 1154, 1155, 1156, 1158, 1159, 1160, 1164, 1165, 1166, 1171, 1172, 1173, 1175, 1176, 1177, 1179, 1180, 1181, 1188, 1189, 1190, 1192, 1193, 1194, 1203, 1204, 1205, 1209, 1210, 1211, 1237, 1238, 1239, 1245, 1246, 1247, 1250, 1251, 1252, 1259, 1260, 1261, 1265, 1266, 1268, 1269, 1273, 1274, 1276, 1277, 1278, 1281, 1282, 1284, 1285, 1287, 1288, 1291, 1292, 1293, 1297, 1298, 1299, 1301, 1302, 1303, 1307, 1308, 1309, 1317, 1318, 1319, 1328, 1329, 1330, 1332, 1333, 1334, 1336, 1337, 1338, 1340, 1341, 1342, 1344, 1345, 1348, 1349, 1350, 1352, 1353, 1355, 1356, 1357, 1359, 1360, 1361, 1363, 1364, 1365, 1367, 1368, 1369, 1371, 1372, 1373, 1376, 1377, 1378, 1380, 1381, 1382, 1384, 1385, 1386, 1388, 1389, 1390, 1392, 1393, 1394, 1395, 1397, 1398, 1399, 1401, 1402, 1403, 1405, 1406, 1407, 1409, 1410, 1411, 1413, 1414, 1415, 1418, 1419, 1420, 1422, 1423, 1424, 1426, 1427, 1428, 1431, 1432, 1433, 1435, 1436, 1437, 1439, 1440, 1442, 1443, 1444, 1446, 1447, 1449, 1450, 1452, 1453, 1454, 1456, 1457, 1458, 1460, 1461, 1462, 1464, 1465, 1466, 1468, 1469, 1471, 1472, 1474, 1475, 1477, 1478, 1480, 1481, 1506, 1507, 1510, 1511, 1512, 1514, 1515, 1516, 1518, 1519, 1520, 1522, 1523, 1524, 1527, 1528, 1529, 1532, 1533, 1534, 1536, 1537, 1538, 1540, 1541, 1542, 1543, 1545, 1546, 1547, 1550, 1551, 1552, 1554, 1555, 1556, 1558, 1559, 1560, 1562, 1563, 1564, 1567, 1568, 1569, 1571, 1572, 1573, 1574, 1576, 1577, 1578, 1581, 1582, 1584, 1585, 1587, 1588, 1590, 1591, 1593, 1594, 1596, 1597, 1599, 1600, 1602, 1603, 1604, 1607, 1608, 1609, 1611, 1612, 1613], "pycharm": [649, 650], "virtual": 649, "environ": 649, "docker": [649, 650, 652], "us": [649, 652, 659, 676], "miniconda": [649, 652], "venv": [649, 652], "interpret": 649, "window": 649, "maco": 649, "ubuntu": 649, "detail": 649, "hypothesi": [649, 660], "github": 649, "codespac": 649, "pre": [649, 671], "commit": [649, 650, 671], "basic": [650, 661], "get": 650, "help": 650, "todo": 650, "list": 650, "issu": 650, "extens": [650, 688, 1615], "manag": 650, "your": 650, "fork": 650, "who": 650, "To": 650, "ask": 650, "With": 650, "command": 650, "line": 650, "browser": 650, "pull": 650, "request": 650, "small": 650, "often": 650, "interact": 650, "run": [650, 659], "test": [650, 659, 660, 662], "local": 650, "most": 650, "out": [650, 655, 670], "id": [650, 659], "open": 651, "task": 651, "function": [651, 655, 656, 660, 663, 665, 667, 668, 669, 673, 678, 690], "format": [651, 671], "checklist": 651, "frontend": [651, 661, 662, 678], "build": [652, 673], "doc": 652, "dockerless": 652, "document": 652, "pipelin": [652, 690], "make_doc": 652, "sh": 652, "entrypoint": 652, "_make_doc": 652, "generate_src_rst_fil": 652, "py": 652, "sphinx": 652, "correct_built_html_fil": 652, "remove_fil": 652, "deep": 653, "dive": 653, "navig": 654, "code": 654, "categor": 654, "submodul": [654, 656], "design": [654, 672, 1615], "argument": [655, 668, 669, 670], "exampl": [655, 656, 658, 661, 662, 671], "keyword": 655, "number": 655, "oper": [655, 675, 690], "integ": [655, 668], "sequenc": 655, "nestabl": [655, 663, 667], "helper": [656, 660], "1": 656, "2": 656, "docstr": [657, 658], "bash": 659, "file": 659, "import": 660, "strategi": 660, "integr": 660, "we": 660, "need": 660, "how": 660, "write": 660, "effect": 660, "bonu": 660, "extend": 660, "featur": 660, "self": 660, "consist": 660, "explicit": 660, "test_array_funct": 660, "introduct": [661, 662], "composit": [661, 663], "further": 661, "full": [662, 750], "primari": 663, "mix": 663, "standalon": 663, "conveni": 663, "nativ": 666, "handl": [666, 690], "instanc": [667, 675], "static": 667, "special": 667, "modul": [668, 669, 677, 1645, 1646], "other": [668, 669], "unsupport": 668, "support": [668, 690], "inplac": 670, "updat": 670, "copi": 670, "lint": 671, "check": [671, 690], "hook": 671, "automat": 671, "reformat": 671, "befor": 671, "block": 673, "graph": [673, 678], "compil": [673, 678, 728, 729], "framework": 674, "class": 675, "monkei": 675, "patch": 675, "construct": 676, "represent": 676, "recurs": 676, "built": 676, "ins": 676, "access": 676, "save": 676, "load": 676, "comparison": 676, "custom": [676, 690], "case": 676, "compartment": 676, "configur": 676, "network": [676, 678], "weight": 676, "state": [677, 690], "initi": [677, 1627], "optim": [677, 1649, 1653], "transpil": 678, "role": 678, "convert": [678, 1625], "model": [678, 685, 690], "builder": 680, "ecosystem": 681, "gym": [682, 689], "mech": 683, "memori": [684, 689], "robot": [686, 689], "vision": [687, 689], "appli": 689, "librari": 689, "mechan": 689, "faq": 690, "maintain": 690, "version": 690, "dynam": 690, "size": 690, "shape": [690, 1234], "gpu": 690, "deploy": 690, "control": 690, "flow": 690, "auto": 690, "differenti": 690, "replica": 690, "parallel": 690, "altern": 690, "structur": 690, "func": 691, "wrapper": 691, "from_zero_dim_arrays_to_float": 692, "handle_nest": 693, "handle_out_argu": 694, "infer_devic": 695, "infer_dtyp": 696, "inputs_to_ivy_arrai": 697, "inputs_to_native_arrai": 698, "integer_array_to_float": 699, "outputs_to_ivy_arrai": 700, "to_native_arrays_and_back": 701, "constant": 730, "arang": [732, 733], "empti": 738, "ey": [743, 744], "linspac": [755, 756], "logspac": [758, 759], "ones": [769, 770], "zero": [784, 786, 1632], "as_ivy_dtyp": 792, "as_native_dtyp": 793, "check_float": 810, "closest_valid_dtyp": 811, "default_dtyp": 812, "default_float_dtyp": [813, 814], "default_int_dtyp": 816, "default_uint_dtyp": 817, "dtype_bit": 822, "function_supported_dtyp": [827, 828], "function_unsupported_dtyp": [830, 831], "invalid_dtyp": 837, "promote_typ": 855, "promote_types_of_input": 856, "set_default_dtyp": 861, "set_default_float_dtyp": 862, "set_default_int_dtyp": 863, "set_default_uint_dtyp": 864, "type_promote_arrai": 865, "unset_default_dtyp": 866, "unset_default_float_dtyp": 867, "unset_default_int_dtyp": 868, "unset_default_uint_dtyp": 869, "valid_dtyp": 870, "profil": 872, "as_ivy_dev": 873, "as_native_dev": 874, "clear_mem_on_dev": 875, "default_devic": 876, "dev_util": 881, "function_supported_devic": 882, "function_unsupported_devic": 883, "get_all_ivy_arrays_on_dev": 884, "gpu_is_avail": 885, "num_cpu_cor": 886, "num_gpu": 887, "num_ivy_arrays_on_dev": 888, "percent_used_mem_on_dev": 889, "print_all_ivy_arrays_on_dev": 890, "set_default_devic": 891, "set_split_factor": 892, "split_factor": 893, "split_func_cal": 894, "total_mem_on_dev": 900, "tpu_is_avail": 901, "unset_default_devic": 902, "used_mem_on_dev": 903, "arg_info": 1147, "arg_nam": 1148, "array_equ": 1149, "arrays_equ": 1150, "assert_supports_inplac": 1151, "cache_fn": 1152, "container_typ": 1161, "copy_arrai": 1162, "cumsum": 1167, "current_backend_str": 1168, "default": 1169, "exist": 1182, "floormod": 1183, "fourier_encod": 1184, "function_supported_devices_and_dtyp": 1185, "function_unsupported_devices_and_dtyp": 1186, "get_all_arrays_in_memori": 1195, "get_array_mod": 1196, "get_min_bas": 1197, "get_min_denomin": 1198, "get_nestable_mod": 1199, "get_num_dim": 1200, "get_referrers_recurs": 1201, "indices_wher": 1206, "inplace_arrays_support": 1207, "inplace_incr": 1212, "inplace_upd": 1213, "inplace_variables_support": 1214, "is_arrai": 1215, "is_ivy_arrai": 1216, "is_ivy_contain": 1217, "is_native_arrai": 1218, "match_kwarg": 1219, "multiprocess": 1220, "num_arrays_in_memori": 1221, "one_hot": 1222, "print_all_arrays_in_memori": 1223, "queue_timeout": 1224, "scatter_flat": 1225, "scatter_nd": 1226, "set_array_mod": 1227, "set_min_bas": 1228, "set_min_denomin": 1229, "set_nestable_mod": 1230, "set_queue_timeout": 1231, "set_shape_array_mod": 1232, "set_tmp_dir": 1233, "shape_array_mod": 1235, "stable_pow": 1240, "supports_inplac": 1241, "tmp_dir": 1242, "to_ivy_shap": 1243, "to_native_shap": 1248, "to_scalar": 1253, "try_else_non": 1254, "unset_array_mod": 1255, "unset_nestable_mod": 1256, "unset_shape_array_mod": 1257, "value_is_nan": 1262, "execute_with_gradi": 1270, "grad": 1271, "jac": 1279, "set_with_grad": 1289, "unset_with_grad": 1294, "value_and_grad": 1295, "with_grad": 1304, "conv1d_transpos": 1310, "conv2d": [1311, 1636], "conv2d_transpos": 1312, "conv3d": [1313, 1638], "conv3d_transpos": 1314, "deconv_length": 1315, "dropout": [1320, 1641], "handle_pad": 1321, "lstm_updat": 1323, "multi_head_attent": 1324, "scaled_dot_product_attent": 1325, "meta": 1482, "fomaml_step": 1483, "maml_step": 1484, "reptile_step": 1485, "nest": 1486, "all_nested_indic": 1487, "copy_nest": 1488, "index_nest": 1489, "insert_into_nest_at_index": 1490, "insert_into_nest_at_indic": 1491, "map": 1492, "map_nest_at_index": 1493, "map_nest_at_indic": 1494, "multi_index_nest": 1495, "nested_ani": 1496, "nested_indices_wher": 1497, "nested_map": 1498, "nested_multi_map": 1499, "prune_nest_at_index": 1500, "prune_nest_at_indic": 1501, "set_nest_at_index": 1502, "set_nest_at_indic": 1503, "seed": 1525, "glossari": 1614, "content": 1615, "overview": 1615, "quick": 1615, "start": 1615, "roadmap": [1615, 1621], "citat": 1615, "inspect": 1618, "add_array_spec": 1619, "fn_array_spec": 1620, "geglu": 1623, "to_ivy_modul": 1626, "firstlayersiren": 1628, "glorotuniform": 1629, "Ones": 1630, "siren": 1631, "conv1dtranspos": 1635, "conv2dtranspos": 1637, "conv3dtranspos": 1639, "depthwiseconv2d": 1640, "lstm": 1642, "multiheadattent": 1644, "layernorm": 1648, "adam": 1650, "lamb": 1651, "lar": 1652, "sgd": 1654, "sequenti": [1655, 1656], "verbos": 1658, "cprint": 1659}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})